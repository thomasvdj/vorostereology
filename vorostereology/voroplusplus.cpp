/* Generated by Cython 0.29.24 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "vpp.h"
        ],
        "language": "c++",
        "name": "vorostereology.voroplusplus",
        "sources": [
            "voroplusplus.pyx"
        ]
    },
    "module_name": "vorostereology.voroplusplus"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.6+ or Python 3.3+.
#else
#define CYTHON_ABI "0_29_24"
#define CYTHON_HEX_VERSION 0x001D18F0
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #if PY_VERSION_HEX >= 0x02070000
    #define HAVE_LONG_LONG
  #endif
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 0
  #elif !defined(CYTHON_USE_PYTYPE_LOOKUP)
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #if PY_VERSION_HEX < 0x02070000
    #undef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLONG_INTERNALS)
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_MAYBE_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_MAYBE_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
           typedef unsigned char     uint8_t;
           typedef unsigned int      uint32_t;
        #else
           typedef unsigned __int8   uint8_t;
           typedef unsigned __int32  uint32_t;
        #endif
    #endif
#else
   #include <stdint.h>
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#if PY_VERSION_HEX >= 0x030800A4 && PY_VERSION_HEX < 0x030800B2
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, 0, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_FAST_PYCCALL
#define __Pyx_PyFastCFunction_Check(func)\
    ((PyCFunction_Check(func) && (METH_FASTCALL == (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)))))
#else
#define __Pyx_PyFastCFunction_Check(func) 0
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if !CYTHON_FAST_THREAD_STATE || PY_VERSION_HEX < 0x02070000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStr(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
#else
#define __Pyx_PyDict_GetItemStr(dict, name)  PyDict_GetItem(dict, name)
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyByteArray_Check)
  #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? ((void)(klass), PyMethod_New(func, self)) : __Pyx_NewRef(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__vorostereology__voroplusplus
#define __PYX_HAVE_API__vorostereology__voroplusplus
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include <utility>

    #if __cplusplus > 199711L
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include "vpp.h"
#include "stdlib.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u) {
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "voroplusplus.pyx",
  "stringsource",
};

/*--- Type declarations ---*/

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#else
#define __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs) _PyFunction_FastCallDict(func, args, nargs, kwargs)
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyCFunctionFastCall.proto */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject *__Pyx_PyCFunction_FastCall(PyObject *func, PyObject **args, Py_ssize_t nargs);
#else
#define __Pyx_PyCFunction_FastCall(func, args, nargs)  (assert(0), NULL)
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCall2Args.proto */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_TrueDivideCObj(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_RemainderObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceRemainder(op1, op2) : PyNumber_Remainder(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_TrueDivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* append.proto */
static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'libcpp.utility' */

/* Module declarations from 'libcpp.pair' */

/* Module declarations from 'cython' */

/* Module declarations from 'vorostereology.voroplusplus' */
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
static std::vector<bool>  __pyx_convert_vector_from_py_bool(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_bool(const std::vector<bool>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___(const std::vector<std::vector<bool> >  &); /*proto*/
#define __Pyx_MODULE_NAME "vorostereology.voroplusplus"
extern int __pyx_module_is_main_vorostereology__voroplusplus;
int __pyx_module_is_main_vorostereology__voroplusplus = 0;

/* Implementation of 'vorostereology.voroplusplus' */
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_enumerate;
static const char __pyx_k_F[] = "F";
static const char __pyx_k_T[] = "T";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_b[] = "b";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_k[] = "k";
static const char __pyx_k_n[] = "n";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "q";
static const char __pyx_k_2d[] = "2d";
static const char __pyx_k_3d[] = "3d";
static const char __pyx_k_BB[] = "BB";
static const char __pyx_k_L1[] = "L1";
static const char __pyx_k_L2[] = "L2";
static const char __pyx_k_L3[] = "L3";
static const char __pyx_k_MM[] = "MM";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_rs[] = "rs";
static const char __pyx_k_u1[] = "u1";
static const char __pyx_k_u2[] = "u2";
static const char __pyx_k_xs[] = "xs";
static const char __pyx_k_ys[] = "ys";
static const char __pyx_k_zs[] = "zs";
static const char __pyx_k__19[] = "";
static const char __pyx_k_abs[] = "abs";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_any[] = "any";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_dot[] = "dot";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_min[] = "min";
static const char __pyx_k_obj[] = "obj";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_sys[] = "sys";
static const char __pyx_k_tol[] = "tol";
static const char __pyx_k_typ[] = "typ";
static const char __pyx_k_axis[] = "axis";
static const char __pyx_k_cbrt[] = "cbrt";
static const char __pyx_k_cell[] = "cell";
static const char __pyx_k_disp[] = "disp";
static const char __pyx_k_intc[] = "intc";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_norm[] = "norm";
static const char __pyx_k_ones[] = "ones";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_vals[] = "vals";
static const char __pyx_k_vptr[] = "vptr";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_alpha[] = "alpha";
static const char __pyx_k_areas[] = "areas";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_faces[] = "faces";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_lists[] = "lists";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = "order";
static const char __pyx_k_pairs[] = "pairs";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_radii[] = "radii";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_theta[] = "theta";
static const char __pyx_k_zeros[] = "zeros";
static const char __pyx_k_append[] = "append";
static const char __pyx_k_blocks[] = "blocks";
static const char __pyx_k_coeffs[] = "coeffs";
static const char __pyx_k_delete[] = "delete";
static const char __pyx_k_domain[] = "domain";
static const char __pyx_k_hstack[] = "hstack";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_limits[] = "limits";
static const char __pyx_k_linalg[] = "linalg";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_offset[] = "offset";
static const char __pyx_k_points[] = "points";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_solver[] = "solver";
static const char __pyx_k_square[] = "square";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_volume[] = "volume";
static const char __pyx_k_Lengths[] = "Lengths";
static const char __pyx_k_argsort[] = "argsort";
static const char __pyx_k_modules[] = "modules";
static const char __pyx_k_norm_xy[] = "norm_xy";
static const char __pyx_k_permute[] = "permute";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_reshape[] = "reshape";
static const char __pyx_k_volumes[] = "volumes";
static const char __pyx_k_weights[] = "weights";
static const char __pyx_k_diameter[] = "diameter";
static const char __pyx_k_domain_2[] = "domain_";
static const char __pyx_k_idx_sort[] = "idx_sort";
static const char __pyx_k_max_iter[] = "max_iter";
static const char __pyx_k_max_side[] = "max_side";
static const char __pyx_k_num_cpus[] = "num_cpus";
static const char __pyx_k_original[] = "original";
static const char __pyx_k_periodic[] = "periodic";
static const char __pyx_k_py_cells[] = "py_cells";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_residual[] = "residual";
static const char __pyx_k_vertices[] = "vertices";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_BB_solver[] = "BB_solver";
static const char __pyx_k_MM_solver[] = "MM_solver";
static const char __pyx_k_centroids[] = "centroids";
static const char __pyx_k_container[] = "container";
static const char __pyx_k_cos_theta[] = "cos_theta";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_idx_start[] = "idx_start";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_new_alpha[] = "new_alpha";
static const char __pyx_k_remainder[] = "remainder";
static const char __pyx_k_same_rows[] = "same_rows";
static const char __pyx_k_sin_theta[] = "sin_theta";
static const char __pyx_k_x_outside[] = "x_outside";
static const char __pyx_k_y_outside[] = "y_outside";
static const char __pyx_k_z_outside[] = "z_outside";
static const char __pyx_k_block_size[] = "block_size";
static const char __pyx_k_dispersion[] = "dispersion";
static const char __pyx_k_duplicates[] = "duplicates";
static const char __pyx_k_min_weight[] = "min_weight";
static const char __pyx_k_rot_matrix[] = "rot_matrix";
static const char __pyx_k_rows_close[] = "rows_close";
static const char __pyx_k_convergence[] = "convergence";
static const char __pyx_k_cross_cells[] = "cross_cells";
static const char __pyx_k_denominator[] = "denominator";
static const char __pyx_k_faces_areas[] = "faces_areas";
static const char __pyx_k_periodicity[] = "periodicity";
static const char __pyx_k_points_init[] = "points_init";
static const char __pyx_k_vertices_3d[] = "vertices_3d";
static const char __pyx_k_gradient_tol[] = "gradient_tol";
static const char __pyx_k_return_index[] = "return_index";
static const char __pyx_k_sorted_areas[] = "sorted_areas";
static const char __pyx_k_target_areas[] = "target_areas";
static const char __pyx_k_transform_2d[] = "transform_2d";
static const char __pyx_k_vector_class[] = "vector_class";
static const char __pyx_k_weights_init[] = "weights_init";
static const char __pyx_k_adjacent_cell[] = "adjacent_cell";
static const char __pyx_k_cell_vertices[] = "cell_vertices";
static const char __pyx_k_empty_indices[] = "empty_indices";
static const char __pyx_k_face_vertices[] = "face_vertices";
static const char __pyx_k_periodicity_2[] = "periodicity_";
static const char __pyx_k_return_counts[] = "return_counts";
static const char __pyx_k_section_areas[] = "section_areas";
static const char __pyx_k_voronoi_cells[] = "voronoi_cells";
static const char __pyx_k_max_iterations[] = "max_iterations";
static const char __pyx_k_num_iterations[] = "num_iterations";
static const char __pyx_k_respect_bounds[] = "respect_bounds";
static const char __pyx_k_sorted_indices[] = "sorted_indices";
static const char __pyx_k_target_areas_2[] = "target_areas_";
static const char __pyx_k_target_volumes[] = "target_volumes";
static const char __pyx_k_compute_voronoi[] = "compute_voronoi";
static const char __pyx_k_get_constructor[] = "get_constructor";
static const char __pyx_k_permute_targets[] = "permute_targets";
static const char __pyx_k_previous_points[] = "previous_points";
static const char __pyx_k_section_areas_2[] = "section_areas_";
static const char __pyx_k_section_indices[] = "section_indices";
static const char __pyx_k_cells_to_compute[] = "cells_to_compute";
static const char __pyx_k_computed_indices[] = "computed_indices";
static const char __pyx_k_cross_section_2d[] = "cross_section_2d";
static const char __pyx_k_first_occurrence[] = "first_occurrence";
static const char __pyx_k_original_indices[] = "original_indices";
static const char __pyx_k_polygons_indices[] = "polygons_indices";
static const char __pyx_k_previous_volumes[] = "previous_volumes";
static const char __pyx_k_previous_weights[] = "previous_weights";
static const char __pyx_k_target_volumes_2[] = "target_volumes_";
static const char __pyx_k_vertex_positions[] = "vertex_positions";
static const char __pyx_k_voroplusplus_pyx[] = "voroplusplus.pyx";
static const char __pyx_k_section_indices_2[] = "section_indices_";
static const char __pyx_k_volumes_centroids[] = "volumes_centroids";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_fix_num_iterations[] = "fix_num_iterations";
static const char __pyx_k_stopping_criterion[] = "stopping_criterion";
static const char __pyx_k_VoronoiPlusPlusError[] = "VoronoiPlusPlusError";
static const char __pyx_k_function_definitions[] = "function_definitions";
static const char __pyx_k_gradient_convergence[] = "gradient_convergence";
static const char __pyx_k_voronoi_num_fragments[] = "voronoi_num_fragments";
static const char __pyx_k_Minimization_iteration[] = "Minimization iteration: ";
static const char __pyx_k_compute_voronoi_bounded[] = "compute_voronoi_bounded";
static const char __pyx_k_compute_voronoi_section[] = "compute_voronoi_section";
static const char __pyx_k_gradient_max_iterations[] = "gradient_max_iterations";
static const char __pyx_k_compute_centroidal_laguerre[] = "compute_centroidal_laguerre";
static const char __pyx_k_minimization_num_iterations[] = "minimization_num_iterations";
static const char __pyx_k_vorostereology_voroplusplus[] = "vorostereology.voroplusplus";
static const char __pyx_k_compute_centroidal_laguerre2d[] = "compute_centroidal_laguerre2d";
static const char __pyx_k_Algorithm_number_of_iterations[] = "Algorithm number of iterations: ";
static const char __pyx_k_compute_voronoi_section_bounded[] = "compute_voronoi_section_bounded";
static const char __pyx_k_Algorithm_did_not_converge_in_ma[] = "Algorithm did not converge in max_iterations iterations.";
static const char __pyx_k_Invalid_solver_provided_defaulti[] = "Invalid solver provided, defaulting to MM.";
static const char __pyx_k_Minimization_number_of_iteration[] = "Minimization number of iterations: ";
static PyObject *__pyx_kp_u_2d;
static PyObject *__pyx_kp_u_3d;
static PyObject *__pyx_kp_u_Algorithm_did_not_converge_in_ma;
static PyObject *__pyx_kp_u_Algorithm_number_of_iterations;
static PyObject *__pyx_n_u_BB;
static PyObject *__pyx_n_s_BB_solver;
static PyObject *__pyx_n_u_F;
static PyObject *__pyx_kp_u_Invalid_solver_provided_defaulti;
static PyObject *__pyx_n_s_L1;
static PyObject *__pyx_n_s_L2;
static PyObject *__pyx_n_s_L3;
static PyObject *__pyx_n_s_Lengths;
static PyObject *__pyx_n_u_MM;
static PyObject *__pyx_n_s_MM_solver;
static PyObject *__pyx_kp_u_Minimization_iteration;
static PyObject *__pyx_kp_u_Minimization_number_of_iteration;
static PyObject *__pyx_n_s_T;
static PyObject *__pyx_n_s_VoronoiPlusPlusError;
static PyObject *__pyx_n_s__19;
static PyObject *__pyx_n_s_a;
static PyObject *__pyx_n_s_abs;
static PyObject *__pyx_n_u_adjacent_cell;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_alpha;
static PyObject *__pyx_n_s_any;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_areas;
static PyObject *__pyx_n_u_areas;
static PyObject *__pyx_n_s_argsort;
static PyObject *__pyx_n_s_array;
static PyObject *__pyx_n_s_axis;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_block_size;
static PyObject *__pyx_n_s_blocks;
static PyObject *__pyx_n_s_cbrt;
static PyObject *__pyx_n_s_cell;
static PyObject *__pyx_n_s_cell_vertices;
static PyObject *__pyx_n_s_cells_to_compute;
static PyObject *__pyx_n_s_centroids;
static PyObject *__pyx_n_u_centroids;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_coeffs;
static PyObject *__pyx_n_s_compute_centroidal_laguerre;
static PyObject *__pyx_n_s_compute_centroidal_laguerre2d;
static PyObject *__pyx_n_s_compute_voronoi;
static PyObject *__pyx_n_s_compute_voronoi_bounded;
static PyObject *__pyx_n_s_compute_voronoi_section;
static PyObject *__pyx_n_s_compute_voronoi_section_bounded;
static PyObject *__pyx_n_s_computed_indices;
static PyObject *__pyx_n_s_container;
static PyObject *__pyx_n_u_convergence;
static PyObject *__pyx_n_s_cos_theta;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_cross_cells;
static PyObject *__pyx_n_s_cross_section_2d;
static PyObject *__pyx_n_s_delete;
static PyObject *__pyx_n_s_denominator;
static PyObject *__pyx_n_s_diameter;
static PyObject *__pyx_n_s_disp;
static PyObject *__pyx_n_s_dispersion;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_domain;
static PyObject *__pyx_n_s_domain_2;
static PyObject *__pyx_n_s_dot;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_duplicates;
static PyObject *__pyx_n_s_empty_indices;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_face_vertices;
static PyObject *__pyx_n_s_faces;
static PyObject *__pyx_n_u_faces;
static PyObject *__pyx_n_s_faces_areas;
static PyObject *__pyx_n_s_first_occurrence;
static PyObject *__pyx_n_s_fix_num_iterations;
static PyObject *__pyx_n_s_floor;
static PyObject *__pyx_n_s_function_definitions;
static PyObject *__pyx_n_s_get_constructor;
static PyObject *__pyx_n_s_gradient_convergence;
static PyObject *__pyx_n_s_gradient_max_iterations;
static PyObject *__pyx_n_s_gradient_tol;
static PyObject *__pyx_n_s_hstack;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_idx_sort;
static PyObject *__pyx_n_s_idx_start;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_intc;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_limits;
static PyObject *__pyx_n_s_linalg;
static PyObject *__pyx_n_s_lists;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_iter;
static PyObject *__pyx_n_s_max_iterations;
static PyObject *__pyx_n_s_max_side;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min;
static PyObject *__pyx_n_s_min_weight;
static PyObject *__pyx_n_s_minimization_num_iterations;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_u_module;
static PyObject *__pyx_n_s_modules;
static PyObject *__pyx_n_s_n;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_new_alpha;
static PyObject *__pyx_n_s_norm;
static PyObject *__pyx_n_s_norm_xy;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num_cpus;
static PyObject *__pyx_n_s_num_iterations;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_u_numpy;
static PyObject *__pyx_n_s_obj;
static PyObject *__pyx_n_s_offset;
static PyObject *__pyx_n_s_ones;
static PyObject *__pyx_n_s_order;
static PyObject *__pyx_n_u_original;
static PyObject *__pyx_n_u_original_indices;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pairs;
static PyObject *__pyx_n_s_periodic;
static PyObject *__pyx_n_s_periodicity;
static PyObject *__pyx_n_s_periodicity_2;
static PyObject *__pyx_n_s_permute;
static PyObject *__pyx_n_s_permute_targets;
static PyObject *__pyx_n_s_points;
static PyObject *__pyx_n_u_points;
static PyObject *__pyx_n_s_points_init;
static PyObject *__pyx_n_u_polygons_indices;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_previous_points;
static PyObject *__pyx_n_s_previous_volumes;
static PyObject *__pyx_n_s_previous_weights;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_py_cells;
static PyObject *__pyx_n_s_q;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_radii;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_remainder;
static PyObject *__pyx_n_s_reshape;
static PyObject *__pyx_n_s_residual;
static PyObject *__pyx_n_s_respect_bounds;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_return_counts;
static PyObject *__pyx_n_s_return_index;
static PyObject *__pyx_n_s_rot_matrix;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_rows_close;
static PyObject *__pyx_n_s_rs;
static PyObject *__pyx_n_s_same_rows;
static PyObject *__pyx_n_s_section_areas;
static PyObject *__pyx_n_s_section_areas_2;
static PyObject *__pyx_n_s_section_indices;
static PyObject *__pyx_n_s_section_indices_2;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_sin_theta;
static PyObject *__pyx_n_s_solver;
static PyObject *__pyx_n_s_sorted_areas;
static PyObject *__pyx_n_s_sorted_indices;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_square;
static PyObject *__pyx_n_s_stopping_criterion;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_target_areas;
static PyObject *__pyx_n_u_target_areas;
static PyObject *__pyx_n_s_target_areas_2;
static PyObject *__pyx_n_s_target_volumes;
static PyObject *__pyx_n_u_target_volumes;
static PyObject *__pyx_n_s_target_volumes_2;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_theta;
static PyObject *__pyx_n_s_tol;
static PyObject *__pyx_n_s_transform_2d;
static PyObject *__pyx_n_s_typ;
static PyObject *__pyx_n_s_u1;
static PyObject *__pyx_n_s_u2;
static PyObject *__pyx_n_s_unique;
static PyObject *__pyx_n_s_vals;
static PyObject *__pyx_n_s_vector_class;
static PyObject *__pyx_n_s_vertex_positions;
static PyObject *__pyx_n_u_vertices;
static PyObject *__pyx_n_s_vertices_3d;
static PyObject *__pyx_n_s_volume;
static PyObject *__pyx_n_u_volume;
static PyObject *__pyx_n_s_volumes;
static PyObject *__pyx_n_u_volumes;
static PyObject *__pyx_n_s_volumes_centroids;
static PyObject *__pyx_n_s_voronoi_cells;
static PyObject *__pyx_n_s_voronoi_num_fragments;
static PyObject *__pyx_kp_s_voroplusplus_pyx;
static PyObject *__pyx_n_s_vorostereology_voroplusplus;
static PyObject *__pyx_n_s_vptr;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_weights;
static PyObject *__pyx_n_u_weights;
static PyObject *__pyx_n_s_weights_init;
static PyObject *__pyx_n_s_x_outside;
static PyObject *__pyx_n_s_xs;
static PyObject *__pyx_n_s_y_outside;
static PyObject *__pyx_n_s_ys;
static PyObject *__pyx_n_s_z_outside;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_n_s_zs;
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_get_constructor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_2same_rows(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_tol); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_4transform_2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cross_cells, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_offset); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_6BB_solver(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_weights_init, PyObject *__pyx_v_points, PyObject *__pyx_v_target_volumes, PyObject *__pyx_v_domain, CYTHON_UNUSED PyObject *__pyx_v_block_size, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_permute, PyObject *__pyx_v_max_iter, PyObject *__pyx_v_tol, PyObject *__pyx_v_disp, PyObject *__pyx_v_num_cpus); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_8MM_solver(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_weights_init, PyObject *__pyx_v_points, PyObject *__pyx_v_target_volumes, PyObject *__pyx_v_domain, CYTHON_UNUSED PyObject *__pyx_v_block_size, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_permute, PyObject *__pyx_v_max_iter, PyObject *__pyx_v_tol, PyObject *__pyx_v_disp, PyObject *__pyx_v_num_cpus); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_10compute_centroidal_laguerre(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_weights_init, PyObject *__pyx_v_points_init, PyObject *__pyx_v_target_volumes, PyObject *__pyx_v_domain, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_permute, PyObject *__pyx_v_max_iterations, PyObject *__pyx_v_gradient_max_iterations, PyObject *__pyx_v_tol, PyObject *__pyx_v_gradient_tol, PyObject *__pyx_v_disp, PyObject *__pyx_v_fix_num_iterations, PyObject *__pyx_v_solver, PyObject *__pyx_v_respect_bounds, PyObject *__pyx_v_num_cpus); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_12compute_centroidal_laguerre2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_weights_init, PyObject *__pyx_v_points_init, PyObject *__pyx_v_target_areas, PyObject *__pyx_v_domain, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_permute, PyObject *__pyx_v_max_iterations, PyObject *__pyx_v_gradient_max_iterations, PyObject *__pyx_v_tol, PyObject *__pyx_v_gradient_tol, PyObject *__pyx_v_disp, PyObject *__pyx_v_fix_num_iterations, PyObject *__pyx_v_solver, PyObject *__pyx_v_respect_bounds, PyObject *__pyx_v_num_cpus); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_14compute_voronoi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_16compute_voronoi_bounded(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_cells_to_compute, PyObject *__pyx_v_x_outside, PyObject *__pyx_v_y_outside, PyObject *__pyx_v_z_outside, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_18compute_voronoi_section(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_offset, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_20compute_voronoi_section_bounded(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_offset, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_cells_to_compute, PyObject *__pyx_v_x_outside, PyObject *__pyx_v_y_outside, PyObject *__pyx_v_z_outside, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic); /* proto */
static PyObject *__pyx_pf_14vorostereology_12voroplusplus_22voronoi_num_fragments(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic); /* proto */
static PyObject *__pyx_float_0_1;
static PyObject *__pyx_float_0_2;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_10_;
static PyObject *__pyx_float_0_01;
static PyObject *__pyx_float_1eneg_15;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_10;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_10000;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_slice_;
static PyObject *__pyx_slice__3;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__8;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_codeobj__21;
static PyObject *__pyx_codeobj__23;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__27;
static PyObject *__pyx_codeobj__29;
static PyObject *__pyx_codeobj__31;
static PyObject *__pyx_codeobj__33;
static PyObject *__pyx_codeobj__35;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
/* Late includes */

/* "vorostereology/voroplusplus.pyx":75
 * 
 * 
 * def get_constructor(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Input arg format:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_1get_constructor(PyObject *__pyx_self, PyObject *__pyx_v_obj); /*proto*/
static char __pyx_doc_14vorostereology_12voroplusplus_get_constructor[] = "\n    Input arg format:\n    obj = the object we want to get the constructor for\n    ";
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_1get_constructor = {"get_constructor", (PyCFunction)__pyx_pw_14vorostereology_12voroplusplus_1get_constructor, METH_O, __pyx_doc_14vorostereology_12voroplusplus_get_constructor};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_1get_constructor(PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_constructor (wrapper)", 0);
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_get_constructor(__pyx_self, ((PyObject *)__pyx_v_obj));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_get_constructor(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_obj) {
  PyObject *__pyx_v_typ = NULL;
  PyObject *__pyx_v_numpy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_constructor", 0);

  /* "vorostereology/voroplusplus.pyx":80
 *     obj = the object we want to get the constructor for
 *     """
 *     typ = type(obj)             # <<<<<<<<<<<<<<
 * 
 *     # Test if we have a numpy array
 */
  __Pyx_INCREF(((PyObject *)Py_TYPE(__pyx_v_obj)));
  __pyx_v_typ = ((PyObject *)Py_TYPE(__pyx_v_obj));

  /* "vorostereology/voroplusplus.pyx":83
 * 
 *     # Test if we have a numpy array
 *     if hasattr(typ, '__module__'):             # <<<<<<<<<<<<<<
 *         if typ.__module__ == 'numpy':
 *             numpy = sys.modules['numpy']
 */
  __pyx_t_1 = __Pyx_HasAttr(__pyx_v_typ, __pyx_n_u_module); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 83, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "vorostereology/voroplusplus.pyx":84
 *     # Test if we have a numpy array
 *     if hasattr(typ, '__module__'):
 *         if typ.__module__ == 'numpy':             # <<<<<<<<<<<<<<
 *             numpy = sys.modules['numpy']
 *             typ = numpy.array
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_typ, __pyx_n_s_module); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_numpy, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "vorostereology/voroplusplus.pyx":85
 *     if hasattr(typ, '__module__'):
 *         if typ.__module__ == 'numpy':
 *             numpy = sys.modules['numpy']             # <<<<<<<<<<<<<<
 *             typ = numpy.array
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_sys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_modules); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_4, __pyx_n_u_numpy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_numpy = __pyx_t_3;
      __pyx_t_3 = 0;

      /* "vorostereology/voroplusplus.pyx":86
 *         if typ.__module__ == 'numpy':
 *             numpy = sys.modules['numpy']
 *             typ = numpy.array             # <<<<<<<<<<<<<<
 * 
 *     return typ
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_numpy, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 86, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_typ, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "vorostereology/voroplusplus.pyx":84
 *     # Test if we have a numpy array
 *     if hasattr(typ, '__module__'):
 *         if typ.__module__ == 'numpy':             # <<<<<<<<<<<<<<
 *             numpy = sys.modules['numpy']
 *             typ = numpy.array
 */
    }

    /* "vorostereology/voroplusplus.pyx":83
 * 
 *     # Test if we have a numpy array
 *     if hasattr(typ, '__module__'):             # <<<<<<<<<<<<<<
 *         if typ.__module__ == 'numpy':
 *             numpy = sys.modules['numpy']
 */
  }

  /* "vorostereology/voroplusplus.pyx":88
 *             typ = numpy.array
 * 
 *     return typ             # <<<<<<<<<<<<<<
 * 
 * def same_rows(a, b, tol=8):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_typ);
  __pyx_r = __pyx_v_typ;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":75
 * 
 * 
 * def get_constructor(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Input arg format:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vorostereology.voroplusplus.get_constructor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_typ);
  __Pyx_XDECREF(__pyx_v_numpy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":90
 *     return typ
 * 
 * def same_rows(a, b, tol=8):             # <<<<<<<<<<<<<<
 *     rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)
 *     return np.all(np.any(rows_close, axis=-1), axis=-1) and np.all(np.any(rows_close, axis=0), axis=0)
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_3same_rows(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_3same_rows = {"same_rows", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_3same_rows, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_3same_rows(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_a = 0;
  PyObject *__pyx_v_b = 0;
  PyObject *__pyx_v_tol = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("same_rows (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_a,&__pyx_n_s_b,&__pyx_n_s_tol,0};
    PyObject* values[3] = {0,0,0};
    values[2] = ((PyObject *)__pyx_int_8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_a)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_b)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("same_rows", 0, 2, 3, 1); __PYX_ERR(0, 90, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "same_rows") < 0)) __PYX_ERR(0, 90, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_a = values[0];
    __pyx_v_b = values[1];
    __pyx_v_tol = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("same_rows", 0, 2, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 90, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.same_rows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_2same_rows(__pyx_self, __pyx_v_a, __pyx_v_b, __pyx_v_tol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_2same_rows(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_tol) {
  PyObject *__pyx_v_rows_close = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("same_rows", 0);

  /* "vorostereology/voroplusplus.pyx":91
 * 
 * def same_rows(a, b, tol=8):
 *     rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)             # <<<<<<<<<<<<<<
 *     return np.all(np.any(rows_close, axis=-1), axis=-1) and np.all(np.any(rows_close, axis=0), axis=0)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_all); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_round); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_b, __pyx_tuple__2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyNumber_Subtract(__pyx_v_a, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_v_tol};
    __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_5, __pyx_v_tol};
    __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_6, 2+__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  } else
  #endif
  {
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_tol);
    __Pyx_GIVEREF(__pyx_v_tol);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_tol);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_axis, __pyx_int_neg_1) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_rows_close = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "vorostereology/voroplusplus.pyx":92
 * def same_rows(a, b, tol=8):
 *     rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)
 *     return np.all(np.any(rows_close, axis=-1), axis=-1) and np.all(np.any(rows_close, axis=0), axis=0)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_all); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_any); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_rows_close);
  __Pyx_GIVEREF(__pyx_v_rows_close);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_rows_close);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_axis, __pyx_int_neg_1) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_axis, __pyx_int_neg_1) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 92, __pyx_L1_error)
  if (__pyx_t_8) {
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_7 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L3_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_all); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_any); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_rows_close);
  __Pyx_GIVEREF(__pyx_v_rows_close);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_rows_close);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_axis, __pyx_int_0) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_7 = __pyx_t_4;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_L3_bool_binop_done:;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":90
 *     return typ
 * 
 * def same_rows(a, b, tol=8):             # <<<<<<<<<<<<<<
 *     rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)
 *     return np.all(np.any(rows_close, axis=-1), axis=-1) and np.all(np.any(rows_close, axis=0), axis=0)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("vorostereology.voroplusplus.same_rows", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rows_close);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":95
 * 
 * 
 * def transform_2d(cross_cells, coeffs, offset):             # <<<<<<<<<<<<<<
 *     norm = np.linalg.norm(coeffs)
 *     norm_xy = np.linalg.norm(coeffs[0:2])
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_5transform_2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_5transform_2d = {"transform_2d", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_5transform_2d, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_5transform_2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_cross_cells = 0;
  PyObject *__pyx_v_coeffs = 0;
  PyObject *__pyx_v_offset = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("transform_2d (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_cross_cells,&__pyx_n_s_coeffs,&__pyx_n_s_offset,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cross_cells)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transform_2d", 1, 3, 3, 1); __PYX_ERR(0, 95, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("transform_2d", 1, 3, 3, 2); __PYX_ERR(0, 95, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "transform_2d") < 0)) __PYX_ERR(0, 95, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_cross_cells = values[0];
    __pyx_v_coeffs = values[1];
    __pyx_v_offset = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("transform_2d", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 95, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.transform_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_4transform_2d(__pyx_self, __pyx_v_cross_cells, __pyx_v_coeffs, __pyx_v_offset);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_4transform_2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_cross_cells, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_offset) {
  PyObject *__pyx_v_norm = NULL;
  PyObject *__pyx_v_norm_xy = NULL;
  PyObject *__pyx_v_cos_theta = NULL;
  PyObject *__pyx_v_sin_theta = NULL;
  PyObject *__pyx_v_u1 = NULL;
  PyObject *__pyx_v_u2 = NULL;
  PyObject *__pyx_v_rot_matrix = NULL;
  PyObject *__pyx_7genexpr__pyx_v_cell = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("transform_2d", 0);

  /* "vorostereology/voroplusplus.pyx":96
 * 
 * def transform_2d(cross_cells, coeffs, offset):
 *     norm = np.linalg.norm(coeffs)             # <<<<<<<<<<<<<<
 *     norm_xy = np.linalg.norm(coeffs[0:2])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_coeffs) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_coeffs);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_norm = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":97
 * def transform_2d(cross_cells, coeffs, offset):
 *     norm = np.linalg.norm(coeffs)
 *     norm_xy = np.linalg.norm(coeffs[0:2])             # <<<<<<<<<<<<<<
 * 
 *     cos_theta = coeffs[2] / norm
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_v_coeffs, 0, 2, NULL, NULL, &__pyx_slice__3, 1, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_norm_xy = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":99
 *     norm_xy = np.linalg.norm(coeffs[0:2])
 * 
 *     cos_theta = coeffs[2] / norm             # <<<<<<<<<<<<<<
 *     sin_theta = norm_xy / norm
 *     u1 = coeffs[1] / norm_xy
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coeffs, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cos_theta = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":100
 * 
 *     cos_theta = coeffs[2] / norm
 *     sin_theta = norm_xy / norm             # <<<<<<<<<<<<<<
 *     u1 = coeffs[1] / norm_xy
 *     u2 = -1 * coeffs[0] / norm_xy
 */
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_norm_xy, __pyx_v_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_sin_theta = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":101
 *     cos_theta = coeffs[2] / norm
 *     sin_theta = norm_xy / norm
 *     u1 = coeffs[1] / norm_xy             # <<<<<<<<<<<<<<
 *     u2 = -1 * coeffs[0] / norm_xy
 * 
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_coeffs, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_norm_xy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_u1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":102
 *     sin_theta = norm_xy / norm
 *     u1 = coeffs[1] / norm_xy
 *     u2 = -1 * coeffs[0] / norm_xy             # <<<<<<<<<<<<<<
 * 
 *     rot_matrix = np.zeros((3, 3))
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_coeffs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_neg_1, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_norm_xy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_u2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":104
 *     u2 = -1 * coeffs[0] / norm_xy
 * 
 *     rot_matrix = np.zeros((3, 3))             # <<<<<<<<<<<<<<
 *     rot_matrix[0, 0] = cos_theta + u1 * u1 * (1 - cos_theta)
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_tuple__4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_tuple__4);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_rot_matrix = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":105
 * 
 *     rot_matrix = np.zeros((3, 3))
 *     rot_matrix[0, 0] = cos_theta + u1 * u1 * (1 - cos_theta)             # <<<<<<<<<<<<<<
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[0, 2] = u2 * sin_theta
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_u1, __pyx_v_u1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_v_cos_theta, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_v_cos_theta, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__5, __pyx_t_3) < 0)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":106
 *     rot_matrix = np.zeros((3, 3))
 *     rot_matrix[0, 0] = cos_theta + u1 * u1 * (1 - cos_theta)
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)             # <<<<<<<<<<<<<<
 *     rot_matrix[0, 2] = u2 * sin_theta
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_u1, __pyx_v_u2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_v_cos_theta, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__6, __pyx_t_1) < 0)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":107
 *     rot_matrix[0, 0] = cos_theta + u1 * u1 * (1 - cos_theta)
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[0, 2] = u2 * sin_theta             # <<<<<<<<<<<<<<
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_u2, __pyx_v_sin_theta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__7, __pyx_t_1) < 0)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":108
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[0, 2] = u2 * sin_theta
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)             # <<<<<<<<<<<<<<
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_u1, __pyx_v_u2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_v_cos_theta, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__8, __pyx_t_3) < 0)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":109
 *     rot_matrix[0, 2] = u2 * sin_theta
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)             # <<<<<<<<<<<<<<
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_u2, __pyx_v_u2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_v_cos_theta, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_v_cos_theta, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__9, __pyx_t_2) < 0)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":110
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta             # <<<<<<<<<<<<<<
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta
 *     rot_matrix[2, 1] = u1 * sin_theta
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_int_neg_1, __pyx_v_u1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_sin_theta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__10, __pyx_t_1) < 0)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":111
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta             # <<<<<<<<<<<<<<
 *     rot_matrix[2, 1] = u1 * sin_theta
 *     rot_matrix[2, 2] = cos_theta
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_neg_1, __pyx_v_u2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_sin_theta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__11, __pyx_t_2) < 0)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":112
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta
 *     rot_matrix[2, 1] = u1 * sin_theta             # <<<<<<<<<<<<<<
 *     rot_matrix[2, 2] = cos_theta
 * 
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_u1, __pyx_v_sin_theta); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__12, __pyx_t_2) < 0)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":113
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta
 *     rot_matrix[2, 1] = u1 * sin_theta
 *     rot_matrix[2, 2] = cos_theta             # <<<<<<<<<<<<<<
 * 
 *     return [np.dot(rot_matrix, (np.array(cell) - offset).T).T[:, 0:2] for cell in cross_cells]
 */
  if (unlikely(PyObject_SetItem(__pyx_v_rot_matrix, __pyx_tuple__13, __pyx_v_cos_theta) < 0)) __PYX_ERR(0, 113, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":115
 *     rot_matrix[2, 2] = cos_theta
 * 
 *     return [np.dot(rot_matrix, (np.array(cell) - offset).T).T[:, 0:2] for cell in cross_cells]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_v_cross_cells)) || PyTuple_CheckExact(__pyx_v_cross_cells)) {
      __pyx_t_1 = __pyx_v_cross_cells; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_cross_cells); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 115, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 115, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_3); __pyx_t_5++; if (unlikely(0 < 0)) __PYX_ERR(0, 115, __pyx_L5_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_6(__pyx_t_1);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 115, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_cell, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_dot); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_array); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_9, function);
        }
      }
      __pyx_t_4 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_9, __pyx_t_8, __pyx_7genexpr__pyx_v_cell) : __Pyx_PyObject_CallOneArg(__pyx_t_9, __pyx_7genexpr__pyx_v_cell);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyNumber_Subtract(__pyx_t_4, __pyx_v_offset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_T); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_rot_matrix, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L5_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_7)) {
        PyObject *__pyx_temp[3] = {__pyx_t_9, __pyx_v_rot_matrix, __pyx_t_4};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_7, __pyx_temp+1-__pyx_t_10, 2+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L5_error)
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else
      #endif
      {
        __pyx_t_8 = PyTuple_New(2+__pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 115, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (__pyx_t_9) {
          __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9); __pyx_t_9 = NULL;
        }
        __Pyx_INCREF(__pyx_v_rot_matrix);
        __Pyx_GIVEREF(__pyx_v_rot_matrix);
        PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_10, __pyx_v_rot_matrix);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_10, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_T); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_7, __pyx_tuple__14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 115, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_cell); __pyx_7genexpr__pyx_v_cell = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_cell); __pyx_7genexpr__pyx_v_cell = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":95
 * 
 * 
 * def transform_2d(cross_cells, coeffs, offset):             # <<<<<<<<<<<<<<
 *     norm = np.linalg.norm(coeffs)
 *     norm_xy = np.linalg.norm(coeffs[0:2])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("vorostereology.voroplusplus.transform_2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_norm);
  __Pyx_XDECREF(__pyx_v_norm_xy);
  __Pyx_XDECREF(__pyx_v_cos_theta);
  __Pyx_XDECREF(__pyx_v_sin_theta);
  __Pyx_XDECREF(__pyx_v_u1);
  __Pyx_XDECREF(__pyx_v_u2);
  __Pyx_XDECREF(__pyx_v_rot_matrix);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_cell);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":118
 * 
 * 
 * def BB_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_7BB_solver(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14vorostereology_12voroplusplus_6BB_solver[] = "\n    For now this function is not fully documented, most arguments are inherited from \"compute_centroidal_laguerre\".\n        This function finds the right weights to obtain a Laguerre diagram with a desired volume distribution by\n        minimizing a convex function using the Barzilai-Borwein method.\n    :param weights_init:\n    :param points:\n    :param target_volumes:\n    :param domain:\n    :param block_size:\n    :param periodicity:\n    :param permute:\n    :param max_iter:\n    :param tol:\n    :param disp:\n    :return:\n    ";
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_7BB_solver = {"BB_solver", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_7BB_solver, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14vorostereology_12voroplusplus_6BB_solver};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_7BB_solver(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_weights_init = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_target_volumes = 0;
  PyObject *__pyx_v_domain = 0;
  CYTHON_UNUSED PyObject *__pyx_v_block_size = 0;
  PyObject *__pyx_v_periodicity = 0;
  PyObject *__pyx_v_permute = 0;
  PyObject *__pyx_v_max_iter = 0;
  PyObject *__pyx_v_tol = 0;
  PyObject *__pyx_v_disp = 0;
  PyObject *__pyx_v_num_cpus = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("BB_solver (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_weights_init,&__pyx_n_s_points,&__pyx_n_s_target_volumes,&__pyx_n_s_domain,&__pyx_n_s_block_size,&__pyx_n_s_periodicity,&__pyx_n_s_permute,&__pyx_n_s_max_iter,&__pyx_n_s_tol,&__pyx_n_s_disp,&__pyx_n_s_num_cpus,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)__pyx_int_10000);
    values[8] = ((PyObject *)__pyx_float_0_01);

    /* "vorostereology/voroplusplus.pyx":119
 * 
 * def BB_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):             # <<<<<<<<<<<<<<
 *     """
 *     For now this function is not fully documented, most arguments are inherited from "compute_centroidal_laguerre".
 */
    values[9] = ((PyObject *)Py_False);
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights_init)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("BB_solver", 0, 6, 11, 1); __PYX_ERR(0, 118, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_volumes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("BB_solver", 0, 6, 11, 2); __PYX_ERR(0, 118, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("BB_solver", 0, 6, 11, 3); __PYX_ERR(0, 118, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("BB_solver", 0, 6, 11, 4); __PYX_ERR(0, 118, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodicity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("BB_solver", 0, 6, 11, 5); __PYX_ERR(0, 118, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_permute);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_iter);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_disp);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_cpus);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "BB_solver") < 0)) __PYX_ERR(0, 118, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_weights_init = values[0];
    __pyx_v_points = values[1];
    __pyx_v_target_volumes = values[2];
    __pyx_v_domain = values[3];
    __pyx_v_block_size = values[4];
    __pyx_v_periodicity = values[5];
    __pyx_v_permute = values[6];
    __pyx_v_max_iter = values[7];
    __pyx_v_tol = values[8];
    __pyx_v_disp = values[9];
    __pyx_v_num_cpus = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("BB_solver", 0, 6, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 118, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.BB_solver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_6BB_solver(__pyx_self, __pyx_v_weights_init, __pyx_v_points, __pyx_v_target_volumes, __pyx_v_domain, __pyx_v_block_size, __pyx_v_periodicity, __pyx_v_permute, __pyx_v_max_iter, __pyx_v_tol, __pyx_v_disp, __pyx_v_num_cpus);

  /* "vorostereology/voroplusplus.pyx":118
 * 
 * 
 * def BB_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_6BB_solver(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_weights_init, PyObject *__pyx_v_points, PyObject *__pyx_v_target_volumes, PyObject *__pyx_v_domain, CYTHON_UNUSED PyObject *__pyx_v_block_size, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_permute, PyObject *__pyx_v_max_iter, PyObject *__pyx_v_tol, PyObject *__pyx_v_disp, PyObject *__pyx_v_num_cpus) {
  PyObject *__pyx_v_L1 = NULL;
  PyObject *__pyx_v_L2 = NULL;
  PyObject *__pyx_v_L3 = NULL;
  PyObject *__pyx_v_weights = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_diameter = NULL;
  PyObject *__pyx_v_min_weight = NULL;
  PyObject *__pyx_v_volumes = NULL;
  PyObject *__pyx_v_previous_volumes = NULL;
  PyObject *__pyx_v_target_volumes_ = NULL;
  PyObject *__pyx_v_residual = NULL;
  PyObject *__pyx_v_stopping_criterion = NULL;
  PyObject *__pyx_v_previous_weights = NULL;
  PyObject *__pyx_v_minimization_num_iterations = NULL;
  PyObject *__pyx_v_alpha = NULL;
  PyObject *__pyx_v_denominator = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::vector<double>  __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  std::vector<double>  __pyx_t_18;
  std::vector<double>  __pyx_t_19;
  std::vector<double>  __pyx_t_20;
  int __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("BB_solver", 0);

  /* "vorostereology/voroplusplus.pyx":136
 *     :return:
 *     """
 *     L1 = domain[0][1] - domain[0][0]             # <<<<<<<<<<<<<<
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_L1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":137
 *     """
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]             # <<<<<<<<<<<<<<
 *     L3 = domain[2][1] - domain[2][0]
 *     weights = weights_init
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_L2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":138
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]             # <<<<<<<<<<<<<<
 *     weights = weights_init
 *     n = weights.shape[0]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_L3 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":139
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]
 *     weights = weights_init             # <<<<<<<<<<<<<<
 *     n = weights.shape[0]
 *     diameter = np.sqrt(L1*L1 + L2*L2 + L3*L3)
 */
  __Pyx_INCREF(__pyx_v_weights_init);
  __pyx_v_weights = __pyx_v_weights_init;

  /* "vorostereology/voroplusplus.pyx":140
 *     L3 = domain[2][1] - domain[2][0]
 *     weights = weights_init
 *     n = weights.shape[0]             # <<<<<<<<<<<<<<
 *     diameter = np.sqrt(L1*L1 + L2*L2 + L3*L3)
 *     # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_weights, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":141
 *     weights = weights_init
 *     n = weights.shape[0]
 *     diameter = np.sqrt(L1*L1 + L2*L2 + L3*L3)             # <<<<<<<<<<<<<<
 *     # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 *     # the Laguerre diagram.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_L1, __pyx_v_L1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_L2, __pyx_v_L2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_L3, __pyx_v_L3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_diameter = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":144
 *     # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 *     # the Laguerre diagram.
 *     min_weight = np.min(weights)             # <<<<<<<<<<<<<<
 *     if min_weight <= 0:
 *         weights = weights - min_weight + diameter
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_weights) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_weights);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_min_weight = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":145
 *     # the Laguerre diagram.
 *     min_weight = np.min(weights)
 *     if min_weight <= 0:             # <<<<<<<<<<<<<<
 *         weights = weights - min_weight + diameter
 *     volumes = np.array(compute_volumes(weights,
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_weight, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 145, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "vorostereology/voroplusplus.pyx":146
 *     min_weight = np.min(weights)
 *     if min_weight <= 0:
 *         weights = weights - min_weight + diameter             # <<<<<<<<<<<<<<
 *     volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 */
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_weights, __pyx_v_min_weight); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_v_diameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":145
 *     # the Laguerre diagram.
 *     min_weight = np.min(weights)
 *     if min_weight <= 0:             # <<<<<<<<<<<<<<
 *         weights = weights - min_weight + diameter
 *     volumes = np.array(compute_volumes(weights,
 */
  }

  /* "vorostereology/voroplusplus.pyx":147
 *     if min_weight <= 0:
 *         weights = weights - min_weight + diameter
 *     volumes = np.array(compute_volumes(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_convert_vector_from_py_double(__pyx_v_weights); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 147, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":148
 *         weights = weights - min_weight + diameter
 *     volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],             # <<<<<<<<<<<<<<
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 *     previous_volumes = volumes
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":149
 *     volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))             # <<<<<<<<<<<<<<
 *     previous_volumes = volumes
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_18 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_19 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_20 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_v_num_cpus); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 149, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":147
 *     if min_weight <= 0:
 *         weights = weights - min_weight + diameter
 *     volumes = np.array(compute_volumes(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 */
  __pyx_t_3 = __pyx_convert_vector_to_py_double(compute_volumes(__pyx_t_7, ((double)__pyx_t_8), ((double)__pyx_t_9), ((double)__pyx_t_10), ((double)__pyx_t_11), ((double)__pyx_t_12), ((double)__pyx_t_13), ((int)__pyx_t_14), ((int)__pyx_t_15), ((int)__pyx_t_16), __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, ((int)__pyx_t_21))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_volumes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":150
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 *     previous_volumes = volumes             # <<<<<<<<<<<<<<
 * 
 *     # Optional, permutation step might speed up the algorithm in some cases
 */
  __Pyx_INCREF(__pyx_v_volumes);
  __pyx_v_previous_volumes = __pyx_v_volumes;

  /* "vorostereology/voroplusplus.pyx":153
 * 
 *     # Optional, permutation step might speed up the algorithm in some cases
 *     if permute:             # <<<<<<<<<<<<<<
 *         target_volumes_ = function_definitions.permute_targets(volumes, target_volumes, volumes.shape[0])
 *     else:
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_permute); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 153, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "vorostereology/voroplusplus.pyx":154
 *     # Optional, permutation step might speed up the algorithm in some cases
 *     if permute:
 *         target_volumes_ = function_definitions.permute_targets(volumes, target_volumes, volumes.shape[0])             # <<<<<<<<<<<<<<
 *     else:
 *         target_volumes_ = target_volumes
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_function_definitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_permute_targets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_volumes, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_21 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_21 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_volumes, __pyx_v_target_volumes, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_21, 3+__pyx_t_21); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_volumes, __pyx_v_target_volumes, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_21, 3+__pyx_t_21); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_21); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_volumes);
      __Pyx_GIVEREF(__pyx_v_volumes);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_21, __pyx_v_volumes);
      __Pyx_INCREF(__pyx_v_target_volumes);
      __Pyx_GIVEREF(__pyx_v_target_volumes);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_21, __pyx_v_target_volumes);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_21, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_target_volumes_ = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":153
 * 
 *     # Optional, permutation step might speed up the algorithm in some cases
 *     if permute:             # <<<<<<<<<<<<<<
 *         target_volumes_ = function_definitions.permute_targets(volumes, target_volumes, volumes.shape[0])
 *     else:
 */
    goto __pyx_L4;
  }

  /* "vorostereology/voroplusplus.pyx":156
 *         target_volumes_ = function_definitions.permute_targets(volumes, target_volumes, volumes.shape[0])
 *     else:
 *         target_volumes_ = target_volumes             # <<<<<<<<<<<<<<
 * 
 *     residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_target_volumes);
    __pyx_v_target_volumes_ = __pyx_v_target_volumes;
  }
  __pyx_L4:;

  /* "vorostereology/voroplusplus.pyx":158
 *         target_volumes_ = target_volumes
 * 
 *     residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)             # <<<<<<<<<<<<<<
 *     stopping_criterion = np.min(target_volumes) * tol
 *     previous_weights = weights
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_max); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_abs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_target_volumes_); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_22 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_22)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_22);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_22) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_22, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_residual = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":159
 * 
 *     residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)
 *     stopping_criterion = np.min(target_volumes) * tol             # <<<<<<<<<<<<<<
 *     previous_weights = weights
 *     minimization_num_iterations = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_min); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_v_target_volumes) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_target_volumes);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_tol); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_stopping_criterion = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":160
 *     residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)
 *     stopping_criterion = np.min(target_volumes) * tol
 *     previous_weights = weights             # <<<<<<<<<<<<<<
 *     minimization_num_iterations = 0
 *     alpha = 0.1 / np.cbrt(L1*L2*L3)
 */
  __Pyx_INCREF(__pyx_v_weights);
  __pyx_v_previous_weights = __pyx_v_weights;

  /* "vorostereology/voroplusplus.pyx":161
 *     stopping_criterion = np.min(target_volumes) * tol
 *     previous_weights = weights
 *     minimization_num_iterations = 0             # <<<<<<<<<<<<<<
 *     alpha = 0.1 / np.cbrt(L1*L2*L3)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_minimization_num_iterations = __pyx_int_0;

  /* "vorostereology/voroplusplus.pyx":162
 *     previous_weights = weights
 *     minimization_num_iterations = 0
 *     alpha = 0.1 / np.cbrt(L1*L2*L3)             # <<<<<<<<<<<<<<
 * 
 *     while residual > stopping_criterion and minimization_num_iterations < max_iter:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cbrt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_L1, __pyx_v_L2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_L3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyFloat_TrueDivideCObj(__pyx_float_0_1, __pyx_t_3, 0.1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_alpha = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "vorostereology/voroplusplus.pyx":164
 *     alpha = 0.1 / np.cbrt(L1*L2*L3)
 * 
 *     while residual > stopping_criterion and minimization_num_iterations < max_iter:             # <<<<<<<<<<<<<<
 *         # Update weights and calculate volumes of the tessellation with these new weights
 *         weights = previous_weights - alpha * (volumes - target_volumes_)
 */
  while (1) {
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_residual, __pyx_v_stopping_criterion, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 164, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_23) {
    } else {
      __pyx_t_6 = __pyx_t_23;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_minimization_num_iterations, __pyx_v_max_iter, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 164, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __pyx_t_23;
    __pyx_L7_bool_binop_done:;
    if (!__pyx_t_6) break;

    /* "vorostereology/voroplusplus.pyx":166
 *     while residual > stopping_criterion and minimization_num_iterations < max_iter:
 *         # Update weights and calculate volumes of the tessellation with these new weights
 *         weights = previous_weights - alpha * (volumes - target_volumes_)             # <<<<<<<<<<<<<<
 *         # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 *         # the Laguerre diagram.
 */
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_target_volumes_); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_alpha, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_previous_weights, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":169
 *         # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 *         # the Laguerre diagram.
 *         min_weight = np.min(weights)             # <<<<<<<<<<<<<<
 *         if min_weight <= 0:
 *             weights = weights - min_weight + diameter
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_weights) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_weights);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_min_weight, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":170
 *         # the Laguerre diagram.
 *         min_weight = np.min(weights)
 *         if min_weight <= 0:             # <<<<<<<<<<<<<<
 *             weights = weights - min_weight + diameter
 *             previous_weights = previous_weights - min_weight + diameter
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_min_weight, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 170, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":171
 *         min_weight = np.min(weights)
 *         if min_weight <= 0:
 *             weights = weights - min_weight + diameter             # <<<<<<<<<<<<<<
 *             previous_weights = previous_weights - min_weight + diameter
 *         volumes = np.array(compute_volumes(weights,
 */
      __pyx_t_5 = PyNumber_Subtract(__pyx_v_weights, __pyx_v_min_weight); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_v_diameter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":172
 *         if min_weight <= 0:
 *             weights = weights - min_weight + diameter
 *             previous_weights = previous_weights - min_weight + diameter             # <<<<<<<<<<<<<<
 *         volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 */
      __pyx_t_2 = PyNumber_Subtract(__pyx_v_previous_weights, __pyx_v_min_weight); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_v_diameter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_previous_weights, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "vorostereology/voroplusplus.pyx":170
 *         # the Laguerre diagram.
 *         min_weight = np.min(weights)
 *         if min_weight <= 0:             # <<<<<<<<<<<<<<
 *             weights = weights - min_weight + diameter
 *             previous_weights = previous_weights - min_weight + diameter
 */
    }

    /* "vorostereology/voroplusplus.pyx":173
 *             weights = weights - min_weight + diameter
 *             previous_weights = previous_weights - min_weight + diameter
 *         volumes = np.array(compute_volumes(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_20 = __pyx_convert_vector_from_py_double(__pyx_v_weights); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 173, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":174
 *             previous_weights = previous_weights - min_weight + diameter
 *         volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],             # <<<<<<<<<<<<<<
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "vorostereology/voroplusplus.pyx":175
 *         volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))             # <<<<<<<<<<<<<<
 * 
 *         # Optional, permutation step might speed up the algorithm in some cases
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_periodicity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_periodicity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_periodicity, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_19 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_18 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__17); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_num_cpus); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":173
 *             weights = weights - min_weight + diameter
 *             previous_weights = previous_weights - min_weight + diameter
 *         volumes = np.array(compute_volumes(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_double(compute_volumes(__pyx_t_20, ((double)__pyx_t_13), ((double)__pyx_t_12), ((double)__pyx_t_11), ((double)__pyx_t_10), ((double)__pyx_t_9), ((double)__pyx_t_8), ((int)__pyx_t_21), ((int)__pyx_t_17), ((int)__pyx_t_16), __pyx_t_15, __pyx_t_19, __pyx_t_18, __pyx_t_7, ((int)__pyx_t_14))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_volumes, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":178
 * 
 *         # Optional, permutation step might speed up the algorithm in some cases
 *         if permute:             # <<<<<<<<<<<<<<
 *             target_volumes_ = function_definitions.permute_targets(volumes, target_volumes_, n)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_permute); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 178, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":179
 *         # Optional, permutation step might speed up the algorithm in some cases
 *         if permute:
 *             target_volumes_ = function_definitions.permute_targets(volumes, target_volumes_, n)             # <<<<<<<<<<<<<<
 * 
 *         # Update residual for the next iteration
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_function_definitions); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_permute_targets); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_volumes, __pyx_v_target_volumes_, __pyx_v_n};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_volumes, __pyx_v_target_volumes_, __pyx_v_n};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(3+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_volumes);
        __Pyx_GIVEREF(__pyx_v_volumes);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_14, __pyx_v_volumes);
        __Pyx_INCREF(__pyx_v_target_volumes_);
        __Pyx_GIVEREF(__pyx_v_target_volumes_);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_14, __pyx_v_target_volumes_);
        __Pyx_INCREF(__pyx_v_n);
        __Pyx_GIVEREF(__pyx_v_n);
        PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_14, __pyx_v_n);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_target_volumes_, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "vorostereology/voroplusplus.pyx":178
 * 
 *         # Optional, permutation step might speed up the algorithm in some cases
 *         if permute:             # <<<<<<<<<<<<<<
 *             target_volumes_ = function_definitions.permute_targets(volumes, target_volumes_, n)
 * 
 */
    }

    /* "vorostereology/voroplusplus.pyx":182
 * 
 *         # Update residual for the next iteration
 *         residual = np.max(np.abs(volumes - target_volumes_)) #np.linalg.norm(volumes - target_volumes_)             # <<<<<<<<<<<<<<
 * 
 *         # Update variables for the next iteration
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_abs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_target_volumes_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_22 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_22)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_22);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_22) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_22, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_residual, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":185
 * 
 *         # Update variables for the next iteration
 *         denominator = np.dot(volumes - previous_volumes, weights - previous_weights)             # <<<<<<<<<<<<<<
 *         # Check for zero division, this is extremely rare but it may happen.
 *         if np.abs(denominator) > 1e-15:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_dot); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_previous_volumes); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_weights, __pyx_v_previous_weights); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_14 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_14 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_1, __pyx_t_4};
      __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_1, __pyx_t_4};
      __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_14, 2+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_22 = PyTuple_New(2+__pyx_t_14); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_22, 0+__pyx_t_14, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_22, 1+__pyx_t_14, __pyx_t_4);
      __pyx_t_1 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_22, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_denominator, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":187
 *         denominator = np.dot(volumes - previous_volumes, weights - previous_weights)
 *         # Check for zero division, this is extremely rare but it may happen.
 *         if np.abs(denominator) > 1e-15:             # <<<<<<<<<<<<<<
 *             alpha = np.sum(np.square(weights - previous_weights)) / denominator
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_abs); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_22))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_22);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_22);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_22, function);
      }
    }
    __pyx_t_5 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_22, __pyx_t_2, __pyx_v_denominator) : __Pyx_PyObject_CallOneArg(__pyx_t_22, __pyx_v_denominator);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_22 = PyObject_RichCompare(__pyx_t_5, __pyx_float_1eneg_15, Py_GT); __Pyx_XGOTREF(__pyx_t_22); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_22); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 187, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":188
 *         # Check for zero division, this is extremely rare but it may happen.
 *         if np.abs(denominator) > 1e-15:
 *             alpha = np.sum(np.square(weights - previous_weights)) / denominator             # <<<<<<<<<<<<<<
 * 
 *         previous_volumes = volumes
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_square); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Subtract(__pyx_v_weights, __pyx_v_previous_weights); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_22 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_22, __pyx_v_denominator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF_SET(__pyx_v_alpha, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":187
 *         denominator = np.dot(volumes - previous_volumes, weights - previous_weights)
 *         # Check for zero division, this is extremely rare but it may happen.
 *         if np.abs(denominator) > 1e-15:             # <<<<<<<<<<<<<<
 *             alpha = np.sum(np.square(weights - previous_weights)) / denominator
 * 
 */
    }

    /* "vorostereology/voroplusplus.pyx":190
 *             alpha = np.sum(np.square(weights - previous_weights)) / denominator
 * 
 *         previous_volumes = volumes             # <<<<<<<<<<<<<<
 *         previous_weights = weights
 * 
 */
    __Pyx_INCREF(__pyx_v_volumes);
    __Pyx_DECREF_SET(__pyx_v_previous_volumes, __pyx_v_volumes);

    /* "vorostereology/voroplusplus.pyx":191
 * 
 *         previous_volumes = volumes
 *         previous_weights = weights             # <<<<<<<<<<<<<<
 * 
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:
 */
    __Pyx_INCREF(__pyx_v_weights);
    __Pyx_DECREF_SET(__pyx_v_previous_weights, __pyx_v_weights);

    /* "vorostereology/voroplusplus.pyx":193
 *         previous_weights = weights
 * 
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:             # <<<<<<<<<<<<<<
 *             print("Minimization iteration: ", minimization_num_iterations)
 *         minimization_num_iterations += 1
 */
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_disp); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
    if (__pyx_t_23) {
    } else {
      __pyx_t_6 = __pyx_t_23;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_minimization_num_iterations); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
    if (__pyx_t_23) {
    } else {
      __pyx_t_6 = __pyx_t_23;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_PyInt_RemainderObjC(__pyx_v_minimization_num_iterations, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_22 = __Pyx_PyInt_EqObjC(__pyx_t_2, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_22); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 193, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __pyx_t_6 = __pyx_t_23;
    __pyx_L13_bool_binop_done:;
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":194
 * 
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:
 *             print("Minimization iteration: ", minimization_num_iterations)             # <<<<<<<<<<<<<<
 *         minimization_num_iterations += 1
 * 
 */
      __pyx_t_22 = PyTuple_New(2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_22);
      __Pyx_INCREF(__pyx_kp_u_Minimization_iteration);
      __Pyx_GIVEREF(__pyx_kp_u_Minimization_iteration);
      PyTuple_SET_ITEM(__pyx_t_22, 0, __pyx_kp_u_Minimization_iteration);
      __Pyx_INCREF(__pyx_v_minimization_num_iterations);
      __Pyx_GIVEREF(__pyx_v_minimization_num_iterations);
      PyTuple_SET_ITEM(__pyx_t_22, 1, __pyx_v_minimization_num_iterations);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_22, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":193
 *         previous_weights = weights
 * 
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:             # <<<<<<<<<<<<<<
 *             print("Minimization iteration: ", minimization_num_iterations)
 *         minimization_num_iterations += 1
 */
    }

    /* "vorostereology/voroplusplus.pyx":195
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:
 *             print("Minimization iteration: ", minimization_num_iterations)
 *         minimization_num_iterations += 1             # <<<<<<<<<<<<<<
 * 
 *     if residual > stopping_criterion:
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_minimization_num_iterations, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF_SET(__pyx_v_minimization_num_iterations, __pyx_t_2);
    __pyx_t_2 = 0;
  }

  /* "vorostereology/voroplusplus.pyx":197
 *         minimization_num_iterations += 1
 * 
 *     if residual > stopping_criterion:             # <<<<<<<<<<<<<<
 *         return weights, False
 *     elif disp:
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_residual, __pyx_v_stopping_criterion, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "vorostereology/voroplusplus.pyx":198
 * 
 *     if residual > stopping_criterion:
 *         return weights, False             # <<<<<<<<<<<<<<
 *     elif disp:
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_weights);
    __Pyx_GIVEREF(__pyx_v_weights);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_weights);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyTuple_SET_ITEM(__pyx_t_2, 1, Py_False);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "vorostereology/voroplusplus.pyx":197
 *         minimization_num_iterations += 1
 * 
 *     if residual > stopping_criterion:             # <<<<<<<<<<<<<<
 *         return weights, False
 *     elif disp:
 */
  }

  /* "vorostereology/voroplusplus.pyx":199
 *     if residual > stopping_criterion:
 *         return weights, False
 *     elif disp:             # <<<<<<<<<<<<<<
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_disp); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 199, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "vorostereology/voroplusplus.pyx":200
 *         return weights, False
 *     elif disp:
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))             # <<<<<<<<<<<<<<
 * 
 *     return weights, True
 */
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_minimization_num_iterations); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_22 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Minimization_number_of_iteration, __pyx_t_2); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_22);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_22); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 200, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "vorostereology/voroplusplus.pyx":199
 *     if residual > stopping_criterion:
 *         return weights, False
 *     elif disp:             # <<<<<<<<<<<<<<
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":202
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))
 * 
 *     return weights, True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_weights);
  __Pyx_GIVEREF(__pyx_v_weights);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_weights);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_2, 1, Py_True);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":118
 * 
 * 
 * def BB_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("vorostereology.voroplusplus.BB_solver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_L1);
  __Pyx_XDECREF(__pyx_v_L2);
  __Pyx_XDECREF(__pyx_v_L3);
  __Pyx_XDECREF(__pyx_v_weights);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_diameter);
  __Pyx_XDECREF(__pyx_v_min_weight);
  __Pyx_XDECREF(__pyx_v_volumes);
  __Pyx_XDECREF(__pyx_v_previous_volumes);
  __Pyx_XDECREF(__pyx_v_target_volumes_);
  __Pyx_XDECREF(__pyx_v_residual);
  __Pyx_XDECREF(__pyx_v_stopping_criterion);
  __Pyx_XDECREF(__pyx_v_previous_weights);
  __Pyx_XDECREF(__pyx_v_minimization_num_iterations);
  __Pyx_XDECREF(__pyx_v_alpha);
  __Pyx_XDECREF(__pyx_v_denominator);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":205
 * 
 * 
 * def MM_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_9MM_solver(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14vorostereology_12voroplusplus_8MM_solver[] = "\n    For now this function is not fully documented, most arguments are inherited from \"compute_centroidal_laguerre\".\n        This function finds the right weights to obtain a Laguerre diagram with a desired volume distribution by\n        minimizing a convex function using the Malitsky-Mishchenko method.\n    :param weights_init:\n    :param points:\n    :param target_volumes:\n    :param domain:\n    :param block_size:\n    :param periodicity:\n    :param permute:\n    :param max_iter:\n    :param tol:\n    :param disp:\n    :return:\n    ";
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_9MM_solver = {"MM_solver", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_9MM_solver, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14vorostereology_12voroplusplus_8MM_solver};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_9MM_solver(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_weights_init = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_target_volumes = 0;
  PyObject *__pyx_v_domain = 0;
  CYTHON_UNUSED PyObject *__pyx_v_block_size = 0;
  PyObject *__pyx_v_periodicity = 0;
  PyObject *__pyx_v_permute = 0;
  PyObject *__pyx_v_max_iter = 0;
  PyObject *__pyx_v_tol = 0;
  PyObject *__pyx_v_disp = 0;
  PyObject *__pyx_v_num_cpus = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("MM_solver (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_weights_init,&__pyx_n_s_points,&__pyx_n_s_target_volumes,&__pyx_n_s_domain,&__pyx_n_s_block_size,&__pyx_n_s_periodicity,&__pyx_n_s_permute,&__pyx_n_s_max_iter,&__pyx_n_s_tol,&__pyx_n_s_disp,&__pyx_n_s_num_cpus,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    values[6] = ((PyObject *)Py_False);
    values[7] = ((PyObject *)__pyx_int_10000);
    values[8] = ((PyObject *)__pyx_float_0_01);

    /* "vorostereology/voroplusplus.pyx":206
 * 
 * def MM_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):             # <<<<<<<<<<<<<<
 *     """
 *     For now this function is not fully documented, most arguments are inherited from "compute_centroidal_laguerre".
 */
    values[9] = ((PyObject *)Py_False);
    values[10] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights_init)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("MM_solver", 0, 6, 11, 1); __PYX_ERR(0, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_volumes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("MM_solver", 0, 6, 11, 2); __PYX_ERR(0, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("MM_solver", 0, 6, 11, 3); __PYX_ERR(0, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_block_size)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("MM_solver", 0, 6, 11, 4); __PYX_ERR(0, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodicity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("MM_solver", 0, 6, 11, 5); __PYX_ERR(0, 205, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_permute);
          if (value) { values[6] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_iter);
          if (value) { values[7] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol);
          if (value) { values[8] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_disp);
          if (value) { values[9] = value; kw_args--; }
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_cpus);
          if (value) { values[10] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "MM_solver") < 0)) __PYX_ERR(0, 205, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_weights_init = values[0];
    __pyx_v_points = values[1];
    __pyx_v_target_volumes = values[2];
    __pyx_v_domain = values[3];
    __pyx_v_block_size = values[4];
    __pyx_v_periodicity = values[5];
    __pyx_v_permute = values[6];
    __pyx_v_max_iter = values[7];
    __pyx_v_tol = values[8];
    __pyx_v_disp = values[9];
    __pyx_v_num_cpus = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("MM_solver", 0, 6, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 205, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.MM_solver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_8MM_solver(__pyx_self, __pyx_v_weights_init, __pyx_v_points, __pyx_v_target_volumes, __pyx_v_domain, __pyx_v_block_size, __pyx_v_periodicity, __pyx_v_permute, __pyx_v_max_iter, __pyx_v_tol, __pyx_v_disp, __pyx_v_num_cpus);

  /* "vorostereology/voroplusplus.pyx":205
 * 
 * 
 * def MM_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_8MM_solver(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_weights_init, PyObject *__pyx_v_points, PyObject *__pyx_v_target_volumes, PyObject *__pyx_v_domain, CYTHON_UNUSED PyObject *__pyx_v_block_size, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_permute, PyObject *__pyx_v_max_iter, PyObject *__pyx_v_tol, PyObject *__pyx_v_disp, PyObject *__pyx_v_num_cpus) {
  PyObject *__pyx_v_L1 = NULL;
  PyObject *__pyx_v_L2 = NULL;
  PyObject *__pyx_v_L3 = NULL;
  PyObject *__pyx_v_weights = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_diameter = NULL;
  PyObject *__pyx_v_min_weight = NULL;
  PyObject *__pyx_v_volumes = NULL;
  PyObject *__pyx_v_previous_volumes = NULL;
  PyObject *__pyx_v_target_volumes_ = NULL;
  PyObject *__pyx_v_residual = NULL;
  PyObject *__pyx_v_stopping_criterion = NULL;
  PyObject *__pyx_v_previous_weights = NULL;
  PyObject *__pyx_v_minimization_num_iterations = NULL;
  PyObject *__pyx_v_theta = NULL;
  PyObject *__pyx_v_alpha = NULL;
  PyObject *__pyx_v_new_alpha = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::vector<double>  __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  std::vector<double>  __pyx_t_18;
  std::vector<double>  __pyx_t_19;
  std::vector<double>  __pyx_t_20;
  int __pyx_t_21;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_t_23;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("MM_solver", 0);

  /* "vorostereology/voroplusplus.pyx":223
 *     :return:
 *     """
 *     L1 = domain[0][1] - domain[0][0]             # <<<<<<<<<<<<<<
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_L1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":224
 *     """
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]             # <<<<<<<<<<<<<<
 *     L3 = domain[2][1] - domain[2][0]
 *     weights = weights_init
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_L2 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":225
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]             # <<<<<<<<<<<<<<
 *     weights = weights_init
 *     n = weights.shape[0]
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_L3 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":226
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]
 *     weights = weights_init             # <<<<<<<<<<<<<<
 *     n = weights.shape[0]
 *     diameter = np.sqrt(L1*L1 + L2*L2 + L3*L3)
 */
  __Pyx_INCREF(__pyx_v_weights_init);
  __pyx_v_weights = __pyx_v_weights_init;

  /* "vorostereology/voroplusplus.pyx":227
 *     L3 = domain[2][1] - domain[2][0]
 *     weights = weights_init
 *     n = weights.shape[0]             # <<<<<<<<<<<<<<
 *     diameter = np.sqrt(L1*L1 + L2*L2 + L3*L3)
 *     # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_weights, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":228
 *     weights = weights_init
 *     n = weights.shape[0]
 *     diameter = np.sqrt(L1*L1 + L2*L2 + L3*L3)             # <<<<<<<<<<<<<<
 *     # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 *     # the Laguerre diagram.
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_L1, __pyx_v_L1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_L2, __pyx_v_L2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_L3, __pyx_v_L3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = PyNumber_Add(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_diameter = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":231
 *     # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 *     # the Laguerre diagram.
 *     min_weight = np.min(weights)             # <<<<<<<<<<<<<<
 *     if min_weight <= 0:
 *         weights = weights - min_weight  + diameter
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_min); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_weights) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_weights);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_min_weight = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":232
 *     # the Laguerre diagram.
 *     min_weight = np.min(weights)
 *     if min_weight <= 0:             # <<<<<<<<<<<<<<
 *         weights = weights - min_weight  + diameter
 *     volumes = np.array(compute_volumes(weights,
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_min_weight, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 232, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 232, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_6) {

    /* "vorostereology/voroplusplus.pyx":233
 *     min_weight = np.min(weights)
 *     if min_weight <= 0:
 *         weights = weights - min_weight  + diameter             # <<<<<<<<<<<<<<
 *     volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 */
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_weights, __pyx_v_min_weight); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_v_diameter); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":232
 *     # the Laguerre diagram.
 *     min_weight = np.min(weights)
 *     if min_weight <= 0:             # <<<<<<<<<<<<<<
 *         weights = weights - min_weight  + diameter
 *     volumes = np.array(compute_volumes(weights,
 */
  }

  /* "vorostereology/voroplusplus.pyx":234
 *     if min_weight <= 0:
 *         weights = weights - min_weight  + diameter
 *     volumes = np.array(compute_volumes(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __pyx_convert_vector_from_py_double(__pyx_v_weights); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 234, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":235
 *         weights = weights - min_weight  + diameter
 *     volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],             # <<<<<<<<<<<<<<
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 *     previous_volumes = volumes
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_4, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":236
 *     volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))             # <<<<<<<<<<<<<<
 *     previous_volumes = volumes
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_18 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_19 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_20 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_v_num_cpus); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 236, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":234
 *     if min_weight <= 0:
 *         weights = weights - min_weight  + diameter
 *     volumes = np.array(compute_volumes(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 */
  __pyx_t_3 = __pyx_convert_vector_to_py_double(compute_volumes(__pyx_t_7, ((double)__pyx_t_8), ((double)__pyx_t_9), ((double)__pyx_t_10), ((double)__pyx_t_11), ((double)__pyx_t_12), ((double)__pyx_t_13), ((int)__pyx_t_14), ((int)__pyx_t_15), ((int)__pyx_t_16), __pyx_t_17, __pyx_t_18, __pyx_t_19, __pyx_t_20, ((int)__pyx_t_21))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_volumes = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":237
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 *     previous_volumes = volumes             # <<<<<<<<<<<<<<
 * 
 *     # Optional, permutation step might speed up the algorithm in some cases
 */
  __Pyx_INCREF(__pyx_v_volumes);
  __pyx_v_previous_volumes = __pyx_v_volumes;

  /* "vorostereology/voroplusplus.pyx":240
 * 
 *     # Optional, permutation step might speed up the algorithm in some cases
 *     if permute:             # <<<<<<<<<<<<<<
 *         target_volumes_ = function_definitions.permute_targets(volumes, target_volumes, volumes.shape[0])
 *     else:
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_permute); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 240, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "vorostereology/voroplusplus.pyx":241
 *     # Optional, permutation step might speed up the algorithm in some cases
 *     if permute:
 *         target_volumes_ = function_definitions.permute_targets(volumes, target_volumes, volumes.shape[0])             # <<<<<<<<<<<<<<
 *     else:
 *         target_volumes_ = target_volumes
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_function_definitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_permute_targets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_volumes, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_21 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_21 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_volumes, __pyx_v_target_volumes, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_21, 3+__pyx_t_21); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
      PyObject *__pyx_temp[4] = {__pyx_t_2, __pyx_v_volumes, __pyx_v_target_volumes, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_21, 3+__pyx_t_21); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_5 = PyTuple_New(3+__pyx_t_21); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_INCREF(__pyx_v_volumes);
      __Pyx_GIVEREF(__pyx_v_volumes);
      PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_21, __pyx_v_volumes);
      __Pyx_INCREF(__pyx_v_target_volumes);
      __Pyx_GIVEREF(__pyx_v_target_volumes);
      PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_21, __pyx_v_target_volumes);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 2+__pyx_t_21, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_target_volumes_ = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":240
 * 
 *     # Optional, permutation step might speed up the algorithm in some cases
 *     if permute:             # <<<<<<<<<<<<<<
 *         target_volumes_ = function_definitions.permute_targets(volumes, target_volumes, volumes.shape[0])
 *     else:
 */
    goto __pyx_L4;
  }

  /* "vorostereology/voroplusplus.pyx":243
 *         target_volumes_ = function_definitions.permute_targets(volumes, target_volumes, volumes.shape[0])
 *     else:
 *         target_volumes_ = target_volumes             # <<<<<<<<<<<<<<
 * 
 *     residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_target_volumes);
    __pyx_v_target_volumes_ = __pyx_v_target_volumes;
  }
  __pyx_L4:;

  /* "vorostereology/voroplusplus.pyx":245
 *         target_volumes_ = target_volumes
 * 
 *     residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)             # <<<<<<<<<<<<<<
 *     stopping_criterion = np.min(target_volumes) * tol
 *     previous_weights = weights
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_max); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_abs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_target_volumes_); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_22 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_22)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_22);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_22) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_22, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_residual = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":246
 * 
 *     residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)
 *     stopping_criterion = np.min(target_volumes) * tol             # <<<<<<<<<<<<<<
 *     previous_weights = weights
 *     minimization_num_iterations = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_min); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_v_target_volumes) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_target_volumes);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_tol); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_stopping_criterion = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":247
 *     residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)
 *     stopping_criterion = np.min(target_volumes) * tol
 *     previous_weights = weights             # <<<<<<<<<<<<<<
 *     minimization_num_iterations = 0
 *     theta = 0
 */
  __Pyx_INCREF(__pyx_v_weights);
  __pyx_v_previous_weights = __pyx_v_weights;

  /* "vorostereology/voroplusplus.pyx":248
 *     stopping_criterion = np.min(target_volumes) * tol
 *     previous_weights = weights
 *     minimization_num_iterations = 0             # <<<<<<<<<<<<<<
 *     theta = 0
 *     alpha = 0.1 / np.cbrt(L1*L2*L3)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_minimization_num_iterations = __pyx_int_0;

  /* "vorostereology/voroplusplus.pyx":249
 *     previous_weights = weights
 *     minimization_num_iterations = 0
 *     theta = 0             # <<<<<<<<<<<<<<
 *     alpha = 0.1 / np.cbrt(L1*L2*L3)
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_theta = __pyx_int_0;

  /* "vorostereology/voroplusplus.pyx":250
 *     minimization_num_iterations = 0
 *     theta = 0
 *     alpha = 0.1 / np.cbrt(L1*L2*L3)             # <<<<<<<<<<<<<<
 * 
 *     while residual > stopping_criterion and minimization_num_iterations < max_iter:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_cbrt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_L1, __pyx_v_L2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_L3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyFloat_TrueDivideCObj(__pyx_float_0_1, __pyx_t_3, 0.1, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_alpha = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "vorostereology/voroplusplus.pyx":252
 *     alpha = 0.1 / np.cbrt(L1*L2*L3)
 * 
 *     while residual > stopping_criterion and minimization_num_iterations < max_iter:             # <<<<<<<<<<<<<<
 *         # Update weights and calculate volumes of the tessellation with these new weights
 *         weights = previous_weights - alpha * (volumes - target_volumes_)
 */
  while (1) {
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_residual, __pyx_v_stopping_criterion, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 252, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_23) {
    } else {
      __pyx_t_6 = __pyx_t_23;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_minimization_num_iterations, __pyx_v_max_iter, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 252, __pyx_L1_error)
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 252, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __pyx_t_23;
    __pyx_L7_bool_binop_done:;
    if (!__pyx_t_6) break;

    /* "vorostereology/voroplusplus.pyx":254
 *     while residual > stopping_criterion and minimization_num_iterations < max_iter:
 *         # Update weights and calculate volumes of the tessellation with these new weights
 *         weights = previous_weights - alpha * (volumes - target_volumes_)             # <<<<<<<<<<<<<<
 *         # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 *         # the Laguerre diagram.
 */
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_target_volumes_); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_alpha, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_previous_weights, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":257
 *         # we cannot take the square root of negative weights, but adding a constant to all weights does not change
 *         # the Laguerre diagram.
 *         min_weight = np.min(weights)             # <<<<<<<<<<<<<<
 *         if min_weight <= 0:
 *             weights = weights - min_weight  + diameter
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_min); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_weights) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_weights);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_min_weight, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":258
 *         # the Laguerre diagram.
 *         min_weight = np.min(weights)
 *         if min_weight <= 0:             # <<<<<<<<<<<<<<
 *             weights = weights - min_weight  + diameter
 *             previous_weights = previous_weights - min_weight + diameter
 */
    __pyx_t_5 = PyObject_RichCompare(__pyx_v_min_weight, __pyx_int_0, Py_LE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 258, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":259
 *         min_weight = np.min(weights)
 *         if min_weight <= 0:
 *             weights = weights - min_weight  + diameter             # <<<<<<<<<<<<<<
 *             previous_weights = previous_weights - min_weight + diameter
 *         volumes = np.array(compute_volumes(weights,
 */
      __pyx_t_5 = PyNumber_Subtract(__pyx_v_weights, __pyx_v_min_weight); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_2 = PyNumber_Add(__pyx_t_5, __pyx_v_diameter); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":260
 *         if min_weight <= 0:
 *             weights = weights - min_weight  + diameter
 *             previous_weights = previous_weights - min_weight + diameter             # <<<<<<<<<<<<<<
 *         volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 */
      __pyx_t_2 = PyNumber_Subtract(__pyx_v_previous_weights, __pyx_v_min_weight); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = PyNumber_Add(__pyx_t_2, __pyx_v_diameter); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 260, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_previous_weights, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "vorostereology/voroplusplus.pyx":258
 *         # the Laguerre diagram.
 *         min_weight = np.min(weights)
 *         if min_weight <= 0:             # <<<<<<<<<<<<<<
 *             weights = weights - min_weight  + diameter
 *             previous_weights = previous_weights - min_weight + diameter
 */
    }

    /* "vorostereology/voroplusplus.pyx":261
 *             weights = weights - min_weight  + diameter
 *             previous_weights = previous_weights - min_weight + diameter
 *         volumes = np.array(compute_volumes(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_20 = __pyx_convert_vector_from_py_double(__pyx_v_weights); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 261, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":262
 *             previous_weights = previous_weights - min_weight + diameter
 *         volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],             # <<<<<<<<<<<<<<
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 * 
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 262, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "vorostereology/voroplusplus.pyx":263
 *         volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))             # <<<<<<<<<<<<<<
 * 
 *         # Optional, permutation step might speed up the algorithm in some cases
 */
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_periodicity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_periodicity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_periodicity, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_19 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_18 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__17); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = __pyx_convert_vector_from_py_double(__pyx_t_2); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_v_num_cpus); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 263, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":261
 *             weights = weights - min_weight  + diameter
 *             previous_weights = previous_weights - min_weight + diameter
 *         volumes = np.array(compute_volumes(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))
 */
    __pyx_t_2 = __pyx_convert_vector_to_py_double(compute_volumes(__pyx_t_20, ((double)__pyx_t_13), ((double)__pyx_t_12), ((double)__pyx_t_11), ((double)__pyx_t_10), ((double)__pyx_t_9), ((double)__pyx_t_8), ((int)__pyx_t_21), ((int)__pyx_t_17), ((int)__pyx_t_16), __pyx_t_15, __pyx_t_19, __pyx_t_18, __pyx_t_7, ((int)__pyx_t_14))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_5 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_volumes, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":266
 * 
 *         # Optional, permutation step might speed up the algorithm in some cases
 *         if permute:             # <<<<<<<<<<<<<<
 *             target_volumes_ = function_definitions.permute_targets(volumes, target_volumes_, n)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_permute); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 266, __pyx_L1_error)
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":267
 *         # Optional, permutation step might speed up the algorithm in some cases
 *         if permute:
 *             target_volumes_ = function_definitions.permute_targets(volumes, target_volumes_, n)             # <<<<<<<<<<<<<<
 * 
 *         # Update residual for the next iteration
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_function_definitions); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_permute_targets); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 267, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_14 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_14 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_volumes, __pyx_v_target_volumes_, __pyx_v_n};
        __pyx_t_5 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[4] = {__pyx_t_3, __pyx_v_volumes, __pyx_v_target_volumes_, __pyx_v_n};
        __pyx_t_5 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_14, 3+__pyx_t_14); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_GOTREF(__pyx_t_5);
      } else
      #endif
      {
        __pyx_t_1 = PyTuple_New(3+__pyx_t_14); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        if (__pyx_t_3) {
          __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3); __pyx_t_3 = NULL;
        }
        __Pyx_INCREF(__pyx_v_volumes);
        __Pyx_GIVEREF(__pyx_v_volumes);
        PyTuple_SET_ITEM(__pyx_t_1, 0+__pyx_t_14, __pyx_v_volumes);
        __Pyx_INCREF(__pyx_v_target_volumes_);
        __Pyx_GIVEREF(__pyx_v_target_volumes_);
        PyTuple_SET_ITEM(__pyx_t_1, 1+__pyx_t_14, __pyx_v_target_volumes_);
        __Pyx_INCREF(__pyx_v_n);
        __Pyx_GIVEREF(__pyx_v_n);
        PyTuple_SET_ITEM(__pyx_t_1, 2+__pyx_t_14, __pyx_v_n);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 267, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_target_volumes_, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "vorostereology/voroplusplus.pyx":266
 * 
 *         # Optional, permutation step might speed up the algorithm in some cases
 *         if permute:             # <<<<<<<<<<<<<<
 *             target_volumes_ = function_definitions.permute_targets(volumes, target_volumes_, n)
 * 
 */
    }

    /* "vorostereology/voroplusplus.pyx":270
 * 
 *         # Update residual for the next iteration
 *         residual = np.max(np.abs(volumes - target_volumes_)) # np.linalg.norm(volumes - target_volumes_)             # <<<<<<<<<<<<<<
 * 
 *         # Update variables for the next iteration
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_abs); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_target_volumes_); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_22 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_22)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_22);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_2 = (__pyx_t_22) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_22, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
      }
    }
    __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 270, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_residual, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "vorostereology/voroplusplus.pyx":273
 * 
 *         # Update variables for the next iteration
 *         if minimization_num_iterations == 0:             # <<<<<<<<<<<<<<
 *             new_alpha = 0.5 * np.linalg.norm(weights - previous_weights) / np.linalg.norm(volumes - previous_volumes)
 *             theta = new_alpha / alpha
 */
    __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_minimization_num_iterations, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 273, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":274
 *         # Update variables for the next iteration
 *         if minimization_num_iterations == 0:
 *             new_alpha = 0.5 * np.linalg.norm(weights - previous_weights) / np.linalg.norm(volumes - previous_volumes)             # <<<<<<<<<<<<<<
 *             theta = new_alpha / alpha
 *             alpha = new_alpha
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_norm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Subtract(__pyx_v_weights, __pyx_v_previous_weights); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_5 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_linalg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_norm); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_previous_volumes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_5 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 274, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_new_alpha, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":275
 *         if minimization_num_iterations == 0:
 *             new_alpha = 0.5 * np.linalg.norm(weights - previous_weights) / np.linalg.norm(volumes - previous_volumes)
 *             theta = new_alpha / alpha             # <<<<<<<<<<<<<<
 *             alpha = new_alpha
 *         else:
 */
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_new_alpha, __pyx_v_alpha); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 275, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF_SET(__pyx_v_theta, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":276
 *             new_alpha = 0.5 * np.linalg.norm(weights - previous_weights) / np.linalg.norm(volumes - previous_volumes)
 *             theta = new_alpha / alpha
 *             alpha = new_alpha             # <<<<<<<<<<<<<<
 *         else:
 *             new_alpha = min(sqrt(1 + theta) * alpha, 0.5 * np.linalg.norm(weights - previous_weights) /
 */
      __Pyx_INCREF(__pyx_v_new_alpha);
      __Pyx_DECREF_SET(__pyx_v_alpha, __pyx_v_new_alpha);

      /* "vorostereology/voroplusplus.pyx":273
 * 
 *         # Update variables for the next iteration
 *         if minimization_num_iterations == 0:             # <<<<<<<<<<<<<<
 *             new_alpha = 0.5 * np.linalg.norm(weights - previous_weights) / np.linalg.norm(volumes - previous_volumes)
 *             theta = new_alpha / alpha
 */
      goto __pyx_L11;
    }

    /* "vorostereology/voroplusplus.pyx":278
 *             alpha = new_alpha
 *         else:
 *             new_alpha = min(sqrt(1 + theta) * alpha, 0.5 * np.linalg.norm(weights - previous_weights) /             # <<<<<<<<<<<<<<
 *                          np.linalg.norm(volumes - previous_volumes))
 *             theta = new_alpha / alpha
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_linalg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_norm); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_weights, __pyx_v_previous_weights); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_1);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Multiply(__pyx_float_0_5, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":279
 *         else:
 *             new_alpha = min(sqrt(1 + theta) * alpha, 0.5 * np.linalg.norm(weights - previous_weights) /
 *                          np.linalg.norm(volumes - previous_volumes))             # <<<<<<<<<<<<<<
 *             theta = new_alpha / alpha
 *             alpha = new_alpha
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_linalg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_norm); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Subtract(__pyx_v_volumes, __pyx_v_previous_volumes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vorostereology/voroplusplus.pyx":278
 *             alpha = new_alpha
 *         else:
 *             new_alpha = min(sqrt(1 + theta) * alpha, 0.5 * np.linalg.norm(weights - previous_weights) /             # <<<<<<<<<<<<<<
 *                          np.linalg.norm(volumes - previous_volumes))
 *             theta = new_alpha / alpha
 */
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_theta, 1, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_3, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_2, __pyx_v_alpha); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 278, __pyx_L1_error)
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_2 = __pyx_t_1;
      } else {
        __Pyx_INCREF(__pyx_t_5);
        __pyx_t_2 = __pyx_t_5;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __pyx_t_2;
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_new_alpha, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "vorostereology/voroplusplus.pyx":280
 *             new_alpha = min(sqrt(1 + theta) * alpha, 0.5 * np.linalg.norm(weights - previous_weights) /
 *                          np.linalg.norm(volumes - previous_volumes))
 *             theta = new_alpha / alpha             # <<<<<<<<<<<<<<
 *             alpha = new_alpha
 * 
 */
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_new_alpha, __pyx_v_alpha); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_theta, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "vorostereology/voroplusplus.pyx":281
 *                          np.linalg.norm(volumes - previous_volumes))
 *             theta = new_alpha / alpha
 *             alpha = new_alpha             # <<<<<<<<<<<<<<
 * 
 *         previous_volumes = volumes
 */
      __Pyx_INCREF(__pyx_v_new_alpha);
      __Pyx_DECREF_SET(__pyx_v_alpha, __pyx_v_new_alpha);
    }
    __pyx_L11:;

    /* "vorostereology/voroplusplus.pyx":283
 *             alpha = new_alpha
 * 
 *         previous_volumes = volumes             # <<<<<<<<<<<<<<
 *         previous_weights = weights
 * 
 */
    __Pyx_INCREF(__pyx_v_volumes);
    __Pyx_DECREF_SET(__pyx_v_previous_volumes, __pyx_v_volumes);

    /* "vorostereology/voroplusplus.pyx":284
 * 
 *         previous_volumes = volumes
 *         previous_weights = weights             # <<<<<<<<<<<<<<
 * 
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:
 */
    __Pyx_INCREF(__pyx_v_weights);
    __Pyx_DECREF_SET(__pyx_v_previous_weights, __pyx_v_weights);

    /* "vorostereology/voroplusplus.pyx":286
 *         previous_weights = weights
 * 
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:             # <<<<<<<<<<<<<<
 *             print("Minimization iteration: ", minimization_num_iterations)
 *         minimization_num_iterations += 1
 */
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_disp); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
    if (__pyx_t_23) {
    } else {
      __pyx_t_6 = __pyx_t_23;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_v_minimization_num_iterations); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
    if (__pyx_t_23) {
    } else {
      __pyx_t_6 = __pyx_t_23;
      goto __pyx_L13_bool_binop_done;
    }
    __pyx_t_1 = __Pyx_PyInt_RemainderObjC(__pyx_v_minimization_num_iterations, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyInt_EqObjC(__pyx_t_1, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_23 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_23 < 0)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_23;
    __pyx_L13_bool_binop_done:;
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":287
 * 
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:
 *             print("Minimization iteration: ", minimization_num_iterations)             # <<<<<<<<<<<<<<
 *         minimization_num_iterations += 1
 * 
 */
      __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_kp_u_Minimization_iteration);
      __Pyx_GIVEREF(__pyx_kp_u_Minimization_iteration);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Minimization_iteration);
      __Pyx_INCREF(__pyx_v_minimization_num_iterations);
      __Pyx_GIVEREF(__pyx_v_minimization_num_iterations);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_minimization_num_iterations);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vorostereology/voroplusplus.pyx":286
 *         previous_weights = weights
 * 
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:             # <<<<<<<<<<<<<<
 *             print("Minimization iteration: ", minimization_num_iterations)
 *         minimization_num_iterations += 1
 */
    }

    /* "vorostereology/voroplusplus.pyx":288
 *         if disp and minimization_num_iterations and minimization_num_iterations % 100 == 0:
 *             print("Minimization iteration: ", minimization_num_iterations)
 *         minimization_num_iterations += 1             # <<<<<<<<<<<<<<
 * 
 *     if residual > stopping_criterion:
 */
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_minimization_num_iterations, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_minimization_num_iterations, __pyx_t_1);
    __pyx_t_1 = 0;
  }

  /* "vorostereology/voroplusplus.pyx":290
 *         minimization_num_iterations += 1
 * 
 *     if residual > stopping_criterion:             # <<<<<<<<<<<<<<
 *         return weights, False
 *     elif disp:
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_residual, __pyx_v_stopping_criterion, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 290, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_6) {

    /* "vorostereology/voroplusplus.pyx":291
 * 
 *     if residual > stopping_criterion:
 *         return weights, False             # <<<<<<<<<<<<<<
 *     elif disp:
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_weights);
    __Pyx_GIVEREF(__pyx_v_weights);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_weights);
    __Pyx_INCREF(Py_False);
    __Pyx_GIVEREF(Py_False);
    PyTuple_SET_ITEM(__pyx_t_1, 1, Py_False);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "vorostereology/voroplusplus.pyx":290
 *         minimization_num_iterations += 1
 * 
 *     if residual > stopping_criterion:             # <<<<<<<<<<<<<<
 *         return weights, False
 *     elif disp:
 */
  }

  /* "vorostereology/voroplusplus.pyx":292
 *     if residual > stopping_criterion:
 *         return weights, False
 *     elif disp:             # <<<<<<<<<<<<<<
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))
 * 
 */
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_disp); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 292, __pyx_L1_error)
  if (__pyx_t_6) {

    /* "vorostereology/voroplusplus.pyx":293
 *         return weights, False
 *     elif disp:
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))             # <<<<<<<<<<<<<<
 * 
 *     return weights, True
 */
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyUnicode_Type)), __pyx_v_minimization_num_iterations); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Minimization_number_of_iteration, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_print, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":292
 *     if residual > stopping_criterion:
 *         return weights, False
 *     elif disp:             # <<<<<<<<<<<<<<
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":295
 *         print("Minimization number of iterations: " + str(minimization_num_iterations))
 * 
 *     return weights, True             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_weights);
  __Pyx_GIVEREF(__pyx_v_weights);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_weights);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_1, 1, Py_True);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":205
 * 
 * 
 * def MM_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("vorostereology.voroplusplus.MM_solver", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_L1);
  __Pyx_XDECREF(__pyx_v_L2);
  __Pyx_XDECREF(__pyx_v_L3);
  __Pyx_XDECREF(__pyx_v_weights);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_diameter);
  __Pyx_XDECREF(__pyx_v_min_weight);
  __Pyx_XDECREF(__pyx_v_volumes);
  __Pyx_XDECREF(__pyx_v_previous_volumes);
  __Pyx_XDECREF(__pyx_v_target_volumes_);
  __Pyx_XDECREF(__pyx_v_residual);
  __Pyx_XDECREF(__pyx_v_stopping_criterion);
  __Pyx_XDECREF(__pyx_v_previous_weights);
  __Pyx_XDECREF(__pyx_v_minimization_num_iterations);
  __Pyx_XDECREF(__pyx_v_theta);
  __Pyx_XDECREF(__pyx_v_alpha);
  __Pyx_XDECREF(__pyx_v_new_alpha);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":299
 * 
 * 
 * def compute_centroidal_laguerre(weights_init, points_init, target_volumes, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds, num_cpus):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_11compute_centroidal_laguerre(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_11compute_centroidal_laguerre = {"compute_centroidal_laguerre", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_11compute_centroidal_laguerre, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_11compute_centroidal_laguerre(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_weights_init = 0;
  PyObject *__pyx_v_points_init = 0;
  PyObject *__pyx_v_target_volumes = 0;
  PyObject *__pyx_v_domain = 0;
  PyObject *__pyx_v_periodicity = 0;
  PyObject *__pyx_v_permute = 0;
  PyObject *__pyx_v_max_iterations = 0;
  PyObject *__pyx_v_gradient_max_iterations = 0;
  PyObject *__pyx_v_tol = 0;
  PyObject *__pyx_v_gradient_tol = 0;
  PyObject *__pyx_v_disp = 0;
  PyObject *__pyx_v_fix_num_iterations = 0;
  PyObject *__pyx_v_solver = 0;
  PyObject *__pyx_v_respect_bounds = 0;
  PyObject *__pyx_v_num_cpus = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_centroidal_laguerre (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_weights_init,&__pyx_n_s_points_init,&__pyx_n_s_target_volumes,&__pyx_n_s_domain,&__pyx_n_s_periodicity,&__pyx_n_s_permute,&__pyx_n_s_max_iterations,&__pyx_n_s_gradient_max_iterations,&__pyx_n_s_tol,&__pyx_n_s_gradient_tol,&__pyx_n_s_disp,&__pyx_n_s_fix_num_iterations,&__pyx_n_s_solver,&__pyx_n_s_respect_bounds,&__pyx_n_s_num_cpus,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights_init)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points_init)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 1); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_volumes)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 2); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 3); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodicity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 4); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_permute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 5); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_iterations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 6); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradient_max_iterations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 7); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 8); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradient_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 9); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_disp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 10); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fix_num_iterations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 11); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_solver)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 12); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_respect_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 13); __PYX_ERR(0, 299, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_cpus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, 14); __PYX_ERR(0, 299, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_centroidal_laguerre") < 0)) __PYX_ERR(0, 299, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_weights_init = values[0];
    __pyx_v_points_init = values[1];
    __pyx_v_target_volumes = values[2];
    __pyx_v_domain = values[3];
    __pyx_v_periodicity = values[4];
    __pyx_v_permute = values[5];
    __pyx_v_max_iterations = values[6];
    __pyx_v_gradient_max_iterations = values[7];
    __pyx_v_tol = values[8];
    __pyx_v_gradient_tol = values[9];
    __pyx_v_disp = values[10];
    __pyx_v_fix_num_iterations = values[11];
    __pyx_v_solver = values[12];
    __pyx_v_respect_bounds = values[13];
    __pyx_v_num_cpus = values[14];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 299, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_centroidal_laguerre", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_10compute_centroidal_laguerre(__pyx_self, __pyx_v_weights_init, __pyx_v_points_init, __pyx_v_target_volumes, __pyx_v_domain, __pyx_v_periodicity, __pyx_v_permute, __pyx_v_max_iterations, __pyx_v_gradient_max_iterations, __pyx_v_tol, __pyx_v_gradient_tol, __pyx_v_disp, __pyx_v_fix_num_iterations, __pyx_v_solver, __pyx_v_respect_bounds, __pyx_v_num_cpus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_10compute_centroidal_laguerre(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_weights_init, PyObject *__pyx_v_points_init, PyObject *__pyx_v_target_volumes, PyObject *__pyx_v_domain, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_permute, PyObject *__pyx_v_max_iterations, PyObject *__pyx_v_gradient_max_iterations, PyObject *__pyx_v_tol, PyObject *__pyx_v_gradient_tol, PyObject *__pyx_v_disp, PyObject *__pyx_v_fix_num_iterations, PyObject *__pyx_v_solver, PyObject *__pyx_v_respect_bounds, PyObject *__pyx_v_num_cpus) {
  PyObject *__pyx_v_n = NULL;
  std::pair<std::vector<double> ,std::vector<double> >  __pyx_v_volumes_centroids;
  PyObject *__pyx_v_weights = NULL;
  PyObject *__pyx_v_points = NULL;
  PyObject *__pyx_v_previous_points = NULL;
  PyObject *__pyx_v_L1 = NULL;
  PyObject *__pyx_v_L2 = NULL;
  PyObject *__pyx_v_L3 = NULL;
  PyObject *__pyx_v_Lengths = NULL;
  PyObject *__pyx_v_volume = NULL;
  PyObject *__pyx_v_block_size = NULL;
  PyObject *__pyx_v_max_side = NULL;
  PyObject *__pyx_v_volumes = NULL;
  PyObject *__pyx_v_num_iterations = NULL;
  PyObject *__pyx_v_stopping_criterion = NULL;
  PyObject *__pyx_v_residual = NULL;
  PyObject *__pyx_v_gradient_convergence = NULL;
  PyObject *__pyx_v_centroids = NULL;
  PyObject *__pyx_v_target_volumes_ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  std::vector<double>  __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  std::vector<double>  __pyx_t_19;
  std::vector<double>  __pyx_t_20;
  std::vector<double>  __pyx_t_21;
  int __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_centroidal_laguerre", 0);

  /* "vorostereology/voroplusplus.pyx":302
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds, num_cpus):
 * 
 *     n = weights_init.shape[0]             # <<<<<<<<<<<<<<
 *     cdef pair[vector[double], vector[double]] volumes_centroids
 *     weights = weights_init
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_weights_init, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":304
 *     n = weights_init.shape[0]
 *     cdef pair[vector[double], vector[double]] volumes_centroids
 *     weights = weights_init             # <<<<<<<<<<<<<<
 *     points = points_init
 *     previous_points = points_init
 */
  __Pyx_INCREF(__pyx_v_weights_init);
  __pyx_v_weights = __pyx_v_weights_init;

  /* "vorostereology/voroplusplus.pyx":305
 *     cdef pair[vector[double], vector[double]] volumes_centroids
 *     weights = weights_init
 *     points = points_init             # <<<<<<<<<<<<<<
 *     previous_points = points_init
 *     L1 = domain[0][1] - domain[0][0]
 */
  __Pyx_INCREF(__pyx_v_points_init);
  __pyx_v_points = __pyx_v_points_init;

  /* "vorostereology/voroplusplus.pyx":306
 *     weights = weights_init
 *     points = points_init
 *     previous_points = points_init             # <<<<<<<<<<<<<<
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]
 */
  __Pyx_INCREF(__pyx_v_points_init);
  __pyx_v_previous_points = __pyx_v_points_init;

  /* "vorostereology/voroplusplus.pyx":307
 *     points = points_init
 *     previous_points = points_init
 *     L1 = domain[0][1] - domain[0][0]             # <<<<<<<<<<<<<<
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_L1 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":308
 *     previous_points = points_init
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]             # <<<<<<<<<<<<<<
 *     L3 = domain[2][1] - domain[2][0]
 *     Lengths = np.array([L1, L2, L3])
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 308, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_L2 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":309
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]             # <<<<<<<<<<<<<<
 *     Lengths = np.array([L1, L2, L3])
 *     volume = L1*L2*L3
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_L3 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":310
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = domain[2][1] - domain[2][0]
 *     Lengths = np.array([L1, L2, L3])             # <<<<<<<<<<<<<<
 *     volume = L1*L2*L3
 *     block_size = np.max(Lengths)*0.2
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_L1);
  __Pyx_GIVEREF(__pyx_v_L1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_L1);
  __Pyx_INCREF(__pyx_v_L2);
  __Pyx_GIVEREF(__pyx_v_L2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_v_L2);
  __Pyx_INCREF(__pyx_v_L3);
  __Pyx_GIVEREF(__pyx_v_L3);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_v_L3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_Lengths = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":311
 *     L3 = domain[2][1] - domain[2][0]
 *     Lengths = np.array([L1, L2, L3])
 *     volume = L1*L2*L3             # <<<<<<<<<<<<<<
 *     block_size = np.max(Lengths)*0.2
 *     max_side = np.max(Lengths)
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_L1, __pyx_v_L2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_L3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_volume = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":312
 *     Lengths = np.array([L1, L2, L3])
 *     volume = L1*L2*L3
 *     block_size = np.max(Lengths)*0.2             # <<<<<<<<<<<<<<
 *     max_side = np.max(Lengths)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_max); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_2, __pyx_v_Lengths) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_Lengths);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_float_0_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_block_size = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":313
 *     volume = L1*L2*L3
 *     block_size = np.max(Lengths)*0.2
 *     max_side = np.max(Lengths)             # <<<<<<<<<<<<<<
 * 
 *     volumes = np.zeros(n)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_1, __pyx_v_Lengths) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_Lengths);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_max_side = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":315
 *     max_side = np.max(Lengths)
 * 
 *     volumes = np.zeros(n)             # <<<<<<<<<<<<<<
 * 
 *     num_iterations = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_n) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_n);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_volumes = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":317
 *     volumes = np.zeros(n)
 * 
 *     num_iterations = 0             # <<<<<<<<<<<<<<
 *     stopping_criterion = tol * tol * volume * max_side * max_side
 *     residual = 10 * stopping_criterion
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_num_iterations = __pyx_int_0;

  /* "vorostereology/voroplusplus.pyx":318
 * 
 *     num_iterations = 0
 *     stopping_criterion = tol * tol * volume * max_side * max_side             # <<<<<<<<<<<<<<
 *     residual = 10 * stopping_criterion
 *     gradient_convergence = True
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_tol, __pyx_v_tol); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_v_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_v_max_side); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_v_max_side); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_stopping_criterion = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":319
 *     num_iterations = 0
 *     stopping_criterion = tol * tol * volume * max_side * max_side
 *     residual = 10 * stopping_criterion             # <<<<<<<<<<<<<<
 *     gradient_convergence = True
 * 
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_int_10, __pyx_v_stopping_criterion); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_residual = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":320
 *     stopping_criterion = tol * tol * volume * max_side * max_side
 *     residual = 10 * stopping_criterion
 *     gradient_convergence = True             # <<<<<<<<<<<<<<
 * 
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 */
  __Pyx_INCREF(Py_True);
  __pyx_v_gradient_convergence = Py_True;

  /* "vorostereology/voroplusplus.pyx":322
 *     gradient_convergence = True
 * 
 *     while residual > stopping_criterion and num_iterations < max_iterations:             # <<<<<<<<<<<<<<
 *         if solver == "BB":
 *             weights, gradient_convergence = BB_solver(weights, points, target_volumes, domain, block_size, periodicity,
 */
  while (1) {
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_residual, __pyx_v_stopping_criterion, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {
    } else {
      __pyx_t_5 = __pyx_t_6;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_num_iterations, __pyx_v_max_iterations, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 322, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_t_6;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_5) break;

    /* "vorostereology/voroplusplus.pyx":323
 * 
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 *         if solver == "BB":             # <<<<<<<<<<<<<<
 *             weights, gradient_convergence = BB_solver(weights, points, target_volumes, domain, block_size, periodicity,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 */
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_solver, __pyx_n_u_BB, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 323, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "vorostereology/voroplusplus.pyx":324
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 *         if solver == "BB":
 *             weights, gradient_convergence = BB_solver(weights, points, target_volumes, domain, block_size, periodicity,             # <<<<<<<<<<<<<<
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BB_solver); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_weights);
      __Pyx_GIVEREF(__pyx_v_weights);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_weights);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_target_volumes);
      __Pyx_GIVEREF(__pyx_v_target_volumes);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_target_volumes);
      __Pyx_INCREF(__pyx_v_domain);
      __Pyx_GIVEREF(__pyx_v_domain);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_domain);
      __Pyx_INCREF(__pyx_v_block_size);
      __Pyx_GIVEREF(__pyx_v_block_size);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_block_size);
      __Pyx_INCREF(__pyx_v_periodicity);
      __Pyx_GIVEREF(__pyx_v_periodicity);
      PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_periodicity);

      /* "vorostereology/voroplusplus.pyx":325
 *         if solver == "BB":
 *             weights, gradient_convergence = BB_solver(weights, points, target_volumes, domain, block_size, periodicity,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)             # <<<<<<<<<<<<<<
 *         elif solver == "MM":
 *             weights, gradient_convergence = MM_solver(weights, points, target_volumes, domain, block_size, periodicity,
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_permute, __pyx_v_permute) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_max_iter, __pyx_v_gradient_max_iterations) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_tol, __pyx_v_gradient_tol) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_disp, __pyx_v_disp) < 0) __PYX_ERR(0, 325, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_num_cpus, __pyx_v_num_cpus) < 0) __PYX_ERR(0, 325, __pyx_L1_error)

      /* "vorostereology/voroplusplus.pyx":324
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 *         if solver == "BB":
 *             weights, gradient_convergence = BB_solver(weights, points, target_volumes, domain, block_size, periodicity,             # <<<<<<<<<<<<<<
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 324, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 324, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 324, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_7 = Py_TYPE(__pyx_t_1)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_7(__pyx_t_1); if (unlikely(!__pyx_t_2)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_7(__pyx_t_1); if (unlikely(!__pyx_t_3)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_1), 2) < 0) __PYX_ERR(0, 324, __pyx_L1_error)
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 324, __pyx_L1_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_gradient_convergence, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "vorostereology/voroplusplus.pyx":323
 * 
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 *         if solver == "BB":             # <<<<<<<<<<<<<<
 *             weights, gradient_convergence = BB_solver(weights, points, target_volumes, domain, block_size, periodicity,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 */
      goto __pyx_L7;
    }

    /* "vorostereology/voroplusplus.pyx":326
 *             weights, gradient_convergence = BB_solver(weights, points, target_volumes, domain, block_size, periodicity,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":             # <<<<<<<<<<<<<<
 *             weights, gradient_convergence = MM_solver(weights, points, target_volumes, domain, block_size, periodicity,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 */
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_v_solver, __pyx_n_u_MM, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 326, __pyx_L1_error)
    if (__pyx_t_5) {

      /* "vorostereology/voroplusplus.pyx":327
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":
 *             weights, gradient_convergence = MM_solver(weights, points, target_volumes, domain, block_size, periodicity,             # <<<<<<<<<<<<<<
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MM_solver); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_weights);
      __Pyx_GIVEREF(__pyx_v_weights);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_weights);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_target_volumes);
      __Pyx_GIVEREF(__pyx_v_target_volumes);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_target_volumes);
      __Pyx_INCREF(__pyx_v_domain);
      __Pyx_GIVEREF(__pyx_v_domain);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_v_domain);
      __Pyx_INCREF(__pyx_v_block_size);
      __Pyx_GIVEREF(__pyx_v_block_size);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_v_block_size);
      __Pyx_INCREF(__pyx_v_periodicity);
      __Pyx_GIVEREF(__pyx_v_periodicity);
      PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_v_periodicity);

      /* "vorostereology/voroplusplus.pyx":328
 *         elif solver == "MM":
 *             weights, gradient_convergence = MM_solver(weights, points, target_volumes, domain, block_size, periodicity,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)             # <<<<<<<<<<<<<<
 *         else:
 *             print("Invalid solver provided, defaulting to MM.")
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_permute, __pyx_v_permute) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_max_iter, __pyx_v_gradient_max_iterations) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_tol, __pyx_v_gradient_tol) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_disp, __pyx_v_disp) < 0) __PYX_ERR(0, 328, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_num_cpus, __pyx_v_num_cpus) < 0) __PYX_ERR(0, 328, __pyx_L1_error)

      /* "vorostereology/voroplusplus.pyx":327
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":
 *             weights, gradient_convergence = MM_solver(weights, points, target_volumes, domain, block_size, periodicity,             # <<<<<<<<<<<<<<
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         else:
 */
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 327, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        #else
        __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 327, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext;
        index = 0; __pyx_t_2 = __pyx_t_7(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        index = 1; __pyx_t_3 = __pyx_t_7(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_3);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_4), 2) < 0) __PYX_ERR(0, 327, __pyx_L1_error)
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L11_unpacking_done;
        __pyx_L10_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 327, __pyx_L1_error)
        __pyx_L11_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_gradient_convergence, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "vorostereology/voroplusplus.pyx":326
 *             weights, gradient_convergence = BB_solver(weights, points, target_volumes, domain, block_size, periodicity,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":             # <<<<<<<<<<<<<<
 *             weights, gradient_convergence = MM_solver(weights, points, target_volumes, domain, block_size, periodicity,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 */
      goto __pyx_L7;
    }

    /* "vorostereology/voroplusplus.pyx":330
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         else:
 *             print("Invalid solver provided, defaulting to MM.")             # <<<<<<<<<<<<<<
 *             compute_centroidal_laguerre(weights_init, points_init, target_volumes, domain, periodicity, permute,
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "vorostereology/voroplusplus.pyx":331
 *         else:
 *             print("Invalid solver provided, defaulting to MM.")
 *             compute_centroidal_laguerre(weights_init, points_init, target_volumes, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_compute_centroidal_laguerre); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "vorostereology/voroplusplus.pyx":332
 *             print("Invalid solver provided, defaulting to MM.")
 *             compute_centroidal_laguerre(weights_init, points_init, target_volumes, domain, periodicity, permute,
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)             # <<<<<<<<<<<<<<
 * 
 *         volumes_centroids = compute_volumes_centroids(weights,
 */
      __pyx_t_2 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_8 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[16] = {__pyx_t_2, __pyx_v_weights_init, __pyx_v_points_init, __pyx_v_target_volumes, __pyx_v_domain, __pyx_v_periodicity, __pyx_v_permute, __pyx_v_max_iterations, __pyx_v_gradient_max_iterations, __pyx_v_tol, __pyx_v_gradient_tol, __pyx_v_disp, __pyx_v_fix_num_iterations, __pyx_n_u_MM, __pyx_v_respect_bounds, __pyx_v_num_cpus};
        __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 15+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
        PyObject *__pyx_temp[16] = {__pyx_t_2, __pyx_v_weights_init, __pyx_v_points_init, __pyx_v_target_volumes, __pyx_v_domain, __pyx_v_periodicity, __pyx_v_permute, __pyx_v_max_iterations, __pyx_v_gradient_max_iterations, __pyx_v_tol, __pyx_v_gradient_tol, __pyx_v_disp, __pyx_v_fix_num_iterations, __pyx_n_u_MM, __pyx_v_respect_bounds, __pyx_v_num_cpus};
        __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_8, 15+__pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_GOTREF(__pyx_t_1);
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(15+__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_2) {
          __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __pyx_t_2 = NULL;
        }
        __Pyx_INCREF(__pyx_v_weights_init);
        __Pyx_GIVEREF(__pyx_v_weights_init);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_8, __pyx_v_weights_init);
        __Pyx_INCREF(__pyx_v_points_init);
        __Pyx_GIVEREF(__pyx_v_points_init);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_8, __pyx_v_points_init);
        __Pyx_INCREF(__pyx_v_target_volumes);
        __Pyx_GIVEREF(__pyx_v_target_volumes);
        PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_8, __pyx_v_target_volumes);
        __Pyx_INCREF(__pyx_v_domain);
        __Pyx_GIVEREF(__pyx_v_domain);
        PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_8, __pyx_v_domain);
        __Pyx_INCREF(__pyx_v_periodicity);
        __Pyx_GIVEREF(__pyx_v_periodicity);
        PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_8, __pyx_v_periodicity);
        __Pyx_INCREF(__pyx_v_permute);
        __Pyx_GIVEREF(__pyx_v_permute);
        PyTuple_SET_ITEM(__pyx_t_4, 5+__pyx_t_8, __pyx_v_permute);
        __Pyx_INCREF(__pyx_v_max_iterations);
        __Pyx_GIVEREF(__pyx_v_max_iterations);
        PyTuple_SET_ITEM(__pyx_t_4, 6+__pyx_t_8, __pyx_v_max_iterations);
        __Pyx_INCREF(__pyx_v_gradient_max_iterations);
        __Pyx_GIVEREF(__pyx_v_gradient_max_iterations);
        PyTuple_SET_ITEM(__pyx_t_4, 7+__pyx_t_8, __pyx_v_gradient_max_iterations);
        __Pyx_INCREF(__pyx_v_tol);
        __Pyx_GIVEREF(__pyx_v_tol);
        PyTuple_SET_ITEM(__pyx_t_4, 8+__pyx_t_8, __pyx_v_tol);
        __Pyx_INCREF(__pyx_v_gradient_tol);
        __Pyx_GIVEREF(__pyx_v_gradient_tol);
        PyTuple_SET_ITEM(__pyx_t_4, 9+__pyx_t_8, __pyx_v_gradient_tol);
        __Pyx_INCREF(__pyx_v_disp);
        __Pyx_GIVEREF(__pyx_v_disp);
        PyTuple_SET_ITEM(__pyx_t_4, 10+__pyx_t_8, __pyx_v_disp);
        __Pyx_INCREF(__pyx_v_fix_num_iterations);
        __Pyx_GIVEREF(__pyx_v_fix_num_iterations);
        PyTuple_SET_ITEM(__pyx_t_4, 11+__pyx_t_8, __pyx_v_fix_num_iterations);
        __Pyx_INCREF(__pyx_n_u_MM);
        __Pyx_GIVEREF(__pyx_n_u_MM);
        PyTuple_SET_ITEM(__pyx_t_4, 12+__pyx_t_8, __pyx_n_u_MM);
        __Pyx_INCREF(__pyx_v_respect_bounds);
        __Pyx_GIVEREF(__pyx_v_respect_bounds);
        PyTuple_SET_ITEM(__pyx_t_4, 13+__pyx_t_8, __pyx_v_respect_bounds);
        __Pyx_INCREF(__pyx_v_num_cpus);
        __Pyx_GIVEREF(__pyx_v_num_cpus);
        PyTuple_SET_ITEM(__pyx_t_4, 14+__pyx_t_8, __pyx_v_num_cpus);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_L7:;

    /* "vorostereology/voroplusplus.pyx":334
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 * 
 *         volumes_centroids = compute_volumes_centroids(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 */
    __pyx_t_9 = __pyx_convert_vector_from_py_double(__pyx_v_weights); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 334, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":335
 * 
 *         volumes_centroids = compute_volumes_centroids(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],             # <<<<<<<<<<<<<<
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 *         volumes = np.array(volumes_centroids.first)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":336
 *         volumes_centroids = compute_volumes_centroids(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)             # <<<<<<<<<<<<<<
 *         volumes = np.array(volumes_centroids.first)
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_periodicity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_periodicity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_periodicity, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_19 = __pyx_convert_vector_from_py_double(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_20 = __pyx_convert_vector_from_py_double(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__17); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_21 = __pyx_convert_vector_from_py_double(__pyx_t_1); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_v_num_cpus); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 336, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":334
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 * 
 *         volumes_centroids = compute_volumes_centroids(weights,             # <<<<<<<<<<<<<<
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 */
    __pyx_v_volumes_centroids = compute_volumes_centroids(__pyx_t_9, ((double)__pyx_t_10), ((double)__pyx_t_11), ((double)__pyx_t_12), ((double)__pyx_t_13), ((double)__pyx_t_14), ((double)__pyx_t_15), ((int)__pyx_t_8), ((int)__pyx_t_16), ((int)__pyx_t_17), __pyx_t_18, __pyx_t_19, __pyx_t_20, __pyx_t_21, ((int)__pyx_t_22));

    /* "vorostereology/voroplusplus.pyx":337
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 *         volumes = np.array(volumes_centroids.first)             # <<<<<<<<<<<<<<
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_convert_vector_to_py_double(__pyx_v_volumes_centroids.first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_1 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_volumes, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":338
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 *         volumes = np.array(volumes_centroids.first)
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')             # <<<<<<<<<<<<<<
 * 
 *         if not fix_num_iterations:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __pyx_convert_vector_to_py_double(__pyx_v_volumes_centroids.second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_n);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_3);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order, __pyx_n_u_F) < 0) __PYX_ERR(0, 338, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_centroids, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":340
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')
 * 
 *         if not fix_num_iterations:             # <<<<<<<<<<<<<<
 *             residual = np.sum(target_volumes * np.sum(np.square(points - centroids), axis=1))
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_fix_num_iterations); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 340, __pyx_L1_error)
    __pyx_t_6 = ((!__pyx_t_5) != 0);
    if (__pyx_t_6) {

      /* "vorostereology/voroplusplus.pyx":341
 * 
 *         if not fix_num_iterations:
 *             residual = np.sum(target_volumes * np.sum(np.square(points - centroids), axis=1))             # <<<<<<<<<<<<<<
 * 
 *         previous_points = points
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_np); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_square); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_23 = PyNumber_Subtract(__pyx_v_points, __pyx_v_centroids); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __pyx_t_25 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_24))) {
        __pyx_t_25 = PyMethod_GET_SELF(__pyx_t_24);
        if (likely(__pyx_t_25)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
          __Pyx_INCREF(__pyx_t_25);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_24, function);
        }
      }
      __pyx_t_3 = (__pyx_t_25) ? __Pyx_PyObject_Call2Args(__pyx_t_24, __pyx_t_25, __pyx_t_23) : __Pyx_PyObject_CallOneArg(__pyx_t_24, __pyx_t_23);
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __pyx_t_24 = PyTuple_New(1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 341, __pyx_L1_error)
      __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_24, __pyx_t_3); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_23);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyNumber_Multiply(__pyx_v_target_volumes, __pyx_t_23); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
      __pyx_t_23 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_23)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_23);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_1 = (__pyx_t_23) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_23, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_residual, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "vorostereology/voroplusplus.pyx":340
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')
 * 
 *         if not fix_num_iterations:             # <<<<<<<<<<<<<<
 *             residual = np.sum(target_volumes * np.sum(np.square(points - centroids), axis=1))
 * 
 */
    }

    /* "vorostereology/voroplusplus.pyx":343
 *             residual = np.sum(target_volumes * np.sum(np.square(points - centroids), axis=1))
 * 
 *         previous_points = points             # <<<<<<<<<<<<<<
 *         points = centroids
 *         num_iterations += 1
 */
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_DECREF_SET(__pyx_v_previous_points, __pyx_v_points);

    /* "vorostereology/voroplusplus.pyx":344
 * 
 *         previous_points = points
 *         points = centroids             # <<<<<<<<<<<<<<
 *         num_iterations += 1
 * 
 */
    __Pyx_INCREF(__pyx_v_centroids);
    __Pyx_DECREF_SET(__pyx_v_points, __pyx_v_centroids);

    /* "vorostereology/voroplusplus.pyx":345
 *         previous_points = points
 *         points = centroids
 *         num_iterations += 1             # <<<<<<<<<<<<<<
 * 
 *         if not gradient_convergence:
 */
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_num_iterations, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_num_iterations, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":347
 *         num_iterations += 1
 * 
 *         if not gradient_convergence:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_gradient_convergence); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 347, __pyx_L1_error)
    __pyx_t_5 = ((!__pyx_t_6) != 0);
    if (__pyx_t_5) {

      /* "vorostereology/voroplusplus.pyx":348
 * 
 *         if not gradient_convergence:
 *             break             # <<<<<<<<<<<<<<
 * 
 *     if permute:
 */
      goto __pyx_L4_break;

      /* "vorostereology/voroplusplus.pyx":347
 *         num_iterations += 1
 * 
 *         if not gradient_convergence:             # <<<<<<<<<<<<<<
 *             break
 * 
 */
    }
  }
  __pyx_L4_break:;

  /* "vorostereology/voroplusplus.pyx":350
 *             break
 * 
 *     if permute:             # <<<<<<<<<<<<<<
 *         target_volumes_ = np.array(function_definitions.permute_targets(volumes, target_volumes, n))
 *     else:
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_permute); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 350, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "vorostereology/voroplusplus.pyx":351
 * 
 *     if permute:
 *         target_volumes_ = np.array(function_definitions.permute_targets(volumes, target_volumes, n))             # <<<<<<<<<<<<<<
 *     else:
 *         target_volumes_ = target_volumes
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_23, __pyx_n_s_function_definitions); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_23);
    __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_23, __pyx_n_s_permute_targets); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
    __pyx_t_23 = NULL;
    __pyx_t_22 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_24))) {
      __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_24);
      if (likely(__pyx_t_23)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
        __Pyx_INCREF(__pyx_t_23);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_24, function);
        __pyx_t_22 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_24)) {
      PyObject *__pyx_temp[4] = {__pyx_t_23, __pyx_v_volumes, __pyx_v_target_volumes, __pyx_v_n};
      __pyx_t_2 = __Pyx_PyFunction_FastCall(__pyx_t_24, __pyx_temp+1-__pyx_t_22, 3+__pyx_t_22); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_24)) {
      PyObject *__pyx_temp[4] = {__pyx_t_23, __pyx_v_volumes, __pyx_v_target_volumes, __pyx_v_n};
      __pyx_t_2 = __Pyx_PyCFunction_FastCall(__pyx_t_24, __pyx_temp+1-__pyx_t_22, 3+__pyx_t_22); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_GOTREF(__pyx_t_2);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_22); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_23) {
        __Pyx_GIVEREF(__pyx_t_23); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_23); __pyx_t_23 = NULL;
      }
      __Pyx_INCREF(__pyx_v_volumes);
      __Pyx_GIVEREF(__pyx_v_volumes);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_22, __pyx_v_volumes);
      __Pyx_INCREF(__pyx_v_target_volumes);
      __Pyx_GIVEREF(__pyx_v_target_volumes);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_22, __pyx_v_target_volumes);
      __Pyx_INCREF(__pyx_v_n);
      __Pyx_GIVEREF(__pyx_v_n);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_22, __pyx_v_n);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_24, __pyx_t_4, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
    __pyx_t_24 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_24)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_24);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_24) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_24, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_target_volumes_ = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":350
 *             break
 * 
 *     if permute:             # <<<<<<<<<<<<<<
 *         target_volumes_ = np.array(function_definitions.permute_targets(volumes, target_volumes, n))
 *     else:
 */
    goto __pyx_L14;
  }

  /* "vorostereology/voroplusplus.pyx":353
 *         target_volumes_ = np.array(function_definitions.permute_targets(volumes, target_volumes, n))
 *     else:
 *         target_volumes_ = target_volumes             # <<<<<<<<<<<<<<
 * 
 *     if periodicity[0]:
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_target_volumes);
    __pyx_v_target_volumes_ = __pyx_v_target_volumes;
  }
  __pyx_L14:;

  /* "vorostereology/voroplusplus.pyx":355
 *         target_volumes_ = target_volumes
 * 
 *     if periodicity[0]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_periodicity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 355, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "vorostereology/voroplusplus.pyx":356
 * 
 *     if periodicity[0]:
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)             # <<<<<<<<<<<<<<
 *     if periodicity[1]:
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_remainder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_previous_points, __pyx_tuple__15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_24 = NULL;
    __pyx_t_22 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_24)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_24);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_22 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_24, __pyx_t_3, __pyx_v_L1};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_22, 2+__pyx_t_22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
      PyObject *__pyx_temp[3] = {__pyx_t_24, __pyx_t_3, __pyx_v_L1};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_22, 2+__pyx_t_22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_22); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_24) {
        __Pyx_GIVEREF(__pyx_t_24); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_24); __pyx_t_24 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_22, __pyx_t_3);
      __Pyx_INCREF(__pyx_v_L1);
      __Pyx_GIVEREF(__pyx_v_L1);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_22, __pyx_v_L1);
      __pyx_t_3 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_previous_points, __pyx_tuple__15, __pyx_t_1) < 0)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":355
 *         target_volumes_ = target_volumes
 * 
 *     if periodicity[0]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:
 */
  }

  /* "vorostereology/voroplusplus.pyx":357
 *     if periodicity[0]:
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 *     if periodicity[2]:
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_periodicity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 357, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "vorostereology/voroplusplus.pyx":358
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)             # <<<<<<<<<<<<<<
 *     if periodicity[2]:
 *         previous_points[:, 2] = np.remainder(previous_points[:, 2], L3)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remainder); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_previous_points, __pyx_tuple__16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_22 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_22 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_v_L2};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_22, 2+__pyx_t_22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_2, __pyx_v_L2};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_22, 2+__pyx_t_22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_24 = PyTuple_New(2+__pyx_t_22); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_24);
      if (__pyx_t_3) {
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_t_3); __pyx_t_3 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_24, 0+__pyx_t_22, __pyx_t_2);
      __Pyx_INCREF(__pyx_v_L2);
      __Pyx_GIVEREF(__pyx_v_L2);
      PyTuple_SET_ITEM(__pyx_t_24, 1+__pyx_t_22, __pyx_v_L2);
      __pyx_t_2 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_24, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_previous_points, __pyx_tuple__16, __pyx_t_1) < 0)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":357
 *     if periodicity[0]:
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 *     if periodicity[2]:
 */
  }

  /* "vorostereology/voroplusplus.pyx":359
 *     if periodicity[1]:
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 *     if periodicity[2]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 2] = np.remainder(previous_points[:, 2], L3)
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_periodicity, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 359, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "vorostereology/voroplusplus.pyx":360
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 *     if periodicity[2]:
 *         previous_points[:, 2] = np.remainder(previous_points[:, 2], L3)             # <<<<<<<<<<<<<<
 * 
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_remainder); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_previous_points, __pyx_tuple__17); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = NULL;
    __pyx_t_22 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_24))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_24);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_24);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_24, function);
        __pyx_t_22 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_24)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_v_L3};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_24, __pyx_temp+1-__pyx_t_22, 2+__pyx_t_22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_24)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_4, __pyx_v_L3};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_24, __pyx_temp+1-__pyx_t_22, 2+__pyx_t_22); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else
    #endif
    {
      __pyx_t_3 = PyTuple_New(2+__pyx_t_22); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_3, 0+__pyx_t_22, __pyx_t_4);
      __Pyx_INCREF(__pyx_v_L3);
      __Pyx_GIVEREF(__pyx_v_L3);
      PyTuple_SET_ITEM(__pyx_t_3, 1+__pyx_t_22, __pyx_v_L3);
      __pyx_t_4 = 0;
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_24, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 360, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_previous_points, __pyx_tuple__17, __pyx_t_1) < 0)) __PYX_ERR(0, 360, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":359
 *     if periodicity[1]:
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 *     if periodicity[2]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 2] = np.remainder(previous_points[:, 2], L3)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":362
 *         previous_points[:, 2] = np.remainder(previous_points[:, 2], L3)
 * 
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:             # <<<<<<<<<<<<<<
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")
 *         return {"volumes": volumes, "weights": weights, "points": previous_points,
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_residual, __pyx_v_stopping_criterion, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 362, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 362, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!__pyx_t_6) {
    goto __pyx_L20_next_or;
  } else {
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_fix_num_iterations); if (unlikely(__pyx_t_6 < 0)) __PYX_ERR(0, 362, __pyx_L1_error)
  __pyx_t_26 = ((!__pyx_t_6) != 0);
  if (!__pyx_t_26) {
  } else {
    __pyx_t_5 = __pyx_t_26;
    goto __pyx_L19_bool_binop_done;
  }
  __pyx_L20_next_or:;
  __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_gradient_convergence); if (unlikely(__pyx_t_26 < 0)) __PYX_ERR(0, 362, __pyx_L1_error)
  __pyx_t_6 = ((!__pyx_t_26) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L19_bool_binop_done:;
  if (__pyx_t_5) {

    /* "vorostereology/voroplusplus.pyx":363
 * 
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")             # <<<<<<<<<<<<<<
 *         return {"volumes": volumes, "weights": weights, "points": previous_points,
 *             "target_volumes": target_volumes_, "convergence": False, "centroids": points}
 */
    __Pyx_GetModuleGlobalName(__pyx_t_24, __pyx_n_s_warnings); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_24);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_warn); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
    __pyx_t_24 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_24)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_24);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    __pyx_t_1 = (__pyx_t_24) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_24, __pyx_kp_u_Algorithm_did_not_converge_in_ma) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_kp_u_Algorithm_did_not_converge_in_ma);
    __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 363, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "vorostereology/voroplusplus.pyx":364
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")
 *         return {"volumes": volumes, "weights": weights, "points": previous_points,             # <<<<<<<<<<<<<<
 *             "target_volumes": target_volumes_, "convergence": False, "centroids": points}
 *     elif disp:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 364, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_volumes, __pyx_v_volumes) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_weights, __pyx_v_weights) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_points, __pyx_v_previous_points) < 0) __PYX_ERR(0, 364, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":365
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")
 *         return {"volumes": volumes, "weights": weights, "points": previous_points,
 *             "target_volumes": target_volumes_, "convergence": False, "centroids": points}             # <<<<<<<<<<<<<<
 *     elif disp:
 *         print("Algorithm number of iterations: ", num_iterations)
 */
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_target_volumes, __pyx_v_target_volumes_) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_convergence, Py_False) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_centroids, __pyx_v_points) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "vorostereology/voroplusplus.pyx":362
 *         previous_points[:, 2] = np.remainder(previous_points[:, 2], L3)
 * 
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:             # <<<<<<<<<<<<<<
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")
 *         return {"volumes": volumes, "weights": weights, "points": previous_points,
 */
  }

  /* "vorostereology/voroplusplus.pyx":366
 *         return {"volumes": volumes, "weights": weights, "points": previous_points,
 *             "target_volumes": target_volumes_, "convergence": False, "centroids": points}
 *     elif disp:             # <<<<<<<<<<<<<<
 *         print("Algorithm number of iterations: ", num_iterations)
 * 
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_disp); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(0, 366, __pyx_L1_error)
  if (__pyx_t_5) {

    /* "vorostereology/voroplusplus.pyx":367
 *             "target_volumes": target_volumes_, "convergence": False, "centroids": points}
 *     elif disp:
 *         print("Algorithm number of iterations: ", num_iterations)             # <<<<<<<<<<<<<<
 * 
 *     return {"volumes": volumes, "weights": weights, "points": previous_points,
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_u_Algorithm_number_of_iterations);
    __Pyx_GIVEREF(__pyx_kp_u_Algorithm_number_of_iterations);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Algorithm_number_of_iterations);
    __Pyx_INCREF(__pyx_v_num_iterations);
    __Pyx_GIVEREF(__pyx_v_num_iterations);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_num_iterations);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 367, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vorostereology/voroplusplus.pyx":366
 *         return {"volumes": volumes, "weights": weights, "points": previous_points,
 *             "target_volumes": target_volumes_, "convergence": False, "centroids": points}
 *     elif disp:             # <<<<<<<<<<<<<<
 *         print("Algorithm number of iterations: ", num_iterations)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":369
 *         print("Algorithm number of iterations: ", num_iterations)
 * 
 *     return {"volumes": volumes, "weights": weights, "points": previous_points,             # <<<<<<<<<<<<<<
 *         "target_volumes": target_volumes_, "convergence": True, "centroids": points}
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 369, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_volumes, __pyx_v_volumes) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_weights, __pyx_v_weights) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_points, __pyx_v_previous_points) < 0) __PYX_ERR(0, 369, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":370
 * 
 *     return {"volumes": volumes, "weights": weights, "points": previous_points,
 *         "target_volumes": target_volumes_, "convergence": True, "centroids": points}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_target_volumes, __pyx_v_target_volumes_) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_convergence, Py_True) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_centroids, __pyx_v_points) < 0) __PYX_ERR(0, 369, __pyx_L1_error)
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":299
 * 
 * 
 * def compute_centroidal_laguerre(weights_init, points_init, target_volumes, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds, num_cpus):
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_centroidal_laguerre", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_weights);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_previous_points);
  __Pyx_XDECREF(__pyx_v_L1);
  __Pyx_XDECREF(__pyx_v_L2);
  __Pyx_XDECREF(__pyx_v_L3);
  __Pyx_XDECREF(__pyx_v_Lengths);
  __Pyx_XDECREF(__pyx_v_volume);
  __Pyx_XDECREF(__pyx_v_block_size);
  __Pyx_XDECREF(__pyx_v_max_side);
  __Pyx_XDECREF(__pyx_v_volumes);
  __Pyx_XDECREF(__pyx_v_num_iterations);
  __Pyx_XDECREF(__pyx_v_stopping_criterion);
  __Pyx_XDECREF(__pyx_v_residual);
  __Pyx_XDECREF(__pyx_v_gradient_convergence);
  __Pyx_XDECREF(__pyx_v_centroids);
  __Pyx_XDECREF(__pyx_v_target_volumes_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":373
 * 
 * 
 * def compute_centroidal_laguerre2d(weights_init, points_init, target_areas, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds,
 *     num_cpus):
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_13compute_centroidal_laguerre2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_13compute_centroidal_laguerre2d = {"compute_centroidal_laguerre2d", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_13compute_centroidal_laguerre2d, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_13compute_centroidal_laguerre2d(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_weights_init = 0;
  PyObject *__pyx_v_points_init = 0;
  PyObject *__pyx_v_target_areas = 0;
  PyObject *__pyx_v_domain = 0;
  PyObject *__pyx_v_periodicity = 0;
  PyObject *__pyx_v_permute = 0;
  PyObject *__pyx_v_max_iterations = 0;
  PyObject *__pyx_v_gradient_max_iterations = 0;
  PyObject *__pyx_v_tol = 0;
  PyObject *__pyx_v_gradient_tol = 0;
  PyObject *__pyx_v_disp = 0;
  PyObject *__pyx_v_fix_num_iterations = 0;
  PyObject *__pyx_v_solver = 0;
  PyObject *__pyx_v_respect_bounds = 0;
  PyObject *__pyx_v_num_cpus = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_centroidal_laguerre2d (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_weights_init,&__pyx_n_s_points_init,&__pyx_n_s_target_areas,&__pyx_n_s_domain,&__pyx_n_s_periodicity,&__pyx_n_s_permute,&__pyx_n_s_max_iterations,&__pyx_n_s_gradient_max_iterations,&__pyx_n_s_tol,&__pyx_n_s_gradient_tol,&__pyx_n_s_disp,&__pyx_n_s_fix_num_iterations,&__pyx_n_s_solver,&__pyx_n_s_respect_bounds,&__pyx_n_s_num_cpus,0};
    PyObject* values[15] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 15: values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_weights_init)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points_init)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 1); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_target_areas)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 2); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_domain)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 3); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodicity)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 4); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_permute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 5); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_max_iterations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 6); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradient_max_iterations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 7); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 8); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_gradient_tol)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 9); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_disp)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 10); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (likely((values[11] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_fix_num_iterations)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 11); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (likely((values[12] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_solver)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 12); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (likely((values[13] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_respect_bounds)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 13); __PYX_ERR(0, 373, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (likely((values[14] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_num_cpus)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, 14); __PYX_ERR(0, 373, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_centroidal_laguerre2d") < 0)) __PYX_ERR(0, 373, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 15) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
      values[11] = PyTuple_GET_ITEM(__pyx_args, 11);
      values[12] = PyTuple_GET_ITEM(__pyx_args, 12);
      values[13] = PyTuple_GET_ITEM(__pyx_args, 13);
      values[14] = PyTuple_GET_ITEM(__pyx_args, 14);
    }
    __pyx_v_weights_init = values[0];
    __pyx_v_points_init = values[1];
    __pyx_v_target_areas = values[2];
    __pyx_v_domain = values[3];
    __pyx_v_periodicity = values[4];
    __pyx_v_permute = values[5];
    __pyx_v_max_iterations = values[6];
    __pyx_v_gradient_max_iterations = values[7];
    __pyx_v_tol = values[8];
    __pyx_v_gradient_tol = values[9];
    __pyx_v_disp = values[10];
    __pyx_v_fix_num_iterations = values[11];
    __pyx_v_solver = values[12];
    __pyx_v_respect_bounds = values[13];
    __pyx_v_num_cpus = values[14];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_centroidal_laguerre2d", 1, 15, 15, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_centroidal_laguerre2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_12compute_centroidal_laguerre2d(__pyx_self, __pyx_v_weights_init, __pyx_v_points_init, __pyx_v_target_areas, __pyx_v_domain, __pyx_v_periodicity, __pyx_v_permute, __pyx_v_max_iterations, __pyx_v_gradient_max_iterations, __pyx_v_tol, __pyx_v_gradient_tol, __pyx_v_disp, __pyx_v_fix_num_iterations, __pyx_v_solver, __pyx_v_respect_bounds, __pyx_v_num_cpus);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_12compute_centroidal_laguerre2d(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_weights_init, PyObject *__pyx_v_points_init, PyObject *__pyx_v_target_areas, PyObject *__pyx_v_domain, PyObject *__pyx_v_periodicity, PyObject *__pyx_v_permute, PyObject *__pyx_v_max_iterations, PyObject *__pyx_v_gradient_max_iterations, PyObject *__pyx_v_tol, PyObject *__pyx_v_gradient_tol, PyObject *__pyx_v_disp, PyObject *__pyx_v_fix_num_iterations, PyObject *__pyx_v_solver, PyObject *__pyx_v_respect_bounds, PyObject *__pyx_v_num_cpus) {
  PyObject *__pyx_v_n = NULL;
  std::pair<std::vector<double> ,std::vector<double> >  __pyx_v_volumes_centroids;
  PyObject *__pyx_v_weights = NULL;
  PyObject *__pyx_v_points = NULL;
  PyObject *__pyx_v_previous_points = NULL;
  PyObject *__pyx_v_L1 = NULL;
  PyObject *__pyx_v_L2 = NULL;
  PyObject *__pyx_v_L3 = NULL;
  PyObject *__pyx_v_domain_ = NULL;
  PyObject *__pyx_v_Lengths = NULL;
  PyObject *__pyx_v_volume = NULL;
  PyObject *__pyx_v_block_size = NULL;
  PyObject *__pyx_v_max_side = NULL;
  PyObject *__pyx_v_periodicity_ = NULL;
  PyObject *__pyx_v_areas = NULL;
  PyObject *__pyx_v_num_iterations = NULL;
  PyObject *__pyx_v_stopping_criterion = NULL;
  PyObject *__pyx_v_residual = NULL;
  PyObject *__pyx_v_gradient_convergence = NULL;
  PyObject *__pyx_v_centroids = NULL;
  PyObject *__pyx_v_target_areas_ = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  std::vector<double>  __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  double __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  std::vector<double>  __pyx_t_21;
  std::vector<double>  __pyx_t_22;
  std::vector<double>  __pyx_t_23;
  int __pyx_t_24;
  PyObject *__pyx_t_25 = NULL;
  int __pyx_t_26;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_centroidal_laguerre2d", 0);

  /* "vorostereology/voroplusplus.pyx":377
 *     num_cpus):
 * 
 *     n = weights_init.shape[0]             # <<<<<<<<<<<<<<
 *     cdef pair[vector[double], vector[double]] volumes_centroids
 *     weights = weights_init
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_weights_init, __pyx_n_s_shape); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_n = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":379
 *     n = weights_init.shape[0]
 *     cdef pair[vector[double], vector[double]] volumes_centroids
 *     weights = weights_init             # <<<<<<<<<<<<<<
 *     points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])
 *     previous_points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])
 */
  __Pyx_INCREF(__pyx_v_weights_init);
  __pyx_v_weights = __pyx_v_weights_init;

  /* "vorostereology/voroplusplus.pyx":380
 *     cdef pair[vector[double], vector[double]] volumes_centroids
 *     weights = weights_init
 *     points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])             # <<<<<<<<<<<<<<
 *     previous_points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])
 *     L1 = domain[0][1] - domain[0][0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_hstack); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ones); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_weights, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_4, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_1);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  __pyx_t_1 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_5, __pyx_t_6, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_float_0_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_points_init);
  __Pyx_GIVEREF(__pyx_v_points_init);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_points_init);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_points = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":381
 *     weights = weights_init
 *     points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])
 *     previous_points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])             # <<<<<<<<<<<<<<
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_hstack); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_ones); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_weights, __pyx_n_s_shape); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_1);
  __pyx_t_6 = 0;
  __pyx_t_6 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_6, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_float_0_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_points_init);
  __Pyx_GIVEREF(__pyx_v_points_init);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_points_init);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_previous_points = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":382
 *     points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])
 *     previous_points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])
 *     L1 = domain[0][1] - domain[0][0]             # <<<<<<<<<<<<<<
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = 1
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 382, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_L1 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":383
 *     previous_points = np.hstack([points_init, np.ones((weights.shape[0], 1))*0.5])
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]             # <<<<<<<<<<<<<<
 *     L3 = 1
 *     domain_ = domain + [[0, 1]]
 */
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_L2 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":384
 *     L1 = domain[0][1] - domain[0][0]
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = 1             # <<<<<<<<<<<<<<
 *     domain_ = domain + [[0, 1]]
 *     Lengths = np.array([L1, L2, L3])
 */
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_L3 = __pyx_int_1;

  /* "vorostereology/voroplusplus.pyx":385
 *     L2 = domain[1][1] - domain[1][0]
 *     L3 = 1
 *     domain_ = domain + [[0, 1]]             # <<<<<<<<<<<<<<
 *     Lengths = np.array([L1, L2, L3])
 *     volume = L1*L2*L3
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_int_0);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_int_1);
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_v_domain, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_domain_ = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":386
 *     L3 = 1
 *     domain_ = domain + [[0, 1]]
 *     Lengths = np.array([L1, L2, L3])             # <<<<<<<<<<<<<<
 *     volume = L1*L2*L3
 *     block_size = np.max(Lengths)*0.2
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_L1);
  __Pyx_GIVEREF(__pyx_v_L1);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_L1);
  __Pyx_INCREF(__pyx_v_L2);
  __Pyx_GIVEREF(__pyx_v_L2);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_L2);
  __Pyx_INCREF(__pyx_v_L3);
  __Pyx_GIVEREF(__pyx_v_L3);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_v_L3);
  __pyx_t_4 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_4, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_Lengths = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":387
 *     domain_ = domain + [[0, 1]]
 *     Lengths = np.array([L1, L2, L3])
 *     volume = L1*L2*L3             # <<<<<<<<<<<<<<
 *     block_size = np.max(Lengths)*0.2
 *     max_side = np.max(Lengths)
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_L1, __pyx_v_L2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_L3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 387, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_volume = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":388
 *     Lengths = np.array([L1, L2, L3])
 *     volume = L1*L2*L3
 *     block_size = np.max(Lengths)*0.2             # <<<<<<<<<<<<<<
 *     max_side = np.max(Lengths)
 *     periodicity_ = periodicity + [False]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_max); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_2, __pyx_v_Lengths) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_v_Lengths);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Multiply(__pyx_t_3, __pyx_float_0_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_block_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":389
 *     volume = L1*L2*L3
 *     block_size = np.max(Lengths)*0.2
 *     max_side = np.max(Lengths)             # <<<<<<<<<<<<<<
 *     periodicity_ = periodicity + [False]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_max); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  __pyx_t_1 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_3, __pyx_v_Lengths) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_v_Lengths);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_max_side = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":390
 *     block_size = np.max(Lengths)*0.2
 *     max_side = np.max(Lengths)
 *     periodicity_ = periodicity + [False]             # <<<<<<<<<<<<<<
 * 
 *     areas = np.zeros(n)
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyList_SET_ITEM(__pyx_t_1, 0, Py_False);
  __pyx_t_2 = PyNumber_Add(__pyx_v_periodicity, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_periodicity_ = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":392
 *     periodicity_ = periodicity + [False]
 * 
 *     areas = np.zeros(n)             # <<<<<<<<<<<<<<
 * 
 *     num_iterations = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_zeros); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_1, __pyx_v_n) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_n);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_areas = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":394
 *     areas = np.zeros(n)
 * 
 *     num_iterations = 0             # <<<<<<<<<<<<<<
 *     stopping_criterion = tol * tol * volume * max_side * max_side
 *     residual = 10 * stopping_criterion
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_num_iterations = __pyx_int_0;

  /* "vorostereology/voroplusplus.pyx":395
 * 
 *     num_iterations = 0
 *     stopping_criterion = tol * tol * volume * max_side * max_side             # <<<<<<<<<<<<<<
 *     residual = 10 * stopping_criterion
 *     gradient_convergence = True
 */
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_tol, __pyx_v_tol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_volume); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_v_max_side); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_2, __pyx_v_max_side); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 395, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_stopping_criterion = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":396
 *     num_iterations = 0
 *     stopping_criterion = tol * tol * volume * max_side * max_side
 *     residual = 10 * stopping_criterion             # <<<<<<<<<<<<<<
 *     gradient_convergence = True
 * 
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_int_10, __pyx_v_stopping_criterion); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_residual = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":397
 *     stopping_criterion = tol * tol * volume * max_side * max_side
 *     residual = 10 * stopping_criterion
 *     gradient_convergence = True             # <<<<<<<<<<<<<<
 * 
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 */
  __Pyx_INCREF(Py_True);
  __pyx_v_gradient_convergence = Py_True;

  /* "vorostereology/voroplusplus.pyx":399
 *     gradient_convergence = True
 * 
 *     while residual > stopping_criterion and num_iterations < max_iterations:             # <<<<<<<<<<<<<<
 *         if solver == "BB":
 *             weights, gradient_convergence = BB_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 */
  while (1) {
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_residual, __pyx_v_stopping_criterion, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_8) {
    } else {
      __pyx_t_7 = __pyx_t_8;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_num_iterations, __pyx_v_max_iterations, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L1_error)
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 399, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __pyx_t_8;
    __pyx_L5_bool_binop_done:;
    if (!__pyx_t_7) break;

    /* "vorostereology/voroplusplus.pyx":400
 * 
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 *         if solver == "BB":             # <<<<<<<<<<<<<<
 *             weights, gradient_convergence = BB_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 */
    __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_solver, __pyx_n_u_BB, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 400, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "vorostereology/voroplusplus.pyx":401
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 *         if solver == "BB":
 *             weights, gradient_convergence = BB_solver(weights, points, target_areas, domain_, block_size, periodicity_,             # <<<<<<<<<<<<<<
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_BB_solver); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_weights);
      __Pyx_GIVEREF(__pyx_v_weights);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_weights);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_target_areas);
      __Pyx_GIVEREF(__pyx_v_target_areas);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_target_areas);
      __Pyx_INCREF(__pyx_v_domain_);
      __Pyx_GIVEREF(__pyx_v_domain_);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_domain_);
      __Pyx_INCREF(__pyx_v_block_size);
      __Pyx_GIVEREF(__pyx_v_block_size);
      PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_block_size);
      __Pyx_INCREF(__pyx_v_periodicity_);
      __Pyx_GIVEREF(__pyx_v_periodicity_);
      PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_periodicity_);

      /* "vorostereology/voroplusplus.pyx":402
 *         if solver == "BB":
 *             weights, gradient_convergence = BB_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)             # <<<<<<<<<<<<<<
 *         elif solver == "MM":
 *             weights, gradient_convergence = MM_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_permute, __pyx_v_permute) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_iter, __pyx_v_gradient_max_iterations) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tol, __pyx_v_gradient_tol) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_disp, __pyx_v_disp) < 0) __PYX_ERR(0, 402, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_num_cpus, __pyx_v_num_cpus) < 0) __PYX_ERR(0, 402, __pyx_L1_error)

      /* "vorostereology/voroplusplus.pyx":401
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 *         if solver == "BB":
 *             weights, gradient_convergence = BB_solver(weights, points, target_areas, domain_, block_size, periodicity_,             # <<<<<<<<<<<<<<
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 401, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
        PyObject* sequence = __pyx_t_4;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 401, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 401, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_3)->tp_iternext;
        index = 0; __pyx_t_1 = __pyx_t_9(__pyx_t_3); if (unlikely(!__pyx_t_1)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_2 = __pyx_t_9(__pyx_t_3); if (unlikely(!__pyx_t_2)) goto __pyx_L8_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_3), 2) < 0) __PYX_ERR(0, 401, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L9_unpacking_done;
        __pyx_L8_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 401, __pyx_L1_error)
        __pyx_L9_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_gradient_convergence, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":400
 * 
 *     while residual > stopping_criterion and num_iterations < max_iterations:
 *         if solver == "BB":             # <<<<<<<<<<<<<<
 *             weights, gradient_convergence = BB_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 */
      goto __pyx_L7;
    }

    /* "vorostereology/voroplusplus.pyx":403
 *             weights, gradient_convergence = BB_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":             # <<<<<<<<<<<<<<
 *             weights, gradient_convergence = MM_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 */
    __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_v_solver, __pyx_n_u_MM, Py_EQ)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 403, __pyx_L1_error)
    if (__pyx_t_7) {

      /* "vorostereology/voroplusplus.pyx":404
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":
 *             weights, gradient_convergence = MM_solver(weights, points, target_areas, domain_, block_size, periodicity_,             # <<<<<<<<<<<<<<
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_MM_solver); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = PyTuple_New(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_weights);
      __Pyx_GIVEREF(__pyx_v_weights);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_weights);
      __Pyx_INCREF(__pyx_v_points);
      __Pyx_GIVEREF(__pyx_v_points);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_points);
      __Pyx_INCREF(__pyx_v_target_areas);
      __Pyx_GIVEREF(__pyx_v_target_areas);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_target_areas);
      __Pyx_INCREF(__pyx_v_domain_);
      __Pyx_GIVEREF(__pyx_v_domain_);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_v_domain_);
      __Pyx_INCREF(__pyx_v_block_size);
      __Pyx_GIVEREF(__pyx_v_block_size);
      PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_block_size);
      __Pyx_INCREF(__pyx_v_periodicity_);
      __Pyx_GIVEREF(__pyx_v_periodicity_);
      PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_v_periodicity_);

      /* "vorostereology/voroplusplus.pyx":405
 *         elif solver == "MM":
 *             weights, gradient_convergence = MM_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)             # <<<<<<<<<<<<<<
 *         else:
 *             print("Invalid solver provided, defaulting to MM.")
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_permute, __pyx_v_permute) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_max_iter, __pyx_v_gradient_max_iterations) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tol, __pyx_v_gradient_tol) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_disp, __pyx_v_disp) < 0) __PYX_ERR(0, 405, __pyx_L1_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_num_cpus, __pyx_v_num_cpus) < 0) __PYX_ERR(0, 405, __pyx_L1_error)

      /* "vorostereology/voroplusplus.pyx":404
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":
 *             weights, gradient_convergence = MM_solver(weights, points, target_areas, domain_, block_size, periodicity_,             # <<<<<<<<<<<<<<
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         else:
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
        PyObject* sequence = __pyx_t_3;
        Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(0, 404, __pyx_L1_error)
        }
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        #else
        __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 404, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_9 = Py_TYPE(__pyx_t_4)->tp_iternext;
        index = 0; __pyx_t_1 = __pyx_t_9(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_1);
        index = 1; __pyx_t_2 = __pyx_t_9(__pyx_t_4); if (unlikely(!__pyx_t_2)) goto __pyx_L10_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_2);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_4), 2) < 0) __PYX_ERR(0, 404, __pyx_L1_error)
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        goto __pyx_L11_unpacking_done;
        __pyx_L10_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(0, 404, __pyx_L1_error)
        __pyx_L11_unpacking_done:;
      }
      __Pyx_DECREF_SET(__pyx_v_weights, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_gradient_convergence, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":403
 *             weights, gradient_convergence = BB_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         elif solver == "MM":             # <<<<<<<<<<<<<<
 *             weights, gradient_convergence = MM_solver(weights, points, target_areas, domain_, block_size, periodicity_,
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 */
      goto __pyx_L7;
    }

    /* "vorostereology/voroplusplus.pyx":407
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         else:
 *             print("Invalid solver provided, defaulting to MM.")             # <<<<<<<<<<<<<<
 *             compute_centroidal_laguerre(weights_init, points_init, target_areas, domain, periodicity, permute,
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 407, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vorostereology/voroplusplus.pyx":408
 *         else:
 *             print("Invalid solver provided, defaulting to MM.")
 *             compute_centroidal_laguerre(weights_init, points_init, target_areas, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_compute_centroidal_laguerre); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "vorostereology/voroplusplus.pyx":409
 *             print("Invalid solver provided, defaulting to MM.")
 *             compute_centroidal_laguerre(weights_init, points_init, target_areas, domain, periodicity, permute,
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)             # <<<<<<<<<<<<<<
 * 
 *         volumes_centroids = compute_volumes_centroids(weights,
 */
      __pyx_t_1 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_10 = 1;
        }
      }
      #if CYTHON_FAST_PYCALL
      if (PyFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[16] = {__pyx_t_1, __pyx_v_weights_init, __pyx_v_points_init, __pyx_v_target_areas, __pyx_v_domain, __pyx_v_periodicity, __pyx_v_permute, __pyx_v_max_iterations, __pyx_v_gradient_max_iterations, __pyx_v_tol, __pyx_v_gradient_tol, __pyx_v_disp, __pyx_v_fix_num_iterations, __pyx_n_u_MM, __pyx_v_respect_bounds, __pyx_v_num_cpus};
        __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 15+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 408, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      #if CYTHON_FAST_PYCCALL
      if (__Pyx_PyFastCFunction_Check(__pyx_t_2)) {
        PyObject *__pyx_temp[16] = {__pyx_t_1, __pyx_v_weights_init, __pyx_v_points_init, __pyx_v_target_areas, __pyx_v_domain, __pyx_v_periodicity, __pyx_v_permute, __pyx_v_max_iterations, __pyx_v_gradient_max_iterations, __pyx_v_tol, __pyx_v_gradient_tol, __pyx_v_disp, __pyx_v_fix_num_iterations, __pyx_n_u_MM, __pyx_v_respect_bounds, __pyx_v_num_cpus};
        __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_2, __pyx_temp+1-__pyx_t_10, 15+__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 408, __pyx_L1_error)
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_GOTREF(__pyx_t_3);
      } else
      #endif
      {
        __pyx_t_4 = PyTuple_New(15+__pyx_t_10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 408, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (__pyx_t_1) {
          __Pyx_GIVEREF(__pyx_t_1); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1); __pyx_t_1 = NULL;
        }
        __Pyx_INCREF(__pyx_v_weights_init);
        __Pyx_GIVEREF(__pyx_v_weights_init);
        PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_10, __pyx_v_weights_init);
        __Pyx_INCREF(__pyx_v_points_init);
        __Pyx_GIVEREF(__pyx_v_points_init);
        PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_10, __pyx_v_points_init);
        __Pyx_INCREF(__pyx_v_target_areas);
        __Pyx_GIVEREF(__pyx_v_target_areas);
        PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_10, __pyx_v_target_areas);
        __Pyx_INCREF(__pyx_v_domain);
        __Pyx_GIVEREF(__pyx_v_domain);
        PyTuple_SET_ITEM(__pyx_t_4, 3+__pyx_t_10, __pyx_v_domain);
        __Pyx_INCREF(__pyx_v_periodicity);
        __Pyx_GIVEREF(__pyx_v_periodicity);
        PyTuple_SET_ITEM(__pyx_t_4, 4+__pyx_t_10, __pyx_v_periodicity);
        __Pyx_INCREF(__pyx_v_permute);
        __Pyx_GIVEREF(__pyx_v_permute);
        PyTuple_SET_ITEM(__pyx_t_4, 5+__pyx_t_10, __pyx_v_permute);
        __Pyx_INCREF(__pyx_v_max_iterations);
        __Pyx_GIVEREF(__pyx_v_max_iterations);
        PyTuple_SET_ITEM(__pyx_t_4, 6+__pyx_t_10, __pyx_v_max_iterations);
        __Pyx_INCREF(__pyx_v_gradient_max_iterations);
        __Pyx_GIVEREF(__pyx_v_gradient_max_iterations);
        PyTuple_SET_ITEM(__pyx_t_4, 7+__pyx_t_10, __pyx_v_gradient_max_iterations);
        __Pyx_INCREF(__pyx_v_tol);
        __Pyx_GIVEREF(__pyx_v_tol);
        PyTuple_SET_ITEM(__pyx_t_4, 8+__pyx_t_10, __pyx_v_tol);
        __Pyx_INCREF(__pyx_v_gradient_tol);
        __Pyx_GIVEREF(__pyx_v_gradient_tol);
        PyTuple_SET_ITEM(__pyx_t_4, 9+__pyx_t_10, __pyx_v_gradient_tol);
        __Pyx_INCREF(__pyx_v_disp);
        __Pyx_GIVEREF(__pyx_v_disp);
        PyTuple_SET_ITEM(__pyx_t_4, 10+__pyx_t_10, __pyx_v_disp);
        __Pyx_INCREF(__pyx_v_fix_num_iterations);
        __Pyx_GIVEREF(__pyx_v_fix_num_iterations);
        PyTuple_SET_ITEM(__pyx_t_4, 11+__pyx_t_10, __pyx_v_fix_num_iterations);
        __Pyx_INCREF(__pyx_n_u_MM);
        __Pyx_GIVEREF(__pyx_n_u_MM);
        PyTuple_SET_ITEM(__pyx_t_4, 12+__pyx_t_10, __pyx_n_u_MM);
        __Pyx_INCREF(__pyx_v_respect_bounds);
        __Pyx_GIVEREF(__pyx_v_respect_bounds);
        PyTuple_SET_ITEM(__pyx_t_4, 13+__pyx_t_10, __pyx_v_respect_bounds);
        __Pyx_INCREF(__pyx_v_num_cpus);
        __Pyx_GIVEREF(__pyx_v_num_cpus);
        PyTuple_SET_ITEM(__pyx_t_4, 14+__pyx_t_10, __pyx_v_num_cpus);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 408, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_L7:;

    /* "vorostereology/voroplusplus.pyx":411
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 * 
 *         volumes_centroids = compute_volumes_centroids(weights,             # <<<<<<<<<<<<<<
 *             <double>domain_[0][0], <double>domain_[0][1], <double>domain_[1][0], <double>domain_[1][1], <double>domain_[2][0], <double>domain_[2][1],
 *                 <int>periodicity_[0], <int>periodicity_[1], <int>periodicity_[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 */
    __pyx_t_11 = __pyx_convert_vector_from_py_double(__pyx_v_weights); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":412
 * 
 *         volumes_centroids = compute_volumes_centroids(weights,
 *             <double>domain_[0][0], <double>domain_[0][1], <double>domain_[1][0], <double>domain_[1][1], <double>domain_[2][0], <double>domain_[2][1],             # <<<<<<<<<<<<<<
 *                 <int>periodicity_[0], <int>periodicity_[1], <int>periodicity_[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 *         areas = np.array(volumes_centroids.first)
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain_, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain_, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain_, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain_, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_domain_, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_domain_, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_2, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 412, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vorostereology/voroplusplus.pyx":413
 *         volumes_centroids = compute_volumes_centroids(weights,
 *             <double>domain_[0][0], <double>domain_[0][1], <double>domain_[1][0], <double>domain_[1][1], <double>domain_[2][0], <double>domain_[2][1],
 *                 <int>periodicity_[0], <int>periodicity_[1], <int>periodicity_[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)             # <<<<<<<<<<<<<<
 *         areas = np.array(volumes_centroids.first)
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity_, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity_, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_18 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_18 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity_, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_v_n); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_21 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_22 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_23 = __pyx_convert_vector_from_py_double(__pyx_t_3); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_v_num_cpus); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 413, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":411
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 * 
 *         volumes_centroids = compute_volumes_centroids(weights,             # <<<<<<<<<<<<<<
 *             <double>domain_[0][0], <double>domain_[0][1], <double>domain_[1][0], <double>domain_[1][1], <double>domain_[2][0], <double>domain_[2][1],
 *                 <int>periodicity_[0], <int>periodicity_[1], <int>periodicity_[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 */
    __pyx_v_volumes_centroids = compute_volumes_centroids(__pyx_t_11, ((double)__pyx_t_12), ((double)__pyx_t_13), ((double)__pyx_t_14), ((double)__pyx_t_15), ((double)__pyx_t_16), ((double)__pyx_t_17), ((int)__pyx_t_10), ((int)__pyx_t_18), ((int)__pyx_t_19), __pyx_t_20, __pyx_t_21, __pyx_t_22, __pyx_t_23, ((int)__pyx_t_24));

    /* "vorostereology/voroplusplus.pyx":414
 *             <double>domain_[0][0], <double>domain_[0][1], <double>domain_[1][0], <double>domain_[1][1], <double>domain_[2][0], <double>domain_[2][1],
 *                 <int>periodicity_[0], <int>periodicity_[1], <int>periodicity_[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 *         areas = np.array(volumes_centroids.first)             # <<<<<<<<<<<<<<
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')
 *         centroids[:, 2] = 0.5
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_convert_vector_to_py_double(__pyx_v_volumes_centroids.first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    __pyx_t_3 = (__pyx_t_1) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_1, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_2);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 414, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_areas, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "vorostereology/voroplusplus.pyx":415
 *                 <int>periodicity_[0], <int>periodicity_[1], <int>periodicity_[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus)
 *         areas = np.array(volumes_centroids.first)
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')             # <<<<<<<<<<<<<<
 *         centroids[:, 2] = 0.5
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_reshape); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_convert_vector_to_py_double(__pyx_v_volumes_centroids.second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_n);
    __Pyx_GIVEREF(__pyx_v_n);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_n);
    __Pyx_INCREF(__pyx_int_3);
    __Pyx_GIVEREF(__pyx_int_3);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_3);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order, __pyx_n_u_F) < 0) __PYX_ERR(0, 415, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_centroids, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "vorostereology/voroplusplus.pyx":416
 *         areas = np.array(volumes_centroids.first)
 *         centroids = np.reshape(volumes_centroids.second, (n, 3), order='F')
 *         centroids[:, 2] = 0.5             # <<<<<<<<<<<<<<
 * 
 *         if not fix_num_iterations:
 */
    if (unlikely(PyObject_SetItem(__pyx_v_centroids, __pyx_tuple__17, __pyx_float_0_5) < 0)) __PYX_ERR(0, 416, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":418
 *         centroids[:, 2] = 0.5
 * 
 *         if not fix_num_iterations:             # <<<<<<<<<<<<<<
 *             residual = np.sum(target_areas * np.sum(np.square(points - centroids), axis=1))
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_fix_num_iterations); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 418, __pyx_L1_error)
    __pyx_t_8 = ((!__pyx_t_7) != 0);
    if (__pyx_t_8) {

      /* "vorostereology/voroplusplus.pyx":419
 * 
 *         if not fix_num_iterations:
 *             residual = np.sum(target_areas * np.sum(np.square(points - centroids), axis=1))             # <<<<<<<<<<<<<<
 * 
 *         points[:, 2] = 0.5
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sum); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_sum); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_square); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Subtract(__pyx_v_points, __pyx_v_centroids); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_25 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_25 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_25)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_25);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
        }
      }
      __pyx_t_2 = (__pyx_t_25) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_25, __pyx_t_5) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_5);
      __Pyx_XDECREF(__pyx_t_25); __pyx_t_25 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_axis, __pyx_int_1) < 0) __PYX_ERR(0, 419, __pyx_L1_error)
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_target_areas, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      __pyx_t_3 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_1, __pyx_t_5, __pyx_t_2) : __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_2);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 419, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_residual, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "vorostereology/voroplusplus.pyx":418
 *         centroids[:, 2] = 0.5
 * 
 *         if not fix_num_iterations:             # <<<<<<<<<<<<<<
 *             residual = np.sum(target_areas * np.sum(np.square(points - centroids), axis=1))
 * 
 */
    }

    /* "vorostereology/voroplusplus.pyx":421
 *             residual = np.sum(target_areas * np.sum(np.square(points - centroids), axis=1))
 * 
 *         points[:, 2] = 0.5             # <<<<<<<<<<<<<<
 *         previous_points = points
 *         points = centroids
 */
    if (unlikely(PyObject_SetItem(__pyx_v_points, __pyx_tuple__17, __pyx_float_0_5) < 0)) __PYX_ERR(0, 421, __pyx_L1_error)

    /* "vorostereology/voroplusplus.pyx":422
 * 
 *         points[:, 2] = 0.5
 *         previous_points = points             # <<<<<<<<<<<<<<
 *         points = centroids
 *         num_iterations += 1
 */
    __Pyx_INCREF(__pyx_v_points);
    __Pyx_DECREF_SET(__pyx_v_previous_points, __pyx_v_points);

    /* "vorostereology/voroplusplus.pyx":423
 *         points[:, 2] = 0.5
 *         previous_points = points
 *         points = centroids             # <<<<<<<<<<<<<<
 *         num_iterations += 1
 * 
 */
    __Pyx_INCREF(__pyx_v_centroids);
    __Pyx_DECREF_SET(__pyx_v_points, __pyx_v_centroids);

    /* "vorostereology/voroplusplus.pyx":424
 *         previous_points = points
 *         points = centroids
 *         num_iterations += 1             # <<<<<<<<<<<<<<
 * 
 *     if permute:
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_num_iterations, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 424, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_num_iterations, __pyx_t_3);
    __pyx_t_3 = 0;
  }

  /* "vorostereology/voroplusplus.pyx":426
 *         num_iterations += 1
 * 
 *     if permute:             # <<<<<<<<<<<<<<
 *         target_areas_ = np.array(function_definitions.permute_targets(areas, target_areas, n))
 *     else:
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_permute); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 426, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "vorostereology/voroplusplus.pyx":427
 * 
 *     if permute:
 *         target_areas_ = np.array(function_definitions.permute_targets(areas, target_areas, n))             # <<<<<<<<<<<<<<
 *     else:
 *         target_areas_ = target_areas
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_function_definitions); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_permute_targets); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_24 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_24 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_areas, __pyx_v_target_areas, __pyx_v_n};
      __pyx_t_1 = __Pyx_PyFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_24, 3+__pyx_t_24); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_6)) {
      PyObject *__pyx_temp[4] = {__pyx_t_5, __pyx_v_areas, __pyx_v_target_areas, __pyx_v_n};
      __pyx_t_1 = __Pyx_PyCFunction_FastCall(__pyx_t_6, __pyx_temp+1-__pyx_t_24, 3+__pyx_t_24); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_1);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_24); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_5) {
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5); __pyx_t_5 = NULL;
      }
      __Pyx_INCREF(__pyx_v_areas);
      __Pyx_GIVEREF(__pyx_v_areas);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_24, __pyx_v_areas);
      __Pyx_INCREF(__pyx_v_target_areas);
      __Pyx_GIVEREF(__pyx_v_target_areas);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_24, __pyx_v_target_areas);
      __Pyx_INCREF(__pyx_v_n);
      __Pyx_GIVEREF(__pyx_v_n);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_24, __pyx_v_n);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 427, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
      }
    }
    __pyx_t_3 = (__pyx_t_6) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_6, __pyx_t_1) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_target_areas_ = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "vorostereology/voroplusplus.pyx":426
 *         num_iterations += 1
 * 
 *     if permute:             # <<<<<<<<<<<<<<
 *         target_areas_ = np.array(function_definitions.permute_targets(areas, target_areas, n))
 *     else:
 */
    goto __pyx_L13;
  }

  /* "vorostereology/voroplusplus.pyx":429
 *         target_areas_ = np.array(function_definitions.permute_targets(areas, target_areas, n))
 *     else:
 *         target_areas_ = target_areas             # <<<<<<<<<<<<<<
 * 
 *     if periodicity[0]:
 */
  /*else*/ {
    __Pyx_INCREF(__pyx_v_target_areas);
    __pyx_v_target_areas_ = __pyx_v_target_areas;
  }
  __pyx_L13:;

  /* "vorostereology/voroplusplus.pyx":431
 *         target_areas_ = target_areas
 * 
 *     if periodicity[0]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_8) {

    /* "vorostereology/voroplusplus.pyx":432
 * 
 *     if periodicity[0]:
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)             # <<<<<<<<<<<<<<
 *     if periodicity[1]:
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_remainder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_previous_points, __pyx_tuple__15); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = NULL;
    __pyx_t_24 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_24 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_2, __pyx_v_L1};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_1)) {
      PyObject *__pyx_temp[3] = {__pyx_t_6, __pyx_t_2, __pyx_v_L1};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_1, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_6) {
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6); __pyx_t_6 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_24, __pyx_t_2);
      __Pyx_INCREF(__pyx_v_L1);
      __Pyx_GIVEREF(__pyx_v_L1);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_24, __pyx_v_L1);
      __pyx_t_2 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_previous_points, __pyx_tuple__15, __pyx_t_3) < 0)) __PYX_ERR(0, 432, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vorostereology/voroplusplus.pyx":431
 *         target_areas_ = target_areas
 * 
 *     if periodicity[0]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:
 */
  }

  /* "vorostereology/voroplusplus.pyx":433
 *     if periodicity[0]:
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 * 
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_periodicity, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_8) {

    /* "vorostereology/voroplusplus.pyx":434
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)             # <<<<<<<<<<<<<<
 * 
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_remainder); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_v_previous_points, __pyx_tuple__16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_24 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_24 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_1, __pyx_v_L2};
      __pyx_t_3 = __Pyx_PyFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_4)) {
      PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_1, __pyx_v_L2};
      __pyx_t_3 = __Pyx_PyCFunction_FastCall(__pyx_t_4, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else
    #endif
    {
      __pyx_t_6 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (__pyx_t_2) {
        __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2); __pyx_t_2 = NULL;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_24, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_L2);
      __Pyx_GIVEREF(__pyx_v_L2);
      PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_24, __pyx_v_L2);
      __pyx_t_1 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(PyObject_SetItem(__pyx_v_previous_points, __pyx_tuple__16, __pyx_t_3) < 0)) __PYX_ERR(0, 434, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vorostereology/voroplusplus.pyx":433
 *     if periodicity[0]:
 *         previous_points[:, 0] = np.remainder(previous_points[:, 0], L1)
 *     if periodicity[1]:             # <<<<<<<<<<<<<<
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":436
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 * 
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:             # <<<<<<<<<<<<<<
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")
 *         return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],
 */
  __pyx_t_3 = PyObject_RichCompare(__pyx_v_residual, __pyx_v_stopping_criterion, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 436, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (!__pyx_t_7) {
    goto __pyx_L18_next_or;
  } else {
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_fix_num_iterations); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 436, __pyx_L1_error)
  __pyx_t_26 = ((!__pyx_t_7) != 0);
  if (!__pyx_t_26) {
  } else {
    __pyx_t_8 = __pyx_t_26;
    goto __pyx_L17_bool_binop_done;
  }
  __pyx_L18_next_or:;
  __pyx_t_26 = __Pyx_PyObject_IsTrue(__pyx_v_gradient_convergence); if (unlikely(__pyx_t_26 < 0)) __PYX_ERR(0, 436, __pyx_L1_error)
  __pyx_t_7 = ((!__pyx_t_26) != 0);
  __pyx_t_8 = __pyx_t_7;
  __pyx_L17_bool_binop_done:;
  if (__pyx_t_8) {

    /* "vorostereology/voroplusplus.pyx":437
 * 
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")             # <<<<<<<<<<<<<<
 *         return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],
 *             "target_areas": target_areas_, "convergence": False, "centroids": points[:, 0:2]}
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_warnings); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warn); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    __pyx_t_3 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_6, __pyx_t_4, __pyx_kp_u_Algorithm_did_not_converge_in_ma) : __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_kp_u_Algorithm_did_not_converge_in_ma);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "vorostereology/voroplusplus.pyx":438
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")
 *         return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],             # <<<<<<<<<<<<<<
 *             "target_areas": target_areas_, "convergence": False, "centroids": points[:, 0:2]}
 *     elif disp:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_areas, __pyx_v_areas) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_weights, __pyx_v_weights) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_previous_points, __pyx_tuple__14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_points, __pyx_t_6) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "vorostereology/voroplusplus.pyx":439
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")
 *         return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],
 *             "target_areas": target_areas_, "convergence": False, "centroids": points[:, 0:2]}             # <<<<<<<<<<<<<<
 *     elif disp:
 *         print("Algorithm number of iterations: ", num_iterations)
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_target_areas, __pyx_v_target_areas_) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_convergence, Py_False) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_u_centroids, __pyx_t_6) < 0) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "vorostereology/voroplusplus.pyx":436
 *         previous_points[:, 1] = np.remainder(previous_points[:, 1], L2)
 * 
 *     if (residual > stopping_criterion and not fix_num_iterations) or not gradient_convergence:             # <<<<<<<<<<<<<<
 *         warnings.warn("Algorithm did not converge in max_iterations iterations.")
 *         return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],
 */
  }

  /* "vorostereology/voroplusplus.pyx":440
 *         return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],
 *             "target_areas": target_areas_, "convergence": False, "centroids": points[:, 0:2]}
 *     elif disp:             # <<<<<<<<<<<<<<
 *         print("Algorithm number of iterations: ", num_iterations)
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_v_disp); if (unlikely(__pyx_t_8 < 0)) __PYX_ERR(0, 440, __pyx_L1_error)
  if (__pyx_t_8) {

    /* "vorostereology/voroplusplus.pyx":441
 *             "target_areas": target_areas_, "convergence": False, "centroids": points[:, 0:2]}
 *     elif disp:
 *         print("Algorithm number of iterations: ", num_iterations)             # <<<<<<<<<<<<<<
 * 
 *     return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u_Algorithm_number_of_iterations);
    __Pyx_GIVEREF(__pyx_kp_u_Algorithm_number_of_iterations);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Algorithm_number_of_iterations);
    __Pyx_INCREF(__pyx_v_num_iterations);
    __Pyx_GIVEREF(__pyx_v_num_iterations);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_num_iterations);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_print, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "vorostereology/voroplusplus.pyx":440
 *         return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],
 *             "target_areas": target_areas_, "convergence": False, "centroids": points[:, 0:2]}
 *     elif disp:             # <<<<<<<<<<<<<<
 *         print("Algorithm number of iterations: ", num_iterations)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":443
 *         print("Algorithm number of iterations: ", num_iterations)
 * 
 *     return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],             # <<<<<<<<<<<<<<
 *         "target_areas": target_areas_, "convergence": True, "centroids": points[:, 0:2]}
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_areas, __pyx_v_areas) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_weights, __pyx_v_weights) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_previous_points, __pyx_tuple__14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_points, __pyx_t_3) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":444
 * 
 *     return {"areas": areas, "weights": weights, "points": previous_points[:, 0:2],
 *         "target_areas": target_areas_, "convergence": True, "centroids": points[:, 0:2]}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_target_areas, __pyx_v_target_areas_) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_convergence, Py_True) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_points, __pyx_tuple__14); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_u_centroids, __pyx_t_3) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":373
 * 
 * 
 * def compute_centroidal_laguerre2d(weights_init, points_init, target_areas, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds,
 *     num_cpus):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_25);
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_centroidal_laguerre2d", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_weights);
  __Pyx_XDECREF(__pyx_v_points);
  __Pyx_XDECREF(__pyx_v_previous_points);
  __Pyx_XDECREF(__pyx_v_L1);
  __Pyx_XDECREF(__pyx_v_L2);
  __Pyx_XDECREF(__pyx_v_L3);
  __Pyx_XDECREF(__pyx_v_domain_);
  __Pyx_XDECREF(__pyx_v_Lengths);
  __Pyx_XDECREF(__pyx_v_volume);
  __Pyx_XDECREF(__pyx_v_block_size);
  __Pyx_XDECREF(__pyx_v_max_side);
  __Pyx_XDECREF(__pyx_v_periodicity_);
  __Pyx_XDECREF(__pyx_v_areas);
  __Pyx_XDECREF(__pyx_v_num_iterations);
  __Pyx_XDECREF(__pyx_v_stopping_criterion);
  __Pyx_XDECREF(__pyx_v_residual);
  __Pyx_XDECREF(__pyx_v_gradient_convergence);
  __Pyx_XDECREF(__pyx_v_centroids);
  __Pyx_XDECREF(__pyx_v_target_areas_);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":448
 * 
 * @cython.wraparound(False)
 * def compute_voronoi(points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 *   """
 * Input arg formats:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_15compute_voronoi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14vorostereology_12voroplusplus_14compute_voronoi[] = "\nInput arg formats:\n  points = list of 3-vectors (lists or compatible class instances) of doubles,\n    being the coordinates of the points to voronoi-tesselate.\n  limits = 3-list of 2-lists, specifying the start and end sizes of the box the\n    points are in.\n  dispersion = max distance between two points that might be adjacent (sets\n    voro++ block sizes.)\n  radii (optional) = list of python floats as the sphere radii of the points,\n    for radical (weighted) tessellation.\n  periodic (optional) = 3-list of bools indicating x, y and z periodicity of \n    the system box.\n  \nOutput format is a list of cells as follows:\n  [ # list in same order as original points.\n    {\n      'volume' : 1.0,\n      'vertices' : [[1.0, 2.0, 3.0], ...], # positions of vertices\n      'faces' : [\n        {\n          'vertices' : [7,4,13, ...], # vertex ids in loop order\n          'adjacent_cell' : 34 # *cell* id, negative if a wall\n        }, ...]\n      'original' : point[index] # the original instance from args\n    },\n    ... \n  ]\n  \n  NOTE: The class from items in input points list is reused for all 3-vector\n  outputs. It must have a constructor which accepts a list of 3 python floats\n  (python's list type does satisfy this requirement.)\n  ";
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_15compute_voronoi = {"compute_voronoi", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_15compute_voronoi, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14vorostereology_12voroplusplus_14compute_voronoi};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_15compute_voronoi(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_limits = 0;
  PyObject *__pyx_v_dispersion = 0;
  PyObject *__pyx_v_radii = 0;
  PyObject *__pyx_v_periodic = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_voronoi (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_limits,&__pyx_n_s_dispersion,&__pyx_n_s_radii,&__pyx_n_s_periodic,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limits)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi", 1, 5, 5, 1); __PYX_ERR(0, 448, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dispersion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi", 1, 5, 5, 2); __PYX_ERR(0, 448, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radii)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi", 1, 5, 5, 3); __PYX_ERR(0, 448, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodic)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi", 1, 5, 5, 4); __PYX_ERR(0, 448, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_voronoi") < 0)) __PYX_ERR(0, 448, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_points = values[0];
    __pyx_v_limits = values[1];
    __pyx_v_dispersion = values[2];
    __pyx_v_radii = values[3];
    __pyx_v_periodic = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_voronoi", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 448, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_voronoi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_14compute_voronoi(__pyx_self, __pyx_v_points, __pyx_v_limits, __pyx_v_dispersion, __pyx_v_radii, __pyx_v_periodic);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_14compute_voronoi(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic) {
  Py_ssize_t __pyx_v_n;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  double *__pyx_v_xs;
  double *__pyx_v_ys;
  double *__pyx_v_zs;
  double *__pyx_v_rs;
  void **__pyx_v_voronoi_cells;
  PyObject *__pyx_v_vector_class = NULL;
  PyObject *__pyx_v_blocks = NULL;
  void *__pyx_v_container;
  std::pair<void **,std::vector<int> >  __pyx_v_result;
  std::vector<int>  __pyx_v_empty_indices;
  PyObject *__pyx_v_py_cells = NULL;
  std::vector<double>  __pyx_v_vertex_positions;
  void **__pyx_v_lists;
  std::vector<int>  *__pyx_v_vptr;
  PyObject *__pyx_v_cell_vertices = NULL;
  PyObject *__pyx_v_faces = NULL;
  PyObject *__pyx_v_face_vertices = NULL;
  std::vector<int> ::size_type __pyx_v_k;
  int __pyx_v_idx;
  PyObject *__pyx_8genexpr1__pyx_v_p = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  double __pyx_t_17;
  double __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  void **__pyx_t_26;
  std::vector<int>  __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  int __pyx_t_31;
  std::vector<int> ::size_type __pyx_t_32;
  std::vector<int> ::size_type __pyx_t_33;
  std::vector<int> ::size_type __pyx_t_34;
  std::vector<int> ::iterator __pyx_t_35;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_voronoi", 0);
  __Pyx_INCREF(__pyx_v_radii);
  __Pyx_INCREF(__pyx_v_periodic);

  /* "vorostereology/voroplusplus.pyx":481
 *   (python's list type does satisfy this requirement.)
 *   """
 *   cdef Py_ssize_t n = len(points), i, j             # <<<<<<<<<<<<<<
 *   cdef double *xs
 *   cdef double *ys
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 481, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "vorostereology/voroplusplus.pyx":488
 *   cdef void** voronoi_cells
 * 
 *   vector_class = get_constructor(points[0])             # <<<<<<<<<<<<<<
 * 
 *   periodic = [1 if p else 0 for p in periodic]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_constructor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_vector_class = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":490
 *   vector_class = get_constructor(points[0])
 * 
 *   periodic = [1 if p else 0 for p in periodic]             # <<<<<<<<<<<<<<
 * 
 *   # we must make sure we have at least one block, or voro++ will segfault when
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 490, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_v_periodic)) || PyTuple_CheckExact(__pyx_v_periodic)) {
      __pyx_t_3 = __pyx_v_periodic; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_periodic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 490, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 490, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 490, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 490, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 490, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 490, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_8genexpr1__pyx_v_p); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 490, __pyx_L5_error)
      if (__pyx_t_7) {
        __Pyx_INCREF(__pyx_int_1);
        __pyx_t_4 = __pyx_int_1;
      } else {
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_4 = __pyx_int_0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 490, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_p); __pyx_8genexpr1__pyx_v_p = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_p); __pyx_8genexpr1__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_periodic, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":496
 * 
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = 1;
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vorostereology/voroplusplus.pyx":497
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 *   ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = 1;
  __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_4 = __pyx_t_8;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":498
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])             # <<<<<<<<<<<<<<
 *   ]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_3, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = 1;
  __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_10, __pyx_t_11, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_10);
    __pyx_t_8 = __pyx_t_10;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":495
 *   # we look for cells.
 * 
 *   blocks = [             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_blocks = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":502
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_radii); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 502, __pyx_L1_error)
  __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 502, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_1 != __pyx_t_12) != 0);
  if (__pyx_t_7) {

    /* "vorostereology/voroplusplus.pyx":503
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):
 *     radii = [dispersion / 10.] * len(points)             # <<<<<<<<<<<<<<
 * 
 *   # build the container object
 */
    __pyx_t_10 = __Pyx_PyFloat_TrueDivideObjC(__pyx_v_dispersion, __pyx_float_10_, 10., 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 503, __pyx_L1_error)
    __pyx_t_8 = PyList_New(1 * ((__pyx_t_12<0) ? 0:__pyx_t_12)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 503, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_12; __pyx_temp++) {
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_8, __pyx_temp, __pyx_t_10);
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_radii, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vorostereology/voroplusplus.pyx":502
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":507
 *   # build the container object
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],             # <<<<<<<<<<<<<<
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":508
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],
 *     <double>limits[0][1],             # <<<<<<<<<<<<<<
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":509
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 *     <double>limits[1][0],             # <<<<<<<<<<<<<<
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":510
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 *     <double>limits[1][1],             # <<<<<<<<<<<<<<
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":511
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 *     <double>limits[2][0],             # <<<<<<<<<<<<<<
 *     <double>limits[2][1],
 *     <int>blocks[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":512
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 *     <double>limits[2][1],             # <<<<<<<<<<<<<<
 *     <int>blocks[0],
 *     <int>blocks[1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":513
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 *     <int>blocks[0],             # <<<<<<<<<<<<<<
 *     <int>blocks[1],
 *     <int>blocks[2],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":514
 *     <double>limits[2][1],
 *     <int>blocks[0],
 *     <int>blocks[1],             # <<<<<<<<<<<<<<
 *     <int>blocks[2],
 *     <int>periodic[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":515
 *     <int>blocks[0],
 *     <int>blocks[1],
 *     <int>blocks[2],             # <<<<<<<<<<<<<<
 *     <int>periodic[0],
 *     <int>periodic[1],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":516
 *     <int>blocks[1],
 *     <int>blocks[2],
 *     <int>periodic[0],             # <<<<<<<<<<<<<<
 *     <int>periodic[1],
 *     <int>periodic[2]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 516, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":517
 *     <int>blocks[2],
 *     <int>periodic[0],
 *     <int>periodic[1],             # <<<<<<<<<<<<<<
 *     <int>periodic[2]
 *   )
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":518
 *     <int>periodic[0],
 *     <int>periodic[1],
 *     <int>periodic[2]             # <<<<<<<<<<<<<<
 *   )
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":506
 * 
 *   # build the container object
 *   cdef void* container = container_poly_create(             # <<<<<<<<<<<<<<
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 */
  __pyx_v_container = container_poly_create(((double)__pyx_t_13), ((double)__pyx_t_14), ((double)__pyx_t_15), ((double)__pyx_t_16), ((double)__pyx_t_17), ((double)__pyx_t_18), ((int)__pyx_t_19), ((int)__pyx_t_20), ((int)__pyx_t_21), ((int)__pyx_t_22), ((int)__pyx_t_23), ((int)__pyx_t_24));

  /* "vorostereology/voroplusplus.pyx":521
 *   )
 * 
 *   xs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_xs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":522
 * 
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_ys = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":523
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   rs = <double*>malloc(sizeof(double) * n)
 * 
 */
  __pyx_v_zs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":524
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 * 
 *   # initialise particle positions:
 */
  __pyx_v_rs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":527
 * 
 *   # initialise particle positions:
 *   for i in range(n):             # <<<<<<<<<<<<<<
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 */
  __pyx_t_12 = __pyx_v_n;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":528
 *   # initialise particle positions:
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]             # <<<<<<<<<<<<<<
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_xs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":529
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]             # <<<<<<<<<<<<<<
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    (__pyx_v_ys[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":530
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]             # <<<<<<<<<<<<<<
 *     rs[i] = <double>radii[i]
 * 
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_zs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":531
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]             # <<<<<<<<<<<<<<
 * 
 *   # and add them to the container:
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_radii, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_rs[__pyx_v_i]) = ((double)__pyx_t_18);
  }

  /* "vorostereology/voroplusplus.pyx":534
 * 
 *   # and add them to the container:
 *   put_particles(container, n, xs, ys, zs, rs)             # <<<<<<<<<<<<<<
 * 
 *   # now compute the tessellation:
 */
  put_particles(__pyx_v_container, __pyx_v_n, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs, __pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":537
 * 
 *   # now compute the tessellation:
 *   result = compute_voronoi_tessellation_par(container, n)             # <<<<<<<<<<<<<<
 *   voronoi_cells = result.first
 *   empty_indices = result.second
 */
  __pyx_v_result = compute_voronoi_tessellation_par(__pyx_v_container, __pyx_v_n);

  /* "vorostereology/voroplusplus.pyx":538
 *   # now compute the tessellation:
 *   result = compute_voronoi_tessellation_par(container, n)
 *   voronoi_cells = result.first             # <<<<<<<<<<<<<<
 *   empty_indices = result.second
 * 
 */
  __pyx_t_26 = __pyx_v_result.first;
  __pyx_v_voronoi_cells = __pyx_t_26;

  /* "vorostereology/voroplusplus.pyx":539
 *   result = compute_voronoi_tessellation_par(container, n)
 *   voronoi_cells = result.first
 *   empty_indices = result.second             # <<<<<<<<<<<<<<
 * 
 *   # extract the Voronoi cells into python objects:
 */
  __pyx_t_27 = __pyx_v_result.second;
  __pyx_v_empty_indices = __pyx_t_27;

  /* "vorostereology/voroplusplus.pyx":542
 * 
 *   # extract the Voronoi cells into python objects:
 *   py_cells = [{'original':p} for p in points]             # <<<<<<<<<<<<<<
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL
 */
  { /* enter inner scope */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 542, __pyx_L14_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (likely(PyList_CheckExact(__pyx_v_points)) || PyTuple_CheckExact(__pyx_v_points)) {
      __pyx_t_8 = __pyx_v_points; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_points); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 542, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 542, __pyx_L14_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 542, __pyx_L14_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 542, __pyx_L14_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_8);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 542, __pyx_L14_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 542, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_original, __pyx_8genexpr2__pyx_v_p) < 0) __PYX_ERR(0, 542, __pyx_L14_error)
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 542, __pyx_L14_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_p); __pyx_8genexpr2__pyx_v_p = 0;
    goto __pyx_L17_exit_scope;
    __pyx_L14_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_p); __pyx_8genexpr2__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L17_exit_scope:;
  } /* exit inner scope */
  __pyx_v_py_cells = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":544
 *   py_cells = [{'original':p} for p in points]
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL             # <<<<<<<<<<<<<<
 *   cdef vector[int]* vptr = NULL
 *   for i in range(n):
 */
  __pyx_v_lists = NULL;

  /* "vorostereology/voroplusplus.pyx":545
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL
 *   cdef vector[int]* vptr = NULL             # <<<<<<<<<<<<<<
 *   for i in range(n):
 *     py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 */
  __pyx_v_vptr = NULL;

  /* "vorostereology/voroplusplus.pyx":546
 *   cdef void** lists = NULL
 *   cdef vector[int]* vptr = NULL
 *   for i in range(n):             # <<<<<<<<<<<<<<
 *     py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 */
  __pyx_t_12 = __pyx_v_n;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":547
 *   cdef vector[int]* vptr = NULL
 *   for i in range(n):
 *     py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))             # <<<<<<<<<<<<<<
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 *     cell_vertices = []
 */
    __pyx_t_10 = PyFloat_FromDouble(cell_get_volume((__pyx_v_voronoi_cells[__pyx_v_i]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_py_cells, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(PyObject_SetItem(__pyx_t_8, __pyx_n_u_volume, __pyx_t_10) < 0)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":548
 *   for i in range(n):
 *     py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])             # <<<<<<<<<<<<<<
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 */
    __pyx_v_vertex_positions = cell_get_vertex_positions((__pyx_v_voronoi_cells[__pyx_v_i]), (__pyx_v_xs[__pyx_v_i]), (__pyx_v_ys[__pyx_v_i]), (__pyx_v_zs[__pyx_v_i]));

    /* "vorostereology/voroplusplus.pyx":549
 *     py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 *     cell_vertices = []             # <<<<<<<<<<<<<<
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([
 */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_cell_vertices, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":550
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):             # <<<<<<<<<<<<<<
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),
 */
    __pyx_t_28 = ((Py_ssize_t)(__pyx_v_vertex_positions.size() / 3));
    __pyx_t_29 = __pyx_t_28;
    for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
      __pyx_v_j = __pyx_t_30;

      /* "vorostereology/voroplusplus.pyx":552
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j + 1]),
 *         float(vertex_positions[3 * j + 2])
 */
      __pyx_t_8 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[(3 * __pyx_v_j)]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 552, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "vorostereology/voroplusplus.pyx":553
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j + 2])
 *       ]))
 */
      __pyx_t_4 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[((3 * __pyx_v_j) + 1)]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 553, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "vorostereology/voroplusplus.pyx":554
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),
 *         float(vertex_positions[3 * j + 2])             # <<<<<<<<<<<<<<
 *       ]))
 *     py_cells[i]['vertices'] = cell_vertices
 */
      __pyx_t_2 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[((3 * __pyx_v_j) + 2)]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "vorostereology/voroplusplus.pyx":551
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),
 */
      __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
      __pyx_t_8 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_v_vector_class);
      __pyx_t_2 = __pyx_v_vector_class; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_31 = __Pyx_PyList_Append(__pyx_v_cell_vertices, __pyx_t_10); if (unlikely(__pyx_t_31 == ((int)-1))) __PYX_ERR(0, 551, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }

    /* "vorostereology/voroplusplus.pyx":556
 *         float(vertex_positions[3 * j + 2])
 *       ]))
 *     py_cells[i]['vertices'] = cell_vertices             # <<<<<<<<<<<<<<
 * 
 *     lists = cell_get_faces(voronoi_cells[i])
 */
    __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_py_cells, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (unlikely(PyObject_SetItem(__pyx_t_10, __pyx_n_u_vertices, __pyx_v_cell_vertices) < 0)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":558
 *     py_cells[i]['vertices'] = cell_vertices
 * 
 *     lists = cell_get_faces(voronoi_cells[i])             # <<<<<<<<<<<<<<
 *     faces = []
 *     j = 0
 */
    __pyx_v_lists = cell_get_faces((__pyx_v_voronoi_cells[__pyx_v_i]));

    /* "vorostereology/voroplusplus.pyx":559
 * 
 *     lists = cell_get_faces(voronoi_cells[i])
 *     faces = []             # <<<<<<<<<<<<<<
 *     j = 0
 *     while lists[j] != NULL:
 */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 559, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_faces, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":560
 *     lists = cell_get_faces(voronoi_cells[i])
 *     faces = []
 *     j = 0             # <<<<<<<<<<<<<<
 *     while lists[j] != NULL:
 *       face_vertices = []
 */
    __pyx_v_j = 0;

    /* "vorostereology/voroplusplus.pyx":561
 *     faces = []
 *     j = 0
 *     while lists[j] != NULL:             # <<<<<<<<<<<<<<
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]
 */
    while (1) {
      __pyx_t_7 = (((__pyx_v_lists[__pyx_v_j]) != NULL) != 0);
      if (!__pyx_t_7) break;

      /* "vorostereology/voroplusplus.pyx":562
 *     j = 0
 *     while lists[j] != NULL:
 *       face_vertices = []             # <<<<<<<<<<<<<<
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):
 */
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_face_vertices, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "vorostereology/voroplusplus.pyx":563
 *     while lists[j] != NULL:
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]             # <<<<<<<<<<<<<<
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))
 */
      __pyx_v_vptr = ((std::vector<int>  *)(__pyx_v_lists[__pyx_v_j]));

      /* "vorostereology/voroplusplus.pyx":564
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):             # <<<<<<<<<<<<<<
 *         face_vertices.append(int(deref(vptr)[k]))
 *       faces.append({
 */
      __pyx_t_32 = (__pyx_v_vptr->size() - 1);
      __pyx_t_33 = __pyx_t_32;
      for (__pyx_t_34 = 0; __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
        __pyx_v_k = __pyx_t_34;

        /* "vorostereology/voroplusplus.pyx":565
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))             # <<<<<<<<<<<<<<
 *       faces.append({
 *         'adjacent_cell' : int(deref(vptr)[vptr.size() - 1]),
 */
        __pyx_t_10 = __Pyx_PyInt_From_int(((*__pyx_v_vptr)[__pyx_v_k])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_31 = __Pyx_PyList_Append(__pyx_v_face_vertices, __pyx_t_2); if (unlikely(__pyx_t_31 == ((int)-1))) __PYX_ERR(0, 565, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "vorostereology/voroplusplus.pyx":567
 *         face_vertices.append(int(deref(vptr)[k]))
 *       faces.append({
 *         'adjacent_cell' : int(deref(vptr)[vptr.size() - 1]),             # <<<<<<<<<<<<<<
 *         'vertices' : face_vertices
 *       })
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyInt_From_int(((*__pyx_v_vptr)[(__pyx_v_vptr->size() - 1)])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_adjacent_cell, __pyx_t_3) < 0) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "vorostereology/voroplusplus.pyx":568
 *       faces.append({
 *         'adjacent_cell' : int(deref(vptr)[vptr.size() - 1]),
 *         'vertices' : face_vertices             # <<<<<<<<<<<<<<
 *       })
 *       del vptr
 */
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_vertices, __pyx_v_face_vertices) < 0) __PYX_ERR(0, 567, __pyx_L1_error)

      /* "vorostereology/voroplusplus.pyx":566
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))
 *       faces.append({             # <<<<<<<<<<<<<<
 *         'adjacent_cell' : int(deref(vptr)[vptr.size() - 1]),
 *         'vertices' : face_vertices
 */
      __pyx_t_31 = __Pyx_PyList_Append(__pyx_v_faces, __pyx_t_2); if (unlikely(__pyx_t_31 == ((int)-1))) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":570
 *         'vertices' : face_vertices
 *       })
 *       del vptr             # <<<<<<<<<<<<<<
 *       j += 1
 *     free(lists)
 */
      delete __pyx_v_vptr;

      /* "vorostereology/voroplusplus.pyx":571
 *       })
 *       del vptr
 *       j += 1             # <<<<<<<<<<<<<<
 *     free(lists)
 *     py_cells[i]['faces'] = faces
 */
      __pyx_v_j = (__pyx_v_j + 1);
    }

    /* "vorostereology/voroplusplus.pyx":572
 *       del vptr
 *       j += 1
 *     free(lists)             # <<<<<<<<<<<<<<
 *     py_cells[i]['faces'] = faces
 * 
 */
    free(__pyx_v_lists);

    /* "vorostereology/voroplusplus.pyx":573
 *       j += 1
 *     free(lists)
 *     py_cells[i]['faces'] = faces             # <<<<<<<<<<<<<<
 * 
 *   for idx in empty_indices:
 */
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_py_cells, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_n_u_faces, __pyx_v_faces) < 0)) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "vorostereology/voroplusplus.pyx":575
 *     py_cells[i]['faces'] = faces
 * 
 *   for idx in empty_indices:             # <<<<<<<<<<<<<<
 *     py_cells[idx] = {}
 * 
 */
  __pyx_t_35 = __pyx_v_empty_indices.begin();
  for (;;) {
    if (!(__pyx_t_35 != __pyx_v_empty_indices.end())) break;
    __pyx_t_24 = *__pyx_t_35;
    ++__pyx_t_35;
    __pyx_v_idx = __pyx_t_24;

    /* "vorostereology/voroplusplus.pyx":576
 * 
 *   for idx in empty_indices:
 *     py_cells[idx] = {}             # <<<<<<<<<<<<<<
 * 
 *   # finally, tidy up.
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__Pyx_SetItemInt(__pyx_v_py_cells, __pyx_v_idx, __pyx_t_2, int, 1, __Pyx_PyInt_From_int, 1, 0, 1) < 0)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "vorostereology/voroplusplus.pyx":575
 *     py_cells[i]['faces'] = faces
 * 
 *   for idx in empty_indices:             # <<<<<<<<<<<<<<
 *     py_cells[idx] = {}
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":579
 * 
 *   # finally, tidy up.
 *   dispose_all(container, voronoi_cells, n)             # <<<<<<<<<<<<<<
 *   free(xs)
 *   free(ys)
 */
  dispose_all(__pyx_v_container, __pyx_v_voronoi_cells, __pyx_v_n);

  /* "vorostereology/voroplusplus.pyx":580
 *   # finally, tidy up.
 *   dispose_all(container, voronoi_cells, n)
 *   free(xs)             # <<<<<<<<<<<<<<
 *   free(ys)
 *   free(zs)
 */
  free(__pyx_v_xs);

  /* "vorostereology/voroplusplus.pyx":581
 *   dispose_all(container, voronoi_cells, n)
 *   free(xs)
 *   free(ys)             # <<<<<<<<<<<<<<
 *   free(zs)
 *   free(rs)
 */
  free(__pyx_v_ys);

  /* "vorostereology/voroplusplus.pyx":582
 *   free(xs)
 *   free(ys)
 *   free(zs)             # <<<<<<<<<<<<<<
 *   free(rs)
 *   return py_cells
 */
  free(__pyx_v_zs);

  /* "vorostereology/voroplusplus.pyx":583
 *   free(ys)
 *   free(zs)
 *   free(rs)             # <<<<<<<<<<<<<<
 *   return py_cells
 * 
 */
  free(__pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":584
 *   free(zs)
 *   free(rs)
 *   return py_cells             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_cells);
  __pyx_r = __pyx_v_py_cells;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":448
 * 
 * @cython.wraparound(False)
 * def compute_voronoi(points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 *   """
 * Input arg formats:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_voronoi", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vector_class);
  __Pyx_XDECREF(__pyx_v_blocks);
  __Pyx_XDECREF(__pyx_v_py_cells);
  __Pyx_XDECREF(__pyx_v_cell_vertices);
  __Pyx_XDECREF(__pyx_v_faces);
  __Pyx_XDECREF(__pyx_v_face_vertices);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_p);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_radii);
  __Pyx_XDECREF(__pyx_v_periodic);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":588
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_bounded(points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_17compute_voronoi_bounded(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_17compute_voronoi_bounded = {"compute_voronoi_bounded", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_17compute_voronoi_bounded, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_17compute_voronoi_bounded(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_limits = 0;
  PyObject *__pyx_v_dispersion = 0;
  PyObject *__pyx_v_cells_to_compute = 0;
  PyObject *__pyx_v_x_outside = 0;
  PyObject *__pyx_v_y_outside = 0;
  PyObject *__pyx_v_z_outside = 0;
  PyObject *__pyx_v_radii = 0;
  PyObject *__pyx_v_periodic = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_voronoi_bounded (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_limits,&__pyx_n_s_dispersion,&__pyx_n_s_cells_to_compute,&__pyx_n_s_x_outside,&__pyx_n_s_y_outside,&__pyx_n_s_z_outside,&__pyx_n_s_radii,&__pyx_n_s_periodic,0};
    PyObject* values[9] = {0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limits)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, 1); __PYX_ERR(0, 588, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dispersion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, 2); __PYX_ERR(0, 588, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells_to_compute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, 3); __PYX_ERR(0, 588, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x_outside)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, 4); __PYX_ERR(0, 588, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_outside)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, 5); __PYX_ERR(0, 588, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z_outside)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, 6); __PYX_ERR(0, 588, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radii)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, 7); __PYX_ERR(0, 588, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodic)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, 8); __PYX_ERR(0, 588, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_voronoi_bounded") < 0)) __PYX_ERR(0, 588, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 9) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
    }
    __pyx_v_points = values[0];
    __pyx_v_limits = values[1];
    __pyx_v_dispersion = values[2];
    __pyx_v_cells_to_compute = values[3];
    __pyx_v_x_outside = values[4];
    __pyx_v_y_outside = values[5];
    __pyx_v_z_outside = values[6];
    __pyx_v_radii = values[7];
    __pyx_v_periodic = values[8];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_voronoi_bounded", 1, 9, 9, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 588, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_voronoi_bounded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_16compute_voronoi_bounded(__pyx_self, __pyx_v_points, __pyx_v_limits, __pyx_v_dispersion, __pyx_v_cells_to_compute, __pyx_v_x_outside, __pyx_v_y_outside, __pyx_v_z_outside, __pyx_v_radii, __pyx_v_periodic);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_16compute_voronoi_bounded(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_cells_to_compute, PyObject *__pyx_v_x_outside, PyObject *__pyx_v_y_outside, PyObject *__pyx_v_z_outside, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic) {
  Py_ssize_t __pyx_v_n;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  double *__pyx_v_xs;
  double *__pyx_v_ys;
  double *__pyx_v_zs;
  double *__pyx_v_rs;
  void **__pyx_v_voronoi_cells;
  PyObject *__pyx_v_vector_class = NULL;
  PyObject *__pyx_v_blocks = NULL;
  void *__pyx_v_container;
  std::pair<void **,std::vector<bool> >  __pyx_v_result;
  std::vector<bool>  __pyx_v_computed_indices;
  PyObject *__pyx_v_py_cells = NULL;
  std::vector<double>  __pyx_v_vertex_positions;
  void **__pyx_v_lists;
  std::vector<int>  *__pyx_v_vptr;
  PyObject *__pyx_v_cell_vertices = NULL;
  PyObject *__pyx_v_faces = NULL;
  PyObject *__pyx_v_face_vertices = NULL;
  std::vector<int> ::size_type __pyx_v_k;
  PyObject *__pyx_8genexpr3__pyx_v_p = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  double __pyx_t_17;
  double __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  std::vector<bool>  __pyx_t_26;
  std::vector<bool>  __pyx_t_27;
  std::vector<bool>  __pyx_t_28;
  std::vector<bool>  __pyx_t_29;
  void **__pyx_t_30;
  Py_ssize_t __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  int __pyx_t_34;
  std::vector<int> ::size_type __pyx_t_35;
  std::vector<int> ::size_type __pyx_t_36;
  std::vector<int> ::size_type __pyx_t_37;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_voronoi_bounded", 0);
  __Pyx_INCREF(__pyx_v_radii);
  __Pyx_INCREF(__pyx_v_periodic);

  /* "vorostereology/voroplusplus.pyx":590
 * def compute_voronoi_bounded(points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):
 * 
 *   cdef Py_ssize_t n = len(points), i, j             # <<<<<<<<<<<<<<
 *   cdef double *xs
 *   cdef double *ys
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 590, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "vorostereology/voroplusplus.pyx":597
 *   cdef void** voronoi_cells
 * 
 *   vector_class = get_constructor(points[0])             # <<<<<<<<<<<<<<
 * 
 *   periodic = [1 if p else 0 for p in periodic]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_constructor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_vector_class = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":599
 *   vector_class = get_constructor(points[0])
 * 
 *   periodic = [1 if p else 0 for p in periodic]             # <<<<<<<<<<<<<<
 * 
 *   # we must make sure we have at least one block, or voro++ will segfault when
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_v_periodic)) || PyTuple_CheckExact(__pyx_v_periodic)) {
      __pyx_t_3 = __pyx_v_periodic; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_periodic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 599, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 599, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 599, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 599, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 599, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 599, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 599, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_8genexpr3__pyx_v_p); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 599, __pyx_L5_error)
      if (__pyx_t_7) {
        __Pyx_INCREF(__pyx_int_1);
        __pyx_t_4 = __pyx_int_1;
      } else {
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_4 = __pyx_int_0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 599, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_p); __pyx_8genexpr3__pyx_v_p = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_p); __pyx_8genexpr3__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_periodic, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":605
 * 
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = 1;
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 605, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vorostereology/voroplusplus.pyx":606
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 *   ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = 1;
  __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 606, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_4 = __pyx_t_8;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 606, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":607
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])             # <<<<<<<<<<<<<<
 *   ]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_3, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = 1;
  __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_10, __pyx_t_11, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 607, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_10);
    __pyx_t_8 = __pyx_t_10;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":604
 *   # we look for cells.
 * 
 *   blocks = [             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 604, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_blocks = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":611
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_radii); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 611, __pyx_L1_error)
  __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 611, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_1 != __pyx_t_12) != 0);
  if (__pyx_t_7) {

    /* "vorostereology/voroplusplus.pyx":612
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):
 *     radii = [dispersion / 10.] * len(points)             # <<<<<<<<<<<<<<
 * 
 *   # build the container object
 */
    __pyx_t_10 = __Pyx_PyFloat_TrueDivideObjC(__pyx_v_dispersion, __pyx_float_10_, 10., 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 612, __pyx_L1_error)
    __pyx_t_8 = PyList_New(1 * ((__pyx_t_12<0) ? 0:__pyx_t_12)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 612, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_12; __pyx_temp++) {
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_8, __pyx_temp, __pyx_t_10);
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_radii, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vorostereology/voroplusplus.pyx":611
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":616
 *   # build the container object
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],             # <<<<<<<<<<<<<<
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 616, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":617
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],
 *     <double>limits[0][1],             # <<<<<<<<<<<<<<
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":618
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 *     <double>limits[1][0],             # <<<<<<<<<<<<<<
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":619
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 *     <double>limits[1][1],             # <<<<<<<<<<<<<<
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 619, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":620
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 *     <double>limits[2][0],             # <<<<<<<<<<<<<<
 *     <double>limits[2][1],
 *     <int>blocks[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 620, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":621
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 *     <double>limits[2][1],             # <<<<<<<<<<<<<<
 *     <int>blocks[0],
 *     <int>blocks[1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 621, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":622
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 *     <int>blocks[0],             # <<<<<<<<<<<<<<
 *     <int>blocks[1],
 *     <int>blocks[2],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 622, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":623
 *     <double>limits[2][1],
 *     <int>blocks[0],
 *     <int>blocks[1],             # <<<<<<<<<<<<<<
 *     <int>blocks[2],
 *     <int>periodic[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":624
 *     <int>blocks[0],
 *     <int>blocks[1],
 *     <int>blocks[2],             # <<<<<<<<<<<<<<
 *     <int>periodic[0],
 *     <int>periodic[1],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 624, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":625
 *     <int>blocks[1],
 *     <int>blocks[2],
 *     <int>periodic[0],             # <<<<<<<<<<<<<<
 *     <int>periodic[1],
 *     <int>periodic[2]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 625, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":626
 *     <int>blocks[2],
 *     <int>periodic[0],
 *     <int>periodic[1],             # <<<<<<<<<<<<<<
 *     <int>periodic[2]
 *   )
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 626, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":627
 *     <int>periodic[0],
 *     <int>periodic[1],
 *     <int>periodic[2]             # <<<<<<<<<<<<<<
 *   )
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 627, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":615
 * 
 *   # build the container object
 *   cdef void* container = container_poly_create(             # <<<<<<<<<<<<<<
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 */
  __pyx_v_container = container_poly_create(((double)__pyx_t_13), ((double)__pyx_t_14), ((double)__pyx_t_15), ((double)__pyx_t_16), ((double)__pyx_t_17), ((double)__pyx_t_18), ((int)__pyx_t_19), ((int)__pyx_t_20), ((int)__pyx_t_21), ((int)__pyx_t_22), ((int)__pyx_t_23), ((int)__pyx_t_24));

  /* "vorostereology/voroplusplus.pyx":630
 *   )
 * 
 *   xs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_xs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":631
 * 
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_ys = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":632
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   rs = <double*>malloc(sizeof(double) * n)
 * 
 */
  __pyx_v_zs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":633
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 * 
 *   # initialise particle positions:
 */
  __pyx_v_rs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":636
 * 
 *   # initialise particle positions:
 *   for i in range(n):             # <<<<<<<<<<<<<<
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 */
  __pyx_t_12 = __pyx_v_n;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":637
 *   # initialise particle positions:
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]             # <<<<<<<<<<<<<<
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 637, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_xs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":638
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]             # <<<<<<<<<<<<<<
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    (__pyx_v_ys[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":639
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]             # <<<<<<<<<<<<<<
 *     rs[i] = <double>radii[i]
 * 
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_zs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":640
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]             # <<<<<<<<<<<<<<
 * 
 *   # and add them to the container:
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_radii, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 640, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_rs[__pyx_v_i]) = ((double)__pyx_t_18);
  }

  /* "vorostereology/voroplusplus.pyx":643
 * 
 *   # and add them to the container:
 *   put_particles(container, n, xs, ys, zs, rs)             # <<<<<<<<<<<<<<
 * 
 *   # now compute the tessellation:
 */
  put_particles(__pyx_v_container, __pyx_v_n, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs, __pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":646
 * 
 *   # now compute the tessellation:
 *   result = compute_voronoi_tessellation_bounded(container, n, cells_to_compute, x_outside, y_outside, z_outside)             # <<<<<<<<<<<<<<
 *   voronoi_cells = result.first
 *   computed_indices = result.second
 */
  __pyx_t_26 = __pyx_convert_vector_from_py_bool(__pyx_v_cells_to_compute); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_t_27 = __pyx_convert_vector_from_py_bool(__pyx_v_x_outside); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_t_28 = __pyx_convert_vector_from_py_bool(__pyx_v_y_outside); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_t_29 = __pyx_convert_vector_from_py_bool(__pyx_v_z_outside); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 646, __pyx_L1_error)
  __pyx_v_result = compute_voronoi_tessellation_bounded(__pyx_v_container, __pyx_v_n, __pyx_t_26, __pyx_t_27, __pyx_t_28, __pyx_t_29);

  /* "vorostereology/voroplusplus.pyx":647
 *   # now compute the tessellation:
 *   result = compute_voronoi_tessellation_bounded(container, n, cells_to_compute, x_outside, y_outside, z_outside)
 *   voronoi_cells = result.first             # <<<<<<<<<<<<<<
 *   computed_indices = result.second
 * 
 */
  __pyx_t_30 = __pyx_v_result.first;
  __pyx_v_voronoi_cells = __pyx_t_30;

  /* "vorostereology/voroplusplus.pyx":648
 *   result = compute_voronoi_tessellation_bounded(container, n, cells_to_compute, x_outside, y_outside, z_outside)
 *   voronoi_cells = result.first
 *   computed_indices = result.second             # <<<<<<<<<<<<<<
 * 
 *   # extract the Voronoi cells into python objects:
 */
  __pyx_t_29 = __pyx_v_result.second;
  __pyx_v_computed_indices = __pyx_t_29;

  /* "vorostereology/voroplusplus.pyx":651
 * 
 *   # extract the Voronoi cells into python objects:
 *   py_cells = [{'original':p} for p in points]             # <<<<<<<<<<<<<<
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL
 */
  { /* enter inner scope */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 651, __pyx_L14_error)
    __Pyx_GOTREF(__pyx_t_10);
    if (likely(PyList_CheckExact(__pyx_v_points)) || PyTuple_CheckExact(__pyx_v_points)) {
      __pyx_t_8 = __pyx_v_points; __Pyx_INCREF(__pyx_t_8); __pyx_t_12 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_12 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_v_points); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 651, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_6 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 651, __pyx_L14_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 651, __pyx_L14_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 651, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_12 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 651, __pyx_L14_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 651, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_8);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 651, __pyx_L14_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 651, __pyx_L14_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_4, __pyx_n_u_original, __pyx_8genexpr4__pyx_v_p) < 0) __PYX_ERR(0, 651, __pyx_L14_error)
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 651, __pyx_L14_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_p); __pyx_8genexpr4__pyx_v_p = 0;
    goto __pyx_L17_exit_scope;
    __pyx_L14_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_p); __pyx_8genexpr4__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L17_exit_scope:;
  } /* exit inner scope */
  __pyx_v_py_cells = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":653
 *   py_cells = [{'original':p} for p in points]
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL             # <<<<<<<<<<<<<<
 *   cdef vector[int]* vptr = NULL
 *   for i in range(n):
 */
  __pyx_v_lists = NULL;

  /* "vorostereology/voroplusplus.pyx":654
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL
 *   cdef vector[int]* vptr = NULL             # <<<<<<<<<<<<<<
 *   for i in range(n):
 *     if computed_indices[i]:
 */
  __pyx_v_vptr = NULL;

  /* "vorostereology/voroplusplus.pyx":655
 *   cdef void** lists = NULL
 *   cdef vector[int]* vptr = NULL
 *   for i in range(n):             # <<<<<<<<<<<<<<
 *     if computed_indices[i]:
 *       py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 */
  __pyx_t_12 = __pyx_v_n;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":656
 *   cdef vector[int]* vptr = NULL
 *   for i in range(n):
 *     if computed_indices[i]:             # <<<<<<<<<<<<<<
 *       py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 *       vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 */
    __pyx_t_7 = ((__pyx_v_computed_indices[__pyx_v_i]) != 0);
    if (__pyx_t_7) {

      /* "vorostereology/voroplusplus.pyx":657
 *   for i in range(n):
 *     if computed_indices[i]:
 *       py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))             # <<<<<<<<<<<<<<
 *       vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 *       cell_vertices = []
 */
      __pyx_t_10 = PyFloat_FromDouble(cell_get_volume((__pyx_v_voronoi_cells[__pyx_v_i]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 657, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_py_cells, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 657, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (unlikely(PyObject_SetItem(__pyx_t_8, __pyx_n_u_volume, __pyx_t_10) < 0)) __PYX_ERR(0, 657, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "vorostereology/voroplusplus.pyx":658
 *     if computed_indices[i]:
 *       py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 *       vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])             # <<<<<<<<<<<<<<
 *       cell_vertices = []
 *       for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 */
      __pyx_v_vertex_positions = cell_get_vertex_positions((__pyx_v_voronoi_cells[__pyx_v_i]), (__pyx_v_xs[__pyx_v_i]), (__pyx_v_ys[__pyx_v_i]), (__pyx_v_zs[__pyx_v_i]));

      /* "vorostereology/voroplusplus.pyx":659
 *       py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 *       vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 *       cell_vertices = []             # <<<<<<<<<<<<<<
 *       for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *         cell_vertices.append(vector_class([
 */
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 659, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_cell_vertices, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "vorostereology/voroplusplus.pyx":660
 *       vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 *       cell_vertices = []
 *       for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):             # <<<<<<<<<<<<<<
 *         cell_vertices.append(vector_class([
 *           float(vertex_positions[3 * j]),
 */
      __pyx_t_31 = ((Py_ssize_t)(__pyx_v_vertex_positions.size() / 3));
      __pyx_t_32 = __pyx_t_31;
      for (__pyx_t_33 = 0; __pyx_t_33 < __pyx_t_32; __pyx_t_33+=1) {
        __pyx_v_j = __pyx_t_33;

        /* "vorostereology/voroplusplus.pyx":662
 *       for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *         cell_vertices.append(vector_class([
 *           float(vertex_positions[3 * j]),             # <<<<<<<<<<<<<<
 *           float(vertex_positions[3 * j + 1]),
 *           float(vertex_positions[3 * j + 2])
 */
        __pyx_t_8 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[(3 * __pyx_v_j)]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 662, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);

        /* "vorostereology/voroplusplus.pyx":663
 *         cell_vertices.append(vector_class([
 *           float(vertex_positions[3 * j]),
 *           float(vertex_positions[3 * j + 1]),             # <<<<<<<<<<<<<<
 *           float(vertex_positions[3 * j + 2])
 *         ]))
 */
        __pyx_t_4 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[((3 * __pyx_v_j) + 1)]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 663, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);

        /* "vorostereology/voroplusplus.pyx":664
 *           float(vertex_positions[3 * j]),
 *           float(vertex_positions[3 * j + 1]),
 *           float(vertex_positions[3 * j + 2])             # <<<<<<<<<<<<<<
 *         ]))
 *       py_cells[i]['vertices'] = cell_vertices
 */
        __pyx_t_2 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[((3 * __pyx_v_j) + 2)]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 664, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);

        /* "vorostereology/voroplusplus.pyx":661
 *       cell_vertices = []
 *       for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *         cell_vertices.append(vector_class([             # <<<<<<<<<<<<<<
 *           float(vertex_positions[3 * j]),
 *           float(vertex_positions[3 * j + 1]),
 */
        __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_8);
        PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_4);
        PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_2);
        PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
        __pyx_t_8 = 0;
        __pyx_t_4 = 0;
        __pyx_t_2 = 0;
        __Pyx_INCREF(__pyx_v_vector_class);
        __pyx_t_2 = __pyx_v_vector_class; __pyx_t_4 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
          }
        }
        __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_34 = __Pyx_PyList_Append(__pyx_v_cell_vertices, __pyx_t_10); if (unlikely(__pyx_t_34 == ((int)-1))) __PYX_ERR(0, 661, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }

      /* "vorostereology/voroplusplus.pyx":666
 *           float(vertex_positions[3 * j + 2])
 *         ]))
 *       py_cells[i]['vertices'] = cell_vertices             # <<<<<<<<<<<<<<
 * 
 *       lists = cell_get_faces(voronoi_cells[i])
 */
      __pyx_t_10 = __Pyx_GetItemInt_List(__pyx_v_py_cells, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      if (unlikely(PyObject_SetItem(__pyx_t_10, __pyx_n_u_vertices, __pyx_v_cell_vertices) < 0)) __PYX_ERR(0, 666, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "vorostereology/voroplusplus.pyx":668
 *       py_cells[i]['vertices'] = cell_vertices
 * 
 *       lists = cell_get_faces(voronoi_cells[i])             # <<<<<<<<<<<<<<
 *       faces = []
 *       j = 0
 */
      __pyx_v_lists = cell_get_faces((__pyx_v_voronoi_cells[__pyx_v_i]));

      /* "vorostereology/voroplusplus.pyx":669
 * 
 *       lists = cell_get_faces(voronoi_cells[i])
 *       faces = []             # <<<<<<<<<<<<<<
 *       j = 0
 *       while lists[j] != NULL:
 */
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 669, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_faces, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "vorostereology/voroplusplus.pyx":670
 *       lists = cell_get_faces(voronoi_cells[i])
 *       faces = []
 *       j = 0             # <<<<<<<<<<<<<<
 *       while lists[j] != NULL:
 *         face_vertices = []
 */
      __pyx_v_j = 0;

      /* "vorostereology/voroplusplus.pyx":671
 *       faces = []
 *       j = 0
 *       while lists[j] != NULL:             # <<<<<<<<<<<<<<
 *         face_vertices = []
 *         vptr = <vector[int]*>lists[j]
 */
      while (1) {
        __pyx_t_7 = (((__pyx_v_lists[__pyx_v_j]) != NULL) != 0);
        if (!__pyx_t_7) break;

        /* "vorostereology/voroplusplus.pyx":672
 *       j = 0
 *       while lists[j] != NULL:
 *         face_vertices = []             # <<<<<<<<<<<<<<
 *         vptr = <vector[int]*>lists[j]
 *         for k in range(vptr.size() - 1):
 */
        __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 672, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_XDECREF_SET(__pyx_v_face_vertices, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "vorostereology/voroplusplus.pyx":673
 *       while lists[j] != NULL:
 *         face_vertices = []
 *         vptr = <vector[int]*>lists[j]             # <<<<<<<<<<<<<<
 *         for k in range(vptr.size() - 1):
 *           face_vertices.append(int(deref(vptr)[k]))
 */
        __pyx_v_vptr = ((std::vector<int>  *)(__pyx_v_lists[__pyx_v_j]));

        /* "vorostereology/voroplusplus.pyx":674
 *         face_vertices = []
 *         vptr = <vector[int]*>lists[j]
 *         for k in range(vptr.size() - 1):             # <<<<<<<<<<<<<<
 *           face_vertices.append(int(deref(vptr)[k]))
 *         faces.append({
 */
        __pyx_t_35 = (__pyx_v_vptr->size() - 1);
        __pyx_t_36 = __pyx_t_35;
        for (__pyx_t_37 = 0; __pyx_t_37 < __pyx_t_36; __pyx_t_37+=1) {
          __pyx_v_k = __pyx_t_37;

          /* "vorostereology/voroplusplus.pyx":675
 *         vptr = <vector[int]*>lists[j]
 *         for k in range(vptr.size() - 1):
 *           face_vertices.append(int(deref(vptr)[k]))             # <<<<<<<<<<<<<<
 *         faces.append({
 *           'adjacent_cell' : int(deref(vptr)[vptr.size() - 1]),
 */
          __pyx_t_10 = __Pyx_PyInt_From_int(((*__pyx_v_vptr)[__pyx_v_k])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 675, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 675, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_34 = __Pyx_PyList_Append(__pyx_v_face_vertices, __pyx_t_2); if (unlikely(__pyx_t_34 == ((int)-1))) __PYX_ERR(0, 675, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }

        /* "vorostereology/voroplusplus.pyx":677
 *           face_vertices.append(int(deref(vptr)[k]))
 *         faces.append({
 *           'adjacent_cell' : int(deref(vptr)[vptr.size() - 1]),             # <<<<<<<<<<<<<<
 *           'vertices' : face_vertices
 *         })
 */
        __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __Pyx_PyInt_From_int(((*__pyx_v_vptr)[(__pyx_v_vptr->size() - 1)])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 677, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_adjacent_cell, __pyx_t_3) < 0) __PYX_ERR(0, 677, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "vorostereology/voroplusplus.pyx":678
 *         faces.append({
 *           'adjacent_cell' : int(deref(vptr)[vptr.size() - 1]),
 *           'vertices' : face_vertices             # <<<<<<<<<<<<<<
 *         })
 *         del vptr
 */
        if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_vertices, __pyx_v_face_vertices) < 0) __PYX_ERR(0, 677, __pyx_L1_error)

        /* "vorostereology/voroplusplus.pyx":676
 *         for k in range(vptr.size() - 1):
 *           face_vertices.append(int(deref(vptr)[k]))
 *         faces.append({             # <<<<<<<<<<<<<<
 *           'adjacent_cell' : int(deref(vptr)[vptr.size() - 1]),
 *           'vertices' : face_vertices
 */
        __pyx_t_34 = __Pyx_PyList_Append(__pyx_v_faces, __pyx_t_2); if (unlikely(__pyx_t_34 == ((int)-1))) __PYX_ERR(0, 676, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "vorostereology/voroplusplus.pyx":680
 *           'vertices' : face_vertices
 *         })
 *         del vptr             # <<<<<<<<<<<<<<
 *         j += 1
 *       free(lists)
 */
        delete __pyx_v_vptr;

        /* "vorostereology/voroplusplus.pyx":681
 *         })
 *         del vptr
 *         j += 1             # <<<<<<<<<<<<<<
 *       free(lists)
 *       py_cells[i]['faces'] = faces
 */
        __pyx_v_j = (__pyx_v_j + 1);
      }

      /* "vorostereology/voroplusplus.pyx":682
 *         del vptr
 *         j += 1
 *       free(lists)             # <<<<<<<<<<<<<<
 *       py_cells[i]['faces'] = faces
 *     else:
 */
      free(__pyx_v_lists);

      /* "vorostereology/voroplusplus.pyx":683
 *         j += 1
 *       free(lists)
 *       py_cells[i]['faces'] = faces             # <<<<<<<<<<<<<<
 *     else:
 *       py_cells[i] = {}
 */
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_py_cells, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(PyObject_SetItem(__pyx_t_2, __pyx_n_u_faces, __pyx_v_faces) < 0)) __PYX_ERR(0, 683, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "vorostereology/voroplusplus.pyx":656
 *   cdef vector[int]* vptr = NULL
 *   for i in range(n):
 *     if computed_indices[i]:             # <<<<<<<<<<<<<<
 *       py_cells[i]['volume'] = float(cell_get_volume(voronoi_cells[i]))
 *       vertex_positions = cell_get_vertex_positions(voronoi_cells[i], xs[i], ys[i], zs[i])
 */
      goto __pyx_L20;
    }

    /* "vorostereology/voroplusplus.pyx":685
 *       py_cells[i]['faces'] = faces
 *     else:
 *       py_cells[i] = {}             # <<<<<<<<<<<<<<
 * 
 *   # finally, tidy up.
 */
    /*else*/ {
      __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_SetItemInt(__pyx_v_py_cells, __pyx_v_i, __pyx_t_2, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1) < 0)) __PYX_ERR(0, 685, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_L20:;
  }

  /* "vorostereology/voroplusplus.pyx":688
 * 
 *   # finally, tidy up.
 *   dispose_all(container, voronoi_cells, n)             # <<<<<<<<<<<<<<
 *   free(xs)
 *   free(ys)
 */
  dispose_all(__pyx_v_container, __pyx_v_voronoi_cells, __pyx_v_n);

  /* "vorostereology/voroplusplus.pyx":689
 *   # finally, tidy up.
 *   dispose_all(container, voronoi_cells, n)
 *   free(xs)             # <<<<<<<<<<<<<<
 *   free(ys)
 *   free(zs)
 */
  free(__pyx_v_xs);

  /* "vorostereology/voroplusplus.pyx":690
 *   dispose_all(container, voronoi_cells, n)
 *   free(xs)
 *   free(ys)             # <<<<<<<<<<<<<<
 *   free(zs)
 *   free(rs)
 */
  free(__pyx_v_ys);

  /* "vorostereology/voroplusplus.pyx":691
 *   free(xs)
 *   free(ys)
 *   free(zs)             # <<<<<<<<<<<<<<
 *   free(rs)
 *   return py_cells
 */
  free(__pyx_v_zs);

  /* "vorostereology/voroplusplus.pyx":692
 *   free(ys)
 *   free(zs)
 *   free(rs)             # <<<<<<<<<<<<<<
 *   return py_cells
 * 
 */
  free(__pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":693
 *   free(zs)
 *   free(rs)
 *   return py_cells             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_py_cells);
  __pyx_r = __pyx_v_py_cells;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":588
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_bounded(points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_voronoi_bounded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vector_class);
  __Pyx_XDECREF(__pyx_v_blocks);
  __Pyx_XDECREF(__pyx_v_py_cells);
  __Pyx_XDECREF(__pyx_v_cell_vertices);
  __Pyx_XDECREF(__pyx_v_faces);
  __Pyx_XDECREF(__pyx_v_face_vertices);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_p);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_radii);
  __Pyx_XDECREF(__pyx_v_periodic);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":697
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_section(coeffs, offset, points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_19compute_voronoi_section(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_19compute_voronoi_section = {"compute_voronoi_section", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_19compute_voronoi_section, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_19compute_voronoi_section(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coeffs = 0;
  PyObject *__pyx_v_offset = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_limits = 0;
  PyObject *__pyx_v_dispersion = 0;
  PyObject *__pyx_v_radii = 0;
  PyObject *__pyx_v_periodic = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_voronoi_section (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeffs,&__pyx_n_s_offset,&__pyx_n_s_points,&__pyx_n_s_limits,&__pyx_n_s_dispersion,&__pyx_n_s_radii,&__pyx_n_s_periodic,0};
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section", 1, 7, 7, 1); __PYX_ERR(0, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section", 1, 7, 7, 2); __PYX_ERR(0, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limits)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section", 1, 7, 7, 3); __PYX_ERR(0, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dispersion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section", 1, 7, 7, 4); __PYX_ERR(0, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radii)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section", 1, 7, 7, 5); __PYX_ERR(0, 697, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodic)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section", 1, 7, 7, 6); __PYX_ERR(0, 697, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_voronoi_section") < 0)) __PYX_ERR(0, 697, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 7) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
    }
    __pyx_v_coeffs = values[0];
    __pyx_v_offset = values[1];
    __pyx_v_points = values[2];
    __pyx_v_limits = values[3];
    __pyx_v_dispersion = values[4];
    __pyx_v_radii = values[5];
    __pyx_v_periodic = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_voronoi_section", 1, 7, 7, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 697, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_voronoi_section", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_18compute_voronoi_section(__pyx_self, __pyx_v_coeffs, __pyx_v_offset, __pyx_v_points, __pyx_v_limits, __pyx_v_dispersion, __pyx_v_radii, __pyx_v_periodic);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_18compute_voronoi_section(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_offset, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic) {
  Py_ssize_t __pyx_v_n;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  double *__pyx_v_xs;
  double *__pyx_v_ys;
  double *__pyx_v_zs;
  double *__pyx_v_rs;
  void **__pyx_v_voronoi_cells;
  PyObject *__pyx_v_vector_class = NULL;
  PyObject *__pyx_v_blocks = NULL;
  void *__pyx_v_container;
  std::pair<void **,std::vector<int> >  __pyx_v_result;
  std::vector<int>  __pyx_v_section_indices;
  std::vector<double>  __pyx_v_vertex_positions;
  void **__pyx_v_lists;
  std::vector<int>  *__pyx_v_vptr;
  PyObject *__pyx_v_vertices_3d = NULL;
  PyObject *__pyx_v_section_areas = NULL;
  PyObject *__pyx_v_cell_vertices = NULL;
  std::vector<double>  __pyx_v_faces_areas;
  PyObject *__pyx_v_face_vertices = NULL;
  std::vector<int> ::size_type __pyx_v_k;
  PyObject *__pyx_v_duplicates = NULL;
  PyObject *__pyx_v_idx_sort = NULL;
  PyObject *__pyx_v_sorted_areas = NULL;
  PyObject *__pyx_v_sorted_indices = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_idx_start = NULL;
  PyObject *__pyx_v_count = NULL;
  PyObject *__pyx_v_first_occurrence = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_section_indices_ = NULL;
  PyObject *__pyx_v_section_areas_ = NULL;
  PyObject *__pyx_v_cross_section_2d = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_p = NULL;
  Py_ssize_t __pyx_8genexpr6__pyx_v_j;
  PyObject *__pyx_8genexpr7__pyx_v_cell = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  double __pyx_t_17;
  double __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  void **__pyx_t_26;
  std::vector<int>  __pyx_t_27;
  Py_ssize_t __pyx_t_28;
  Py_ssize_t __pyx_t_29;
  Py_ssize_t __pyx_t_30;
  int __pyx_t_31;
  std::vector<int> ::size_type __pyx_t_32;
  std::vector<int> ::size_type __pyx_t_33;
  std::vector<int> ::size_type __pyx_t_34;
  PyObject *(*__pyx_t_35)(PyObject *);
  PyObject *(*__pyx_t_36)(PyObject *);
  PyObject *(*__pyx_t_37)(PyObject *);
  PyObject *__pyx_t_38 = NULL;
  PyObject *__pyx_t_39 = NULL;
  int __pyx_t_40;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_voronoi_section", 0);
  __Pyx_INCREF(__pyx_v_radii);
  __Pyx_INCREF(__pyx_v_periodic);

  /* "vorostereology/voroplusplus.pyx":699
 * def compute_voronoi_section(coeffs, offset, points, limits, dispersion, radii, periodic):
 * 
 *   cdef Py_ssize_t n = len(points), i, j             # <<<<<<<<<<<<<<
 *   cdef double *xs
 *   cdef double *ys
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 699, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "vorostereology/voroplusplus.pyx":706
 *   cdef void** voronoi_cells
 * 
 *   vector_class = get_constructor(points[0])             # <<<<<<<<<<<<<<
 * 
 *   periodic = [1 if p else 0 for p in periodic]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_constructor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_vector_class = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":708
 *   vector_class = get_constructor(points[0])
 * 
 *   periodic = [1 if p else 0 for p in periodic]             # <<<<<<<<<<<<<<
 * 
 *   # we must make sure we have at least one block, or voro++ will segfault when
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 708, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_v_periodic)) || PyTuple_CheckExact(__pyx_v_periodic)) {
      __pyx_t_3 = __pyx_v_periodic; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_periodic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 708, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 708, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 708, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 708, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 708, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 708, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 708, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_8genexpr5__pyx_v_p); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 708, __pyx_L5_error)
      if (__pyx_t_7) {
        __Pyx_INCREF(__pyx_int_1);
        __pyx_t_4 = __pyx_int_1;
      } else {
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_4 = __pyx_int_0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 708, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_p); __pyx_8genexpr5__pyx_v_p = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_p); __pyx_8genexpr5__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_periodic, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":714
 * 
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = 1;
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 714, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vorostereology/voroplusplus.pyx":715
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 *   ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = 1;
  __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 715, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_4 = __pyx_t_8;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 715, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":716
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])             # <<<<<<<<<<<<<<
 *   ]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_3, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = 1;
  __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_10, __pyx_t_11, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_10);
    __pyx_t_8 = __pyx_t_10;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":713
 *   # we look for cells.
 * 
 *   blocks = [             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 713, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_blocks = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":720
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_radii); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 720, __pyx_L1_error)
  __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 720, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_1 != __pyx_t_12) != 0);
  if (__pyx_t_7) {

    /* "vorostereology/voroplusplus.pyx":721
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):
 *     radii = [dispersion / 10.] * len(points)             # <<<<<<<<<<<<<<
 * 
 *   # build the container object
 */
    __pyx_t_10 = __Pyx_PyFloat_TrueDivideObjC(__pyx_v_dispersion, __pyx_float_10_, 10., 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 721, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 721, __pyx_L1_error)
    __pyx_t_8 = PyList_New(1 * ((__pyx_t_12<0) ? 0:__pyx_t_12)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 721, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_12; __pyx_temp++) {
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_8, __pyx_temp, __pyx_t_10);
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_radii, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vorostereology/voroplusplus.pyx":720
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":725
 *   # build the container object
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],             # <<<<<<<<<<<<<<
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":726
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],
 *     <double>limits[0][1],             # <<<<<<<<<<<<<<
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":727
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 *     <double>limits[1][0],             # <<<<<<<<<<<<<<
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":728
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 *     <double>limits[1][1],             # <<<<<<<<<<<<<<
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":729
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 *     <double>limits[2][0],             # <<<<<<<<<<<<<<
 *     <double>limits[2][1],
 *     <int>blocks[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 729, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":730
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 *     <double>limits[2][1],             # <<<<<<<<<<<<<<
 *     <int>blocks[0],
 *     <int>blocks[1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":731
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 *     <int>blocks[0],             # <<<<<<<<<<<<<<
 *     <int>blocks[1],
 *     <int>blocks[2],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":732
 *     <double>limits[2][1],
 *     <int>blocks[0],
 *     <int>blocks[1],             # <<<<<<<<<<<<<<
 *     <int>blocks[2],
 *     <int>periodic[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 732, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":733
 *     <int>blocks[0],
 *     <int>blocks[1],
 *     <int>blocks[2],             # <<<<<<<<<<<<<<
 *     <int>periodic[0],
 *     <int>periodic[1],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":734
 *     <int>blocks[1],
 *     <int>blocks[2],
 *     <int>periodic[0],             # <<<<<<<<<<<<<<
 *     <int>periodic[1],
 *     <int>periodic[2]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":735
 *     <int>blocks[2],
 *     <int>periodic[0],
 *     <int>periodic[1],             # <<<<<<<<<<<<<<
 *     <int>periodic[2]
 *   )
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":736
 *     <int>periodic[0],
 *     <int>periodic[1],
 *     <int>periodic[2]             # <<<<<<<<<<<<<<
 *   )
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":724
 * 
 *   # build the container object
 *   cdef void* container = container_poly_create(             # <<<<<<<<<<<<<<
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 */
  __pyx_v_container = container_poly_create(((double)__pyx_t_13), ((double)__pyx_t_14), ((double)__pyx_t_15), ((double)__pyx_t_16), ((double)__pyx_t_17), ((double)__pyx_t_18), ((int)__pyx_t_19), ((int)__pyx_t_20), ((int)__pyx_t_21), ((int)__pyx_t_22), ((int)__pyx_t_23), ((int)__pyx_t_24));

  /* "vorostereology/voroplusplus.pyx":739
 *   )
 * 
 *   xs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_xs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":740
 * 
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_ys = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":741
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   rs = <double*>malloc(sizeof(double) * n)
 * 
 */
  __pyx_v_zs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":742
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 * 
 *   # initialise particle positions:
 */
  __pyx_v_rs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":745
 * 
 *   # initialise particle positions:
 *   for i in range(n):             # <<<<<<<<<<<<<<
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 */
  __pyx_t_12 = __pyx_v_n;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":746
 *   # initialise particle positions:
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]             # <<<<<<<<<<<<<<
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_xs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":747
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]             # <<<<<<<<<<<<<<
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 747, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    (__pyx_v_ys[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":748
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]             # <<<<<<<<<<<<<<
 *     rs[i] = <double>radii[i]
 * 
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_zs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":749
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]             # <<<<<<<<<<<<<<
 * 
 *   # and add them to the container:
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_radii, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 749, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_rs[__pyx_v_i]) = ((double)__pyx_t_18);
  }

  /* "vorostereology/voroplusplus.pyx":752
 * 
 *   # and add them to the container:
 *   put_particles(container, n, xs, ys, zs, rs)             # <<<<<<<<<<<<<<
 * 
 *   # now compute the tessellation:
 */
  put_particles(__pyx_v_container, __pyx_v_n, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs, __pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":755
 * 
 *   # now compute the tessellation:
 *   result = compute_section(container, n, <double>coeffs[0], <double>coeffs[1], <double>coeffs[2],             # <<<<<<<<<<<<<<
 *     <double>offset[0], <double>offset[1], <double>offset[2])
 *   voronoi_cells = result.first
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_coeffs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_coeffs, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_coeffs, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":756
 *   # now compute the tessellation:
 *   result = compute_section(container, n, <double>coeffs[0], <double>coeffs[1], <double>coeffs[2],
 *     <double>offset[0], <double>offset[1], <double>offset[2])             # <<<<<<<<<<<<<<
 *   voronoi_cells = result.first
 *   section_indices = result.second
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_offset, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_offset, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_offset, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 756, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":755
 * 
 *   # now compute the tessellation:
 *   result = compute_section(container, n, <double>coeffs[0], <double>coeffs[1], <double>coeffs[2],             # <<<<<<<<<<<<<<
 *     <double>offset[0], <double>offset[1], <double>offset[2])
 *   voronoi_cells = result.first
 */
  __pyx_v_result = compute_section(__pyx_v_container, __pyx_v_n, ((double)__pyx_t_18), ((double)__pyx_t_17), ((double)__pyx_t_16), ((double)__pyx_t_15), ((double)__pyx_t_14), ((double)__pyx_t_13));

  /* "vorostereology/voroplusplus.pyx":757
 *   result = compute_section(container, n, <double>coeffs[0], <double>coeffs[1], <double>coeffs[2],
 *     <double>offset[0], <double>offset[1], <double>offset[2])
 *   voronoi_cells = result.first             # <<<<<<<<<<<<<<
 *   section_indices = result.second
 * 
 */
  __pyx_t_26 = __pyx_v_result.first;
  __pyx_v_voronoi_cells = __pyx_t_26;

  /* "vorostereology/voroplusplus.pyx":758
 *     <double>offset[0], <double>offset[1], <double>offset[2])
 *   voronoi_cells = result.first
 *   section_indices = result.second             # <<<<<<<<<<<<<<
 * 
 *   # extract the Voronoi cells into python objects:
 */
  __pyx_t_27 = __pyx_v_result.second;
  __pyx_v_section_indices = __pyx_t_27;

  /* "vorostereology/voroplusplus.pyx":762
 *   # extract the Voronoi cells into python objects:
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL             # <<<<<<<<<<<<<<
 *   cdef vector[int]* vptr = NULL
 *   vertices_3d = []
 */
  __pyx_v_lists = NULL;

  /* "vorostereology/voroplusplus.pyx":763
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL
 *   cdef vector[int]* vptr = NULL             # <<<<<<<<<<<<<<
 *   vertices_3d = []
 *   section_areas = np.zeros(len(section_indices))
 */
  __pyx_v_vptr = NULL;

  /* "vorostereology/voroplusplus.pyx":764
 *   cdef void** lists = NULL
 *   cdef vector[int]* vptr = NULL
 *   vertices_3d = []             # <<<<<<<<<<<<<<
 *   section_areas = np.zeros(len(section_indices))
 * 
 */
  __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 764, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v_vertices_3d = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":765
 *   cdef vector[int]* vptr = NULL
 *   vertices_3d = []
 *   section_areas = np.zeros(len(section_indices))             # <<<<<<<<<<<<<<
 * 
 *   for i in range(len(section_indices)):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __pyx_convert_vector_to_py_int(__pyx_v_section_indices); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_12 = PyObject_Length(__pyx_t_8); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyInt_FromSsize_t(__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_10 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_2, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_section_areas = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":767
 *   section_areas = np.zeros(len(section_indices))
 * 
 *   for i in range(len(section_indices)):             # <<<<<<<<<<<<<<
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[section_indices[i]], xs[section_indices[i]], ys[section_indices[i]], zs[section_indices[i]])
 *     cell_vertices = []
 */
  __pyx_t_10 = __pyx_convert_vector_to_py_int(__pyx_v_section_indices); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 767, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":768
 * 
 *   for i in range(len(section_indices)):
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[section_indices[i]], xs[section_indices[i]], ys[section_indices[i]], zs[section_indices[i]])             # <<<<<<<<<<<<<<
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 */
    __pyx_v_vertex_positions = cell_get_vertex_positions((__pyx_v_voronoi_cells[(__pyx_v_section_indices[__pyx_v_i])]), (__pyx_v_xs[(__pyx_v_section_indices[__pyx_v_i])]), (__pyx_v_ys[(__pyx_v_section_indices[__pyx_v_i])]), (__pyx_v_zs[(__pyx_v_section_indices[__pyx_v_i])]));

    /* "vorostereology/voroplusplus.pyx":769
 *   for i in range(len(section_indices)):
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[section_indices[i]], xs[section_indices[i]], ys[section_indices[i]], zs[section_indices[i]])
 *     cell_vertices = []             # <<<<<<<<<<<<<<
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([
 */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_cell_vertices, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":770
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[section_indices[i]], xs[section_indices[i]], ys[section_indices[i]], zs[section_indices[i]])
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):             # <<<<<<<<<<<<<<
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),
 */
    __pyx_t_28 = ((Py_ssize_t)(__pyx_v_vertex_positions.size() / 3));
    __pyx_t_29 = __pyx_t_28;
    for (__pyx_t_30 = 0; __pyx_t_30 < __pyx_t_29; __pyx_t_30+=1) {
      __pyx_v_j = __pyx_t_30;

      /* "vorostereology/voroplusplus.pyx":772
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j + 1]),
 *         float(vertex_positions[3 * j + 2])
 */
      __pyx_t_4 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[(3 * __pyx_v_j)]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 772, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "vorostereology/voroplusplus.pyx":773
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j + 2])
 *       ]))
 */
      __pyx_t_8 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[((3 * __pyx_v_j) + 1)]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 773, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "vorostereology/voroplusplus.pyx":774
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),
 *         float(vertex_positions[3 * j + 2])             # <<<<<<<<<<<<<<
 *       ]))
 * 
 */
      __pyx_t_2 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[((3 * __pyx_v_j) + 2)]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 774, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "vorostereology/voroplusplus.pyx":771
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),
 */
      __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 771, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
      __pyx_t_4 = 0;
      __pyx_t_8 = 0;
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_v_vector_class);
      __pyx_t_2 = __pyx_v_vector_class; __pyx_t_8 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_10 = (__pyx_t_8) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_8, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 771, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_31 = __Pyx_PyList_Append(__pyx_v_cell_vertices, __pyx_t_10); if (unlikely(__pyx_t_31 == ((int)-1))) __PYX_ERR(0, 771, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }

    /* "vorostereology/voroplusplus.pyx":777
 *       ]))
 * 
 *     lists = cell_get_faces(voronoi_cells[section_indices[i]])             # <<<<<<<<<<<<<<
 * 
 *     faces_areas = cell_get_areas(voronoi_cells[section_indices[i]])
 */
    __pyx_v_lists = cell_get_faces((__pyx_v_voronoi_cells[(__pyx_v_section_indices[__pyx_v_i])]));

    /* "vorostereology/voroplusplus.pyx":779
 *     lists = cell_get_faces(voronoi_cells[section_indices[i]])
 * 
 *     faces_areas = cell_get_areas(voronoi_cells[section_indices[i]])             # <<<<<<<<<<<<<<
 *     j=0
 *     while lists[j] != NULL:
 */
    __pyx_v_faces_areas = cell_get_areas((__pyx_v_voronoi_cells[(__pyx_v_section_indices[__pyx_v_i])]));

    /* "vorostereology/voroplusplus.pyx":780
 * 
 *     faces_areas = cell_get_areas(voronoi_cells[section_indices[i]])
 *     j=0             # <<<<<<<<<<<<<<
 *     while lists[j] != NULL:
 *       face_vertices = []
 */
    __pyx_v_j = 0;

    /* "vorostereology/voroplusplus.pyx":781
 *     faces_areas = cell_get_areas(voronoi_cells[section_indices[i]])
 *     j=0
 *     while lists[j] != NULL:             # <<<<<<<<<<<<<<
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]
 */
    while (1) {
      __pyx_t_7 = (((__pyx_v_lists[__pyx_v_j]) != NULL) != 0);
      if (!__pyx_t_7) break;

      /* "vorostereology/voroplusplus.pyx":782
 *     j=0
 *     while lists[j] != NULL:
 *       face_vertices = []             # <<<<<<<<<<<<<<
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):
 */
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 782, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_face_vertices, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "vorostereology/voroplusplus.pyx":783
 *     while lists[j] != NULL:
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]             # <<<<<<<<<<<<<<
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))
 */
      __pyx_v_vptr = ((std::vector<int>  *)(__pyx_v_lists[__pyx_v_j]));

      /* "vorostereology/voroplusplus.pyx":784
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):             # <<<<<<<<<<<<<<
 *         face_vertices.append(int(deref(vptr)[k]))
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:
 */
      __pyx_t_32 = (__pyx_v_vptr->size() - 1);
      __pyx_t_33 = __pyx_t_32;
      for (__pyx_t_34 = 0; __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
        __pyx_v_k = __pyx_t_34;

        /* "vorostereology/voroplusplus.pyx":785
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))             # <<<<<<<<<<<<<<
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:
 *         section_areas[i] = faces_areas[j]
 */
        __pyx_t_10 = __Pyx_PyInt_From_int(((*__pyx_v_vptr)[__pyx_v_k])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 785, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 785, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_31 = __Pyx_PyList_Append(__pyx_v_face_vertices, __pyx_t_2); if (unlikely(__pyx_t_31 == ((int)-1))) __PYX_ERR(0, 785, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "vorostereology/voroplusplus.pyx":786
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:             # <<<<<<<<<<<<<<
 *         section_areas[i] = faces_areas[j]
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(((*__pyx_v_vptr)[(__pyx_v_vptr->size() - 1)])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_n + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_10, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 786, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {

        /* "vorostereology/voroplusplus.pyx":787
 *         face_vertices.append(int(deref(vptr)[k]))
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:
 *         section_areas[i] = faces_areas[j]             # <<<<<<<<<<<<<<
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 *       del vptr
 */
        __pyx_t_3 = PyFloat_FromDouble((__pyx_v_faces_areas[__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 787, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(__Pyx_SetItemInt(__pyx_v_section_areas, __pyx_v_i, __pyx_t_3, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1) < 0)) __PYX_ERR(0, 787, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "vorostereology/voroplusplus.pyx":788
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:
 *         section_areas[i] = faces_areas[j]
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])             # <<<<<<<<<<<<<<
 *       del vptr
 *       j += 1
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_2, __pyx_v_cell_vertices) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_cell_vertices);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_v_face_vertices);
        __Pyx_GIVEREF(__pyx_v_face_vertices);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_face_vertices);
        __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_intc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_31 = __Pyx_PyList_Append(__pyx_v_vertices_3d, __pyx_t_8); if (unlikely(__pyx_t_31 == ((int)-1))) __PYX_ERR(0, 788, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "vorostereology/voroplusplus.pyx":786
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:             # <<<<<<<<<<<<<<
 *         section_areas[i] = faces_areas[j]
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 */
      }

      /* "vorostereology/voroplusplus.pyx":789
 *         section_areas[i] = faces_areas[j]
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 *       del vptr             # <<<<<<<<<<<<<<
 *       j += 1
 * 
 */
      delete __pyx_v_vptr;

      /* "vorostereology/voroplusplus.pyx":790
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 *       del vptr
 *       j += 1             # <<<<<<<<<<<<<<
 * 
 *     free(lists)
 */
      __pyx_v_j = (__pyx_v_j + 1);
    }

    /* "vorostereology/voroplusplus.pyx":792
 *       j += 1
 * 
 *     free(lists)             # <<<<<<<<<<<<<<
 * 
 *   duplicates = set()
 */
    free(__pyx_v_lists);
  }

  /* "vorostereology/voroplusplus.pyx":794
 *     free(lists)
 * 
 *   duplicates = set()             # <<<<<<<<<<<<<<
 *   idx_sort = np.argsort(section_areas)
 *   sorted_areas = section_areas[idx_sort]
 */
  __pyx_t_8 = PySet_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_duplicates = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":795
 * 
 *   duplicates = set()
 *   idx_sort = np.argsort(section_areas)             # <<<<<<<<<<<<<<
 *   sorted_areas = section_areas[idx_sort]
 *   sorted_indices = idx_sort[idx_sort]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_argsort); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_v_section_areas) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_section_areas);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_idx_sort = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":796
 *   duplicates = set()
 *   idx_sort = np.argsort(section_areas)
 *   sorted_areas = section_areas[idx_sort]             # <<<<<<<<<<<<<<
 *   sorted_indices = idx_sort[idx_sort]
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_section_areas, __pyx_v_idx_sort); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_sorted_areas = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":797
 *   idx_sort = np.argsort(section_areas)
 *   sorted_areas = section_areas[idx_sort]
 *   sorted_indices = idx_sort[idx_sort]             # <<<<<<<<<<<<<<
 * 
 *   vals, idx_start, count = np.unique(sorted_areas, return_counts=True, return_index=True)
 */
  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_idx_sort, __pyx_v_idx_sort); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_v_sorted_indices = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":799
 *   sorted_indices = idx_sort[idx_sort]
 * 
 *   vals, idx_start, count = np.unique(sorted_areas, return_counts=True, return_index=True)             # <<<<<<<<<<<<<<
 * 
 *   for i, first_occurrence in enumerate(idx_start):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_unique); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_v_sorted_areas);
  __Pyx_GIVEREF(__pyx_v_sorted_areas);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_sorted_areas);
  __pyx_t_11 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_return_counts, Py_True) < 0) __PYX_ERR(0, 799, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_11, __pyx_n_s_return_index, Py_True) < 0) __PYX_ERR(0, 799, __pyx_L1_error)
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, __pyx_t_11); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
    PyObject* sequence = __pyx_t_10;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 3)) {
      if (size > 3) __Pyx_RaiseTooManyValuesError(3);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 799, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_11 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 2); 
    } else {
      __pyx_t_11 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 2); 
    }
    __Pyx_INCREF(__pyx_t_11);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_11 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_2 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_35 = Py_TYPE(__pyx_t_2)->tp_iternext;
    index = 0; __pyx_t_11 = __pyx_t_35(__pyx_t_2); if (unlikely(!__pyx_t_11)) goto __pyx_L21_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_11);
    index = 1; __pyx_t_8 = __pyx_t_35(__pyx_t_2); if (unlikely(!__pyx_t_8)) goto __pyx_L21_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_8);
    index = 2; __pyx_t_3 = __pyx_t_35(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L21_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_35(__pyx_t_2), 3) < 0) __PYX_ERR(0, 799, __pyx_L1_error)
    __pyx_t_35 = NULL;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    goto __pyx_L22_unpacking_done;
    __pyx_L21_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_35 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 799, __pyx_L1_error)
    __pyx_L22_unpacking_done:;
  }
  __pyx_v_vals = __pyx_t_11;
  __pyx_t_11 = 0;
  __pyx_v_idx_start = __pyx_t_8;
  __pyx_t_8 = 0;
  __pyx_v_count = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "vorostereology/voroplusplus.pyx":801
 *   vals, idx_start, count = np.unique(sorted_areas, return_counts=True, return_index=True)
 * 
 *   for i, first_occurrence in enumerate(idx_start):             # <<<<<<<<<<<<<<
 *     if count[i] > 1:
 *       for p in range(first_occurrence, first_occurrence + count[i]):
 */
  __pyx_t_12 = 0;
  if (likely(PyList_CheckExact(__pyx_v_idx_start)) || PyTuple_CheckExact(__pyx_v_idx_start)) {
    __pyx_t_10 = __pyx_v_idx_start; __Pyx_INCREF(__pyx_t_10); __pyx_t_1 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_idx_start); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 801, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_6 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 801, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_6)) {
      if (likely(PyList_CheckExact(__pyx_t_10))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 801, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_10, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 801, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_1); __Pyx_INCREF(__pyx_t_3); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 801, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_10, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 801, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_6(__pyx_t_10);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 801, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_first_occurrence, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_v_i = __pyx_t_12;
    __pyx_t_12 = (__pyx_t_12 + 1);

    /* "vorostereology/voroplusplus.pyx":802
 * 
 *   for i, first_occurrence in enumerate(idx_start):
 *     if count[i] > 1:             # <<<<<<<<<<<<<<
 *       for p in range(first_occurrence, first_occurrence + count[i]):
 *         for q in range(p+1, first_occurrence + count[i]):
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_count, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_3, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_7) {

      /* "vorostereology/voroplusplus.pyx":803
 *   for i, first_occurrence in enumerate(idx_start):
 *     if count[i] > 1:
 *       for p in range(first_occurrence, first_occurrence + count[i]):             # <<<<<<<<<<<<<<
 *         for q in range(p+1, first_occurrence + count[i]):
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_count, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = PyNumber_Add(__pyx_v_first_occurrence, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_v_first_occurrence);
      __Pyx_GIVEREF(__pyx_v_first_occurrence);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_first_occurrence);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_8 = __pyx_t_3; __Pyx_INCREF(__pyx_t_8); __pyx_t_25 = 0;
        __pyx_t_36 = NULL;
      } else {
        __pyx_t_25 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_36 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_36)) __PYX_ERR(0, 803, __pyx_L1_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_36)) {
          if (likely(PyList_CheckExact(__pyx_t_8))) {
            if (__pyx_t_25 >= PyList_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_25); __Pyx_INCREF(__pyx_t_3); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 803, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_25 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_25); __Pyx_INCREF(__pyx_t_3); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 803, __pyx_L1_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_8, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 803, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_36(__pyx_t_8);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 803, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "vorostereology/voroplusplus.pyx":804
 *     if count[i] > 1:
 *       for p in range(first_occurrence, first_occurrence + count[i]):
 *         for q in range(p+1, first_occurrence + count[i]):             # <<<<<<<<<<<<<<
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *             if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 */
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_p, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_count, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_2 = PyNumber_Add(__pyx_v_first_occurrence, __pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_2);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_2);
        __pyx_t_3 = 0;
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_11, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
          __pyx_t_11 = __pyx_t_2; __Pyx_INCREF(__pyx_t_11); __pyx_t_28 = 0;
          __pyx_t_37 = NULL;
        } else {
          __pyx_t_28 = -1; __pyx_t_11 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 804, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_37 = Py_TYPE(__pyx_t_11)->tp_iternext; if (unlikely(!__pyx_t_37)) __PYX_ERR(0, 804, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        for (;;) {
          if (likely(!__pyx_t_37)) {
            if (likely(PyList_CheckExact(__pyx_t_11))) {
              if (__pyx_t_28 >= PyList_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyList_GET_ITEM(__pyx_t_11, __pyx_t_28); __Pyx_INCREF(__pyx_t_2); __pyx_t_28++; if (unlikely(0 < 0)) __PYX_ERR(0, 804, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_11, __pyx_t_28); __pyx_t_28++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            } else {
              if (__pyx_t_28 >= PyTuple_GET_SIZE(__pyx_t_11)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_11, __pyx_t_28); __Pyx_INCREF(__pyx_t_2); __pyx_t_28++; if (unlikely(0 < 0)) __PYX_ERR(0, 804, __pyx_L1_error)
              #else
              __pyx_t_2 = PySequence_ITEM(__pyx_t_11, __pyx_t_28); __pyx_t_28++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              #endif
            }
          } else {
            __pyx_t_2 = __pyx_t_37(__pyx_t_11);
            if (unlikely(!__pyx_t_2)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 804, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_2);
          __pyx_t_2 = 0;

          /* "vorostereology/voroplusplus.pyx":805
 *       for p in range(first_occurrence, first_occurrence + count[i]):
 *         for q in range(p+1, first_occurrence + count[i]):
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:             # <<<<<<<<<<<<<<
 *             if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 *               duplicates.add(sorted_indices[q])
 */
          __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_vertices_3d, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_q); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_vertices_3d, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = PyObject_RichCompare(__pyx_t_2, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 805, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (__pyx_t_7) {

            /* "vorostereology/voroplusplus.pyx":806
 *         for q in range(p+1, first_occurrence + count[i]):
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *             if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):             # <<<<<<<<<<<<<<
 *               duplicates.add(sorted_indices[q])
 * 
 */
            __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_same_rows); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 806, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 806, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_vertices_3d, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 806, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 806, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __pyx_t_38 = __Pyx_PyObject_GetItem(__pyx_v_vertices_3d, __pyx_t_2); if (unlikely(!__pyx_t_38)) __PYX_ERR(0, 806, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_38);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_2 = NULL;
            __pyx_t_24 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_2)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_2);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_24 = 1;
              }
            }
            #if CYTHON_FAST_PYCALL
            if (PyFunction_Check(__pyx_t_3)) {
              PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_5, __pyx_t_38};
              __pyx_t_4 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
            } else
            #endif
            #if CYTHON_FAST_PYCCALL
            if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
              PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_5, __pyx_t_38};
              __pyx_t_4 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
              __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              __Pyx_DECREF(__pyx_t_38); __pyx_t_38 = 0;
            } else
            #endif
            {
              __pyx_t_39 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 806, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_39);
              if (__pyx_t_2) {
                __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_39, 0, __pyx_t_2); __pyx_t_2 = NULL;
              }
              __Pyx_GIVEREF(__pyx_t_5);
              PyTuple_SET_ITEM(__pyx_t_39, 0+__pyx_t_24, __pyx_t_5);
              __Pyx_GIVEREF(__pyx_t_38);
              PyTuple_SET_ITEM(__pyx_t_39, 1+__pyx_t_24, __pyx_t_38);
              __pyx_t_5 = 0;
              __pyx_t_38 = 0;
              __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_39, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 806, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 806, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (__pyx_t_7) {

              /* "vorostereology/voroplusplus.pyx":807
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *             if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 *               duplicates.add(sorted_indices[q])             # <<<<<<<<<<<<<<
 * 
 *   vertices_3d = [vertices_3d[j] for j in range(len(vertices_3d)) if j not in duplicates]
 */
              __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_q); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 807, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_4);
              __pyx_t_31 = PySet_Add(__pyx_v_duplicates, __pyx_t_4); if (unlikely(__pyx_t_31 == ((int)-1))) __PYX_ERR(0, 807, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

              /* "vorostereology/voroplusplus.pyx":806
 *         for q in range(p+1, first_occurrence + count[i]):
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *             if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):             # <<<<<<<<<<<<<<
 *               duplicates.add(sorted_indices[q])
 * 
 */
            }

            /* "vorostereology/voroplusplus.pyx":805
 *       for p in range(first_occurrence, first_occurrence + count[i]):
 *         for q in range(p+1, first_occurrence + count[i]):
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:             # <<<<<<<<<<<<<<
 *             if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 *               duplicates.add(sorted_indices[q])
 */
          }

          /* "vorostereology/voroplusplus.pyx":804
 *     if count[i] > 1:
 *       for p in range(first_occurrence, first_occurrence + count[i]):
 *         for q in range(p+1, first_occurrence + count[i]):             # <<<<<<<<<<<<<<
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *             if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 */
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "vorostereology/voroplusplus.pyx":803
 *   for i, first_occurrence in enumerate(idx_start):
 *     if count[i] > 1:
 *       for p in range(first_occurrence, first_occurrence + count[i]):             # <<<<<<<<<<<<<<
 *         for q in range(p+1, first_occurrence + count[i]):
 *           if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 */
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "vorostereology/voroplusplus.pyx":802
 * 
 *   for i, first_occurrence in enumerate(idx_start):
 *     if count[i] > 1:             # <<<<<<<<<<<<<<
 *       for p in range(first_occurrence, first_occurrence + count[i]):
 *         for q in range(p+1, first_occurrence + count[i]):
 */
    }

    /* "vorostereology/voroplusplus.pyx":801
 *   vals, idx_start, count = np.unique(sorted_areas, return_counts=True, return_index=True)
 * 
 *   for i, first_occurrence in enumerate(idx_start):             # <<<<<<<<<<<<<<
 *     if count[i] > 1:
 *       for p in range(first_occurrence, first_occurrence + count[i]):
 */
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":809
 *               duplicates.add(sorted_indices[q])
 * 
 *   vertices_3d = [vertices_3d[j] for j in range(len(vertices_3d)) if j not in duplicates]             # <<<<<<<<<<<<<<
 *   section_indices_ = np.delete(section_indices, list(duplicates))
 *   section_areas_ = np.delete(section_areas, list(duplicates))
 */
  { /* enter inner scope */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 809, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyList_GET_SIZE(__pyx_v_vertices_3d); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 809, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_12;
    for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
      __pyx_8genexpr6__pyx_v_j = __pyx_t_25;
      __pyx_t_8 = PyInt_FromSsize_t(__pyx_8genexpr6__pyx_v_j); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 809, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = (__Pyx_PySet_ContainsTF(__pyx_t_8, __pyx_v_duplicates, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 809, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_40 = (__pyx_t_7 != 0);
      if (__pyx_t_40) {
        __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_vertices_3d, __pyx_8genexpr6__pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 809, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 809, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
    }
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_vertices_3d, ((PyObject*)__pyx_t_10));
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":810
 * 
 *   vertices_3d = [vertices_3d[j] for j in range(len(vertices_3d)) if j not in duplicates]
 *   section_indices_ = np.delete(section_indices, list(duplicates))             # <<<<<<<<<<<<<<
 *   section_areas_ = np.delete(section_areas, list(duplicates))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_delete); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __pyx_convert_vector_to_py_int(__pyx_v_section_indices); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_4 = PySequence_List(__pyx_v_duplicates); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 810, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_24 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_24 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_4};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
    PyObject *__pyx_temp[3] = {__pyx_t_3, __pyx_t_8, __pyx_t_4};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else
  #endif
  {
    __pyx_t_39 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_39);
    if (__pyx_t_3) {
      __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_39, 0, __pyx_t_3); __pyx_t_3 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_39, 0+__pyx_t_24, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_39, 1+__pyx_t_24, __pyx_t_4);
    __pyx_t_8 = 0;
    __pyx_t_4 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_39, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 810, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
  }
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_v_section_indices_ = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":811
 *   vertices_3d = [vertices_3d[j] for j in range(len(vertices_3d)) if j not in duplicates]
 *   section_indices_ = np.delete(section_indices, list(duplicates))
 *   section_areas_ = np.delete(section_areas, list(duplicates))             # <<<<<<<<<<<<<<
 * 
 *   if coeffs[0] == 0 and coeffs[1] == 0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_39 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_delete); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PySequence_List(__pyx_v_duplicates); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_4 = NULL;
  __pyx_t_24 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_39))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_39);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_39);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_39, function);
      __pyx_t_24 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_39)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_section_areas, __pyx_t_11};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_39, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_39)) {
    PyObject *__pyx_temp[3] = {__pyx_t_4, __pyx_v_section_areas, __pyx_t_11};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_39, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  } else
  #endif
  {
    __pyx_t_8 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_4) {
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
    }
    __Pyx_INCREF(__pyx_v_section_areas);
    __Pyx_GIVEREF(__pyx_v_section_areas);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_24, __pyx_v_section_areas);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_24, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_39, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 811, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
  __pyx_v_section_areas_ = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":813
 *   section_areas_ = np.delete(section_areas, list(duplicates))
 * 
 *   if coeffs[0] == 0 and coeffs[1] == 0:             # <<<<<<<<<<<<<<
 *     cross_section_2d = [np.array(cell)[:, 0:2] for cell in vertices_3d]
 *   else:
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_coeffs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_39 = __Pyx_PyInt_EqObjC(__pyx_t_10, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_39); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_40 = __pyx_t_7;
    goto __pyx_L36_bool_binop_done;
  }
  __pyx_t_39 = __Pyx_GetItemInt(__pyx_v_coeffs, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_39);
  __pyx_t_10 = __Pyx_PyInt_EqObjC(__pyx_t_39, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_40 = __pyx_t_7;
  __pyx_L36_bool_binop_done:;
  if (__pyx_t_40) {

    /* "vorostereology/voroplusplus.pyx":814
 * 
 *   if coeffs[0] == 0 and coeffs[1] == 0:
 *     cross_section_2d = [np.array(cell)[:, 0:2] for cell in vertices_3d]             # <<<<<<<<<<<<<<
 *   else:
 *     cross_section_2d = transform_2d(vertices_3d, coeffs, offset)
 */
    { /* enter inner scope */
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 814, __pyx_L40_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_39 = __pyx_v_vertices_3d; __Pyx_INCREF(__pyx_t_39); __pyx_t_12 = 0;
      for (;;) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_39)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_8 = PyList_GET_ITEM(__pyx_t_39, __pyx_t_12); __Pyx_INCREF(__pyx_t_8); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 814, __pyx_L40_error)
        #else
        __pyx_t_8 = PySequence_ITEM(__pyx_t_39, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 814, __pyx_L40_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_cell, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 814, __pyx_L40_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L40_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        __pyx_t_8 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_11, __pyx_8genexpr7__pyx_v_cell) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_8genexpr7__pyx_v_cell);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 814, __pyx_L40_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_tuple__14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 814, __pyx_L40_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 814, __pyx_L40_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_cell); __pyx_8genexpr7__pyx_v_cell = 0;
      goto __pyx_L43_exit_scope;
      __pyx_L40_error:;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_cell); __pyx_8genexpr7__pyx_v_cell = 0;
      goto __pyx_L1_error;
      __pyx_L43_exit_scope:;
    } /* exit inner scope */
    __pyx_v_cross_section_2d = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":813
 *   section_areas_ = np.delete(section_areas, list(duplicates))
 * 
 *   if coeffs[0] == 0 and coeffs[1] == 0:             # <<<<<<<<<<<<<<
 *     cross_section_2d = [np.array(cell)[:, 0:2] for cell in vertices_3d]
 *   else:
 */
    goto __pyx_L35;
  }

  /* "vorostereology/voroplusplus.pyx":816
 *     cross_section_2d = [np.array(cell)[:, 0:2] for cell in vertices_3d]
 *   else:
 *     cross_section_2d = transform_2d(vertices_3d, coeffs, offset)             # <<<<<<<<<<<<<<
 * 
 *   # finally, tidy up.
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_39, __pyx_n_s_transform_2d); if (unlikely(!__pyx_t_39)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_39);
    __pyx_t_4 = NULL;
    __pyx_t_24 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_39))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_39);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_39);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_39, function);
        __pyx_t_24 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_39)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_vertices_3d, __pyx_v_coeffs, __pyx_v_offset};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_39, __pyx_temp+1-__pyx_t_24, 3+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_39)) {
      PyObject *__pyx_temp[4] = {__pyx_t_4, __pyx_v_vertices_3d, __pyx_v_coeffs, __pyx_v_offset};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_39, __pyx_temp+1-__pyx_t_24, 3+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    {
      __pyx_t_8 = PyTuple_New(3+__pyx_t_24); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (__pyx_t_4) {
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_4); __pyx_t_4 = NULL;
      }
      __Pyx_INCREF(__pyx_v_vertices_3d);
      __Pyx_GIVEREF(__pyx_v_vertices_3d);
      PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_24, __pyx_v_vertices_3d);
      __Pyx_INCREF(__pyx_v_coeffs);
      __Pyx_GIVEREF(__pyx_v_coeffs);
      PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_24, __pyx_v_coeffs);
      __Pyx_INCREF(__pyx_v_offset);
      __Pyx_GIVEREF(__pyx_v_offset);
      PyTuple_SET_ITEM(__pyx_t_8, 2+__pyx_t_24, __pyx_v_offset);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_39, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 816, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_39); __pyx_t_39 = 0;
    __pyx_v_cross_section_2d = __pyx_t_10;
    __pyx_t_10 = 0;
  }
  __pyx_L35:;

  /* "vorostereology/voroplusplus.pyx":819
 * 
 *   # finally, tidy up.
 *   dispose_all(container, voronoi_cells, n)             # <<<<<<<<<<<<<<
 *   free(xs)
 *   free(ys)
 */
  dispose_all(__pyx_v_container, __pyx_v_voronoi_cells, __pyx_v_n);

  /* "vorostereology/voroplusplus.pyx":820
 *   # finally, tidy up.
 *   dispose_all(container, voronoi_cells, n)
 *   free(xs)             # <<<<<<<<<<<<<<
 *   free(ys)
 *   free(zs)
 */
  free(__pyx_v_xs);

  /* "vorostereology/voroplusplus.pyx":821
 *   dispose_all(container, voronoi_cells, n)
 *   free(xs)
 *   free(ys)             # <<<<<<<<<<<<<<
 *   free(zs)
 *   free(rs)
 */
  free(__pyx_v_ys);

  /* "vorostereology/voroplusplus.pyx":822
 *   free(xs)
 *   free(ys)
 *   free(zs)             # <<<<<<<<<<<<<<
 *   free(rs)
 *   return {"3d": vertices_3d, "original_indices": section_indices_, "areas": section_areas_, "2d": cross_section_2d, "polygons_indices": section_indices_}
 */
  free(__pyx_v_zs);

  /* "vorostereology/voroplusplus.pyx":823
 *   free(ys)
 *   free(zs)
 *   free(rs)             # <<<<<<<<<<<<<<
 *   return {"3d": vertices_3d, "original_indices": section_indices_, "areas": section_areas_, "2d": cross_section_2d, "polygons_indices": section_indices_}
 * 
 */
  free(__pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":824
 *   free(zs)
 *   free(rs)
 *   return {"3d": vertices_3d, "original_indices": section_indices_, "areas": section_areas_, "2d": cross_section_2d, "polygons_indices": section_indices_}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 824, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_10, __pyx_kp_u_3d, __pyx_v_vertices_3d) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_original_indices, __pyx_v_section_indices_) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_areas, __pyx_v_section_areas_) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_10, __pyx_kp_u_2d, __pyx_v_cross_section_2d) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_polygons_indices, __pyx_v_section_indices_) < 0) __PYX_ERR(0, 824, __pyx_L1_error)
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":697
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_section(coeffs, offset, points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_38);
  __Pyx_XDECREF(__pyx_t_39);
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_voronoi_section", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vector_class);
  __Pyx_XDECREF(__pyx_v_blocks);
  __Pyx_XDECREF(__pyx_v_vertices_3d);
  __Pyx_XDECREF(__pyx_v_section_areas);
  __Pyx_XDECREF(__pyx_v_cell_vertices);
  __Pyx_XDECREF(__pyx_v_face_vertices);
  __Pyx_XDECREF(__pyx_v_duplicates);
  __Pyx_XDECREF(__pyx_v_idx_sort);
  __Pyx_XDECREF(__pyx_v_sorted_areas);
  __Pyx_XDECREF(__pyx_v_sorted_indices);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_idx_start);
  __Pyx_XDECREF(__pyx_v_count);
  __Pyx_XDECREF(__pyx_v_first_occurrence);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_section_indices_);
  __Pyx_XDECREF(__pyx_v_section_areas_);
  __Pyx_XDECREF(__pyx_v_cross_section_2d);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_p);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_cell);
  __Pyx_XDECREF(__pyx_v_radii);
  __Pyx_XDECREF(__pyx_v_periodic);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":828
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_section_bounded(coeffs, offset, points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_21compute_voronoi_section_bounded(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_21compute_voronoi_section_bounded = {"compute_voronoi_section_bounded", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_21compute_voronoi_section_bounded, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_21compute_voronoi_section_bounded(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_coeffs = 0;
  PyObject *__pyx_v_offset = 0;
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_limits = 0;
  PyObject *__pyx_v_dispersion = 0;
  PyObject *__pyx_v_cells_to_compute = 0;
  PyObject *__pyx_v_x_outside = 0;
  PyObject *__pyx_v_y_outside = 0;
  PyObject *__pyx_v_z_outside = 0;
  PyObject *__pyx_v_radii = 0;
  PyObject *__pyx_v_periodic = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("compute_voronoi_section_bounded (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_coeffs,&__pyx_n_s_offset,&__pyx_n_s_points,&__pyx_n_s_limits,&__pyx_n_s_dispersion,&__pyx_n_s_cells_to_compute,&__pyx_n_s_x_outside,&__pyx_n_s_y_outside,&__pyx_n_s_z_outside,&__pyx_n_s_radii,&__pyx_n_s_periodic,0};
    PyObject* values[11] = {0,0,0,0,0,0,0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case 11: values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_coeffs)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_offset)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 1); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 2); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limits)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 3); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dispersion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 4); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_cells_to_compute)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 5); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_x_outside)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 6); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (likely((values[7] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_y_outside)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 7); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (likely((values[8] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_z_outside)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 8); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (likely((values[9] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radii)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 9); __PYX_ERR(0, 828, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (likely((values[10] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodic)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, 10); __PYX_ERR(0, 828, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "compute_voronoi_section_bounded") < 0)) __PYX_ERR(0, 828, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 11) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
      values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
      values[6] = PyTuple_GET_ITEM(__pyx_args, 6);
      values[7] = PyTuple_GET_ITEM(__pyx_args, 7);
      values[8] = PyTuple_GET_ITEM(__pyx_args, 8);
      values[9] = PyTuple_GET_ITEM(__pyx_args, 9);
      values[10] = PyTuple_GET_ITEM(__pyx_args, 10);
    }
    __pyx_v_coeffs = values[0];
    __pyx_v_offset = values[1];
    __pyx_v_points = values[2];
    __pyx_v_limits = values[3];
    __pyx_v_dispersion = values[4];
    __pyx_v_cells_to_compute = values[5];
    __pyx_v_x_outside = values[6];
    __pyx_v_y_outside = values[7];
    __pyx_v_z_outside = values[8];
    __pyx_v_radii = values[9];
    __pyx_v_periodic = values[10];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("compute_voronoi_section_bounded", 1, 11, 11, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 828, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_voronoi_section_bounded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_20compute_voronoi_section_bounded(__pyx_self, __pyx_v_coeffs, __pyx_v_offset, __pyx_v_points, __pyx_v_limits, __pyx_v_dispersion, __pyx_v_cells_to_compute, __pyx_v_x_outside, __pyx_v_y_outside, __pyx_v_z_outside, __pyx_v_radii, __pyx_v_periodic);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_20compute_voronoi_section_bounded(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_coeffs, PyObject *__pyx_v_offset, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_cells_to_compute, PyObject *__pyx_v_x_outside, PyObject *__pyx_v_y_outside, PyObject *__pyx_v_z_outside, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic) {
  Py_ssize_t __pyx_v_n;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  double *__pyx_v_xs;
  double *__pyx_v_ys;
  double *__pyx_v_zs;
  double *__pyx_v_rs;
  void **__pyx_v_voronoi_cells;
  PyObject *__pyx_v_vector_class = NULL;
  PyObject *__pyx_v_blocks = NULL;
  void *__pyx_v_container;
  std::pair<void **,std::vector<int> >  __pyx_v_result;
  std::vector<int>  __pyx_v_section_indices;
  std::vector<double>  __pyx_v_vertex_positions;
  void **__pyx_v_lists;
  std::vector<int>  *__pyx_v_vptr;
  PyObject *__pyx_v_vertices_3d = NULL;
  PyObject *__pyx_v_section_areas = NULL;
  PyObject *__pyx_v_cell_vertices = NULL;
  std::vector<double>  __pyx_v_faces_areas;
  PyObject *__pyx_v_face_vertices = NULL;
  std::vector<int> ::size_type __pyx_v_k;
  PyObject *__pyx_v_duplicates = NULL;
  PyObject *__pyx_v_idx_sort = NULL;
  PyObject *__pyx_v_sorted_areas = NULL;
  PyObject *__pyx_v_sorted_indices = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_idx_start = NULL;
  PyObject *__pyx_v_count = NULL;
  PyObject *__pyx_v_pairs = NULL;
  PyObject *__pyx_v_first_occurrence = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_section_indices_ = NULL;
  PyObject *__pyx_v_section_areas_ = NULL;
  PyObject *__pyx_v_cross_section_2d = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_p = NULL;
  Py_ssize_t __pyx_8genexpr9__pyx_v_j;
  PyObject *__pyx_9genexpr10__pyx_v_cell = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  double __pyx_t_17;
  double __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  std::vector<bool>  __pyx_t_26;
  std::vector<bool>  __pyx_t_27;
  std::vector<bool>  __pyx_t_28;
  std::vector<bool>  __pyx_t_29;
  void **__pyx_t_30;
  std::vector<int>  __pyx_t_31;
  Py_ssize_t __pyx_t_32;
  Py_ssize_t __pyx_t_33;
  Py_ssize_t __pyx_t_34;
  int __pyx_t_35;
  std::vector<int> ::size_type __pyx_t_36;
  std::vector<int> ::size_type __pyx_t_37;
  std::vector<int> ::size_type __pyx_t_38;
  PyObject *(*__pyx_t_39)(PyObject *);
  PyObject *(*__pyx_t_40)(PyObject *);
  PyObject *(*__pyx_t_41)(PyObject *);
  int __pyx_t_42;
  int __pyx_t_43;
  PyObject *__pyx_t_44 = NULL;
  PyObject *__pyx_t_45 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("compute_voronoi_section_bounded", 0);
  __Pyx_INCREF(__pyx_v_radii);
  __Pyx_INCREF(__pyx_v_periodic);

  /* "vorostereology/voroplusplus.pyx":830
 * def compute_voronoi_section_bounded(coeffs, offset, points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):
 * 
 *   cdef Py_ssize_t n = len(points), i, j             # <<<<<<<<<<<<<<
 *   cdef double *xs
 *   cdef double *ys
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 830, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "vorostereology/voroplusplus.pyx":837
 *   cdef void** voronoi_cells
 * 
 *   vector_class = get_constructor(points[0])             # <<<<<<<<<<<<<<
 * 
 *   periodic = [1 if p else 0 for p in periodic]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_constructor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_vector_class = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":839
 *   vector_class = get_constructor(points[0])
 * 
 *   periodic = [1 if p else 0 for p in periodic]             # <<<<<<<<<<<<<<
 * 
 *   # we must make sure we have at least one block, or voro++ will segfault when
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_v_periodic)) || PyTuple_CheckExact(__pyx_v_periodic)) {
      __pyx_t_3 = __pyx_v_periodic; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_periodic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 839, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 839, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 839, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 839, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 839, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 839, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 839, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_8genexpr8__pyx_v_p); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 839, __pyx_L5_error)
      if (__pyx_t_7) {
        __Pyx_INCREF(__pyx_int_1);
        __pyx_t_4 = __pyx_int_1;
      } else {
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_4 = __pyx_int_0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 839, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_p); __pyx_8genexpr8__pyx_v_p = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_p); __pyx_8genexpr8__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_periodic, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":845
 * 
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = 1;
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 845, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vorostereology/voroplusplus.pyx":846
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 *   ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = 1;
  __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_4 = __pyx_t_8;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":847
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])             # <<<<<<<<<<<<<<
 *   ]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_3, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = 1;
  __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_10, __pyx_t_11, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 847, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_10);
    __pyx_t_8 = __pyx_t_10;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":844
 *   # we look for cells.
 * 
 *   blocks = [             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_blocks = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":851
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_radii); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 851, __pyx_L1_error)
  __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 851, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_1 != __pyx_t_12) != 0);
  if (__pyx_t_7) {

    /* "vorostereology/voroplusplus.pyx":852
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):
 *     radii = [dispersion / 10.] * len(points)             # <<<<<<<<<<<<<<
 * 
 *   # build the container object
 */
    __pyx_t_10 = __Pyx_PyFloat_TrueDivideObjC(__pyx_v_dispersion, __pyx_float_10_, 10., 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 852, __pyx_L1_error)
    __pyx_t_8 = PyList_New(1 * ((__pyx_t_12<0) ? 0:__pyx_t_12)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_12; __pyx_temp++) {
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_8, __pyx_temp, __pyx_t_10);
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_radii, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vorostereology/voroplusplus.pyx":851
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":856
 *   # build the container object
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],             # <<<<<<<<<<<<<<
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":857
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],
 *     <double>limits[0][1],             # <<<<<<<<<<<<<<
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":858
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 *     <double>limits[1][0],             # <<<<<<<<<<<<<<
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":859
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 *     <double>limits[1][1],             # <<<<<<<<<<<<<<
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":860
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 *     <double>limits[2][0],             # <<<<<<<<<<<<<<
 *     <double>limits[2][1],
 *     <int>blocks[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":861
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 *     <double>limits[2][1],             # <<<<<<<<<<<<<<
 *     <int>blocks[0],
 *     <int>blocks[1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 861, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":862
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 *     <int>blocks[0],             # <<<<<<<<<<<<<<
 *     <int>blocks[1],
 *     <int>blocks[2],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 862, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":863
 *     <double>limits[2][1],
 *     <int>blocks[0],
 *     <int>blocks[1],             # <<<<<<<<<<<<<<
 *     <int>blocks[2],
 *     <int>periodic[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":864
 *     <int>blocks[0],
 *     <int>blocks[1],
 *     <int>blocks[2],             # <<<<<<<<<<<<<<
 *     <int>periodic[0],
 *     <int>periodic[1],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":865
 *     <int>blocks[1],
 *     <int>blocks[2],
 *     <int>periodic[0],             # <<<<<<<<<<<<<<
 *     <int>periodic[1],
 *     <int>periodic[2]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":866
 *     <int>blocks[2],
 *     <int>periodic[0],
 *     <int>periodic[1],             # <<<<<<<<<<<<<<
 *     <int>periodic[2]
 *   )
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 866, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":867
 *     <int>periodic[0],
 *     <int>periodic[1],
 *     <int>periodic[2]             # <<<<<<<<<<<<<<
 *   )
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":855
 * 
 *   # build the container object
 *   cdef void* container = container_poly_create(             # <<<<<<<<<<<<<<
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 */
  __pyx_v_container = container_poly_create(((double)__pyx_t_13), ((double)__pyx_t_14), ((double)__pyx_t_15), ((double)__pyx_t_16), ((double)__pyx_t_17), ((double)__pyx_t_18), ((int)__pyx_t_19), ((int)__pyx_t_20), ((int)__pyx_t_21), ((int)__pyx_t_22), ((int)__pyx_t_23), ((int)__pyx_t_24));

  /* "vorostereology/voroplusplus.pyx":870
 *   )
 * 
 *   xs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_xs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":871
 * 
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_ys = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":872
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   rs = <double*>malloc(sizeof(double) * n)
 * 
 */
  __pyx_v_zs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":873
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 * 
 *   # initialise particle positions:
 */
  __pyx_v_rs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":876
 * 
 *   # initialise particle positions:
 *   for i in range(n):             # <<<<<<<<<<<<<<
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 */
  __pyx_t_12 = __pyx_v_n;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":877
 *   # initialise particle positions:
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]             # <<<<<<<<<<<<<<
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 877, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 877, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_xs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":878
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]             # <<<<<<<<<<<<<<
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    (__pyx_v_ys[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":879
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]             # <<<<<<<<<<<<<<
 *     rs[i] = <double>radii[i]
 * 
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 879, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_zs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":880
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]             # <<<<<<<<<<<<<<
 * 
 *   # and add them to the container:
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_radii, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_rs[__pyx_v_i]) = ((double)__pyx_t_18);
  }

  /* "vorostereology/voroplusplus.pyx":883
 * 
 *   # and add them to the container:
 *   put_particles(container, n, xs, ys, zs, rs)             # <<<<<<<<<<<<<<
 * 
 *   # now compute the tessellation:
 */
  put_particles(__pyx_v_container, __pyx_v_n, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs, __pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":886
 * 
 *   # now compute the tessellation:
 *   result = compute_section_bounded(container, n, <double>coeffs[0], <double>coeffs[1], <double>coeffs[2],             # <<<<<<<<<<<<<<
 *     <double>offset[0], <double>offset[1], <double>offset[2], cells_to_compute, x_outside, y_outside, z_outside)
 *   voronoi_cells = result.first
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_coeffs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_coeffs, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_coeffs, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 886, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":887
 *   # now compute the tessellation:
 *   result = compute_section_bounded(container, n, <double>coeffs[0], <double>coeffs[1], <double>coeffs[2],
 *     <double>offset[0], <double>offset[1], <double>offset[2], cells_to_compute, x_outside, y_outside, z_outside)             # <<<<<<<<<<<<<<
 *   voronoi_cells = result.first
 *   section_indices = result.second
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_offset, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_offset, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_offset, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_26 = __pyx_convert_vector_from_py_bool(__pyx_v_cells_to_compute); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
  __pyx_t_27 = __pyx_convert_vector_from_py_bool(__pyx_v_x_outside); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
  __pyx_t_28 = __pyx_convert_vector_from_py_bool(__pyx_v_y_outside); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)
  __pyx_t_29 = __pyx_convert_vector_from_py_bool(__pyx_v_z_outside); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 887, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":886
 * 
 *   # now compute the tessellation:
 *   result = compute_section_bounded(container, n, <double>coeffs[0], <double>coeffs[1], <double>coeffs[2],             # <<<<<<<<<<<<<<
 *     <double>offset[0], <double>offset[1], <double>offset[2], cells_to_compute, x_outside, y_outside, z_outside)
 *   voronoi_cells = result.first
 */
  __pyx_v_result = compute_section_bounded(__pyx_v_container, __pyx_v_n, ((double)__pyx_t_18), ((double)__pyx_t_17), ((double)__pyx_t_16), ((double)__pyx_t_15), ((double)__pyx_t_14), ((double)__pyx_t_13), __pyx_t_26, __pyx_t_27, __pyx_t_28, __pyx_t_29);

  /* "vorostereology/voroplusplus.pyx":888
 *   result = compute_section_bounded(container, n, <double>coeffs[0], <double>coeffs[1], <double>coeffs[2],
 *     <double>offset[0], <double>offset[1], <double>offset[2], cells_to_compute, x_outside, y_outside, z_outside)
 *   voronoi_cells = result.first             # <<<<<<<<<<<<<<
 *   section_indices = result.second
 * 
 */
  __pyx_t_30 = __pyx_v_result.first;
  __pyx_v_voronoi_cells = __pyx_t_30;

  /* "vorostereology/voroplusplus.pyx":889
 *     <double>offset[0], <double>offset[1], <double>offset[2], cells_to_compute, x_outside, y_outside, z_outside)
 *   voronoi_cells = result.first
 *   section_indices = result.second             # <<<<<<<<<<<<<<
 * 
 *   # extract the Voronoi cells into python objects:
 */
  __pyx_t_31 = __pyx_v_result.second;
  __pyx_v_section_indices = __pyx_t_31;

  /* "vorostereology/voroplusplus.pyx":893
 *   # extract the Voronoi cells into python objects:
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL             # <<<<<<<<<<<<<<
 *   cdef vector[int]* vptr = NULL
 *   vertices_3d = []
 */
  __pyx_v_lists = NULL;

  /* "vorostereology/voroplusplus.pyx":894
 *   cdef vector[double] vertex_positions
 *   cdef void** lists = NULL
 *   cdef vector[int]* vptr = NULL             # <<<<<<<<<<<<<<
 *   vertices_3d = []
 *   section_areas = [] # np.zeros(len(section_indices))
 */
  __pyx_v_vptr = NULL;

  /* "vorostereology/voroplusplus.pyx":895
 *   cdef void** lists = NULL
 *   cdef vector[int]* vptr = NULL
 *   vertices_3d = []             # <<<<<<<<<<<<<<
 *   section_areas = [] # np.zeros(len(section_indices))
 * 
 */
  __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v_vertices_3d = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":896
 *   cdef vector[int]* vptr = NULL
 *   vertices_3d = []
 *   section_areas = [] # np.zeros(len(section_indices))             # <<<<<<<<<<<<<<
 * 
 *   for i in range(len(section_indices)):
 */
  __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v_section_areas = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":898
 *   section_areas = [] # np.zeros(len(section_indices))
 * 
 *   for i in range(len(section_indices)):             # <<<<<<<<<<<<<<
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[section_indices[i]], xs[section_indices[i]], ys[section_indices[i]], zs[section_indices[i]])
 *     cell_vertices = []
 */
  __pyx_t_10 = __pyx_convert_vector_to_py_int(__pyx_v_section_indices); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_12 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":899
 * 
 *   for i in range(len(section_indices)):
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[section_indices[i]], xs[section_indices[i]], ys[section_indices[i]], zs[section_indices[i]])             # <<<<<<<<<<<<<<
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 */
    __pyx_v_vertex_positions = cell_get_vertex_positions((__pyx_v_voronoi_cells[(__pyx_v_section_indices[__pyx_v_i])]), (__pyx_v_xs[(__pyx_v_section_indices[__pyx_v_i])]), (__pyx_v_ys[(__pyx_v_section_indices[__pyx_v_i])]), (__pyx_v_zs[(__pyx_v_section_indices[__pyx_v_i])]));

    /* "vorostereology/voroplusplus.pyx":900
 *   for i in range(len(section_indices)):
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[section_indices[i]], xs[section_indices[i]], ys[section_indices[i]], zs[section_indices[i]])
 *     cell_vertices = []             # <<<<<<<<<<<<<<
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([
 */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 900, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_cell_vertices, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":901
 *     vertex_positions = cell_get_vertex_positions(voronoi_cells[section_indices[i]], xs[section_indices[i]], ys[section_indices[i]], zs[section_indices[i]])
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):             # <<<<<<<<<<<<<<
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),
 */
    __pyx_t_32 = ((Py_ssize_t)(__pyx_v_vertex_positions.size() / 3));
    __pyx_t_33 = __pyx_t_32;
    for (__pyx_t_34 = 0; __pyx_t_34 < __pyx_t_33; __pyx_t_34+=1) {
      __pyx_v_j = __pyx_t_34;

      /* "vorostereology/voroplusplus.pyx":903
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j + 1]),
 *         float(vertex_positions[3 * j + 2])
 */
      __pyx_t_8 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[(3 * __pyx_v_j)]))); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 903, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);

      /* "vorostereology/voroplusplus.pyx":904
 *       cell_vertices.append(vector_class([
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j + 2])
 *       ]))
 */
      __pyx_t_4 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[((3 * __pyx_v_j) + 1)]))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 904, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);

      /* "vorostereology/voroplusplus.pyx":905
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),
 *         float(vertex_positions[3 * j + 2])             # <<<<<<<<<<<<<<
 *       ]))
 * 
 */
      __pyx_t_2 = PyFloat_FromDouble(((double)(__pyx_v_vertex_positions[((3 * __pyx_v_j) + 2)]))); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "vorostereology/voroplusplus.pyx":902
 *     cell_vertices = []
 *     for j in range(<Py_ssize_t>(vertex_positions.size() // 3)):
 *       cell_vertices.append(vector_class([             # <<<<<<<<<<<<<<
 *         float(vertex_positions[3 * j]),
 *         float(vertex_positions[3 * j + 1]),
 */
      __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 902, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_8);
      PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_4);
      PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_2);
      PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
      __pyx_t_8 = 0;
      __pyx_t_4 = 0;
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_v_vector_class);
      __pyx_t_2 = __pyx_v_vector_class; __pyx_t_4 = NULL;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
        }
      }
      __pyx_t_10 = (__pyx_t_4) ? __Pyx_PyObject_Call2Args(__pyx_t_2, __pyx_t_4, __pyx_t_3) : __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 902, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_35 = __Pyx_PyList_Append(__pyx_v_cell_vertices, __pyx_t_10); if (unlikely(__pyx_t_35 == ((int)-1))) __PYX_ERR(0, 902, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }

    /* "vorostereology/voroplusplus.pyx":908
 *       ]))
 * 
 *     lists = cell_get_faces(voronoi_cells[section_indices[i]])             # <<<<<<<<<<<<<<
 * 
 *     faces_areas = cell_get_areas(voronoi_cells[section_indices[i]])
 */
    __pyx_v_lists = cell_get_faces((__pyx_v_voronoi_cells[(__pyx_v_section_indices[__pyx_v_i])]));

    /* "vorostereology/voroplusplus.pyx":910
 *     lists = cell_get_faces(voronoi_cells[section_indices[i]])
 * 
 *     faces_areas = cell_get_areas(voronoi_cells[section_indices[i]])             # <<<<<<<<<<<<<<
 *     j=0
 *     while lists[j] != NULL:
 */
    __pyx_v_faces_areas = cell_get_areas((__pyx_v_voronoi_cells[(__pyx_v_section_indices[__pyx_v_i])]));

    /* "vorostereology/voroplusplus.pyx":911
 * 
 *     faces_areas = cell_get_areas(voronoi_cells[section_indices[i]])
 *     j=0             # <<<<<<<<<<<<<<
 *     while lists[j] != NULL:
 *       face_vertices = []
 */
    __pyx_v_j = 0;

    /* "vorostereology/voroplusplus.pyx":912
 *     faces_areas = cell_get_areas(voronoi_cells[section_indices[i]])
 *     j=0
 *     while lists[j] != NULL:             # <<<<<<<<<<<<<<
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]
 */
    while (1) {
      __pyx_t_7 = (((__pyx_v_lists[__pyx_v_j]) != NULL) != 0);
      if (!__pyx_t_7) break;

      /* "vorostereology/voroplusplus.pyx":913
 *     j=0
 *     while lists[j] != NULL:
 *       face_vertices = []             # <<<<<<<<<<<<<<
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):
 */
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 913, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_XDECREF_SET(__pyx_v_face_vertices, ((PyObject*)__pyx_t_10));
      __pyx_t_10 = 0;

      /* "vorostereology/voroplusplus.pyx":914
 *     while lists[j] != NULL:
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]             # <<<<<<<<<<<<<<
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))
 */
      __pyx_v_vptr = ((std::vector<int>  *)(__pyx_v_lists[__pyx_v_j]));

      /* "vorostereology/voroplusplus.pyx":915
 *       face_vertices = []
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):             # <<<<<<<<<<<<<<
 *         face_vertices.append(int(deref(vptr)[k]))
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:
 */
      __pyx_t_36 = (__pyx_v_vptr->size() - 1);
      __pyx_t_37 = __pyx_t_36;
      for (__pyx_t_38 = 0; __pyx_t_38 < __pyx_t_37; __pyx_t_38+=1) {
        __pyx_v_k = __pyx_t_38;

        /* "vorostereology/voroplusplus.pyx":916
 *       vptr = <vector[int]*>lists[j]
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))             # <<<<<<<<<<<<<<
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:
 *         section_areas.append(faces_areas[j])
 */
        __pyx_t_10 = __Pyx_PyInt_From_int(((*__pyx_v_vptr)[__pyx_v_k])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 916, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 916, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_35 = __Pyx_PyList_Append(__pyx_v_face_vertices, __pyx_t_2); if (unlikely(__pyx_t_35 == ((int)-1))) __PYX_ERR(0, 916, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }

      /* "vorostereology/voroplusplus.pyx":917
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:             # <<<<<<<<<<<<<<
 *         section_areas.append(faces_areas[j])
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 */
      __pyx_t_2 = __Pyx_PyInt_From_int(((*__pyx_v_vptr)[(__pyx_v_vptr->size() - 1)])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_CallOneArg(((PyObject *)(&PyInt_Type)), __pyx_t_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyInt_FromSsize_t((__pyx_v_n + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_10, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 917, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_7) {

        /* "vorostereology/voroplusplus.pyx":918
 *         face_vertices.append(int(deref(vptr)[k]))
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:
 *         section_areas.append(faces_areas[j])             # <<<<<<<<<<<<<<
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 *       del vptr
 */
        __pyx_t_3 = PyFloat_FromDouble((__pyx_v_faces_areas[__pyx_v_j])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_35 = __Pyx_PyObject_Append(__pyx_v_section_areas, __pyx_t_3); if (unlikely(__pyx_t_35 == ((int)-1))) __PYX_ERR(0, 918, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "vorostereology/voroplusplus.pyx":919
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:
 *         section_areas.append(faces_areas[j])
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])             # <<<<<<<<<<<<<<
 *       del vptr
 *       j += 1
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_array); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_10);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_10, function);
          }
        }
        __pyx_t_3 = (__pyx_t_2) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_2, __pyx_v_cell_vertices) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_v_cell_vertices);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_np); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_array); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_v_face_vertices);
        __Pyx_GIVEREF(__pyx_v_face_vertices);
        PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_face_vertices);
        __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_np); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_intc); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_dtype, __pyx_t_11) < 0) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_10, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_3, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_35 = __Pyx_PyList_Append(__pyx_v_vertices_3d, __pyx_t_4); if (unlikely(__pyx_t_35 == ((int)-1))) __PYX_ERR(0, 919, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "vorostereology/voroplusplus.pyx":917
 *       for k in range(vptr.size() - 1):
 *         face_vertices.append(int(deref(vptr)[k]))
 *       if int(deref(vptr)[vptr.size() - 1]) == n+1:             # <<<<<<<<<<<<<<
 *         section_areas.append(faces_areas[j])
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 */
      }

      /* "vorostereology/voroplusplus.pyx":920
 *         section_areas.append(faces_areas[j])
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 *       del vptr             # <<<<<<<<<<<<<<
 *       j += 1
 * 
 */
      delete __pyx_v_vptr;

      /* "vorostereology/voroplusplus.pyx":921
 *         vertices_3d.append(np.array(cell_vertices)[np.array(face_vertices, dtype=np.intc)])
 *       del vptr
 *       j += 1             # <<<<<<<<<<<<<<
 * 
 *     free(lists)
 */
      __pyx_v_j = (__pyx_v_j + 1);
    }

    /* "vorostereology/voroplusplus.pyx":923
 *       j += 1
 * 
 *     free(lists)             # <<<<<<<<<<<<<<
 * 
 *   section_areas = np.array(section_areas)
 */
    free(__pyx_v_lists);
  }

  /* "vorostereology/voroplusplus.pyx":925
 *     free(lists)
 * 
 *   section_areas = np.array(section_areas)             # <<<<<<<<<<<<<<
 *   duplicates = set()
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_array); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_4 = (__pyx_t_11) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_11, __pyx_v_section_areas) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_section_areas);
  __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF_SET(__pyx_v_section_areas, __pyx_t_4);
  __pyx_t_4 = 0;

  /* "vorostereology/voroplusplus.pyx":926
 * 
 *   section_areas = np.array(section_areas)
 *   duplicates = set()             # <<<<<<<<<<<<<<
 * 
 *   if len(section_areas) > 0:
 */
  __pyx_t_4 = PySet_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_duplicates = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "vorostereology/voroplusplus.pyx":928
 *   duplicates = set()
 * 
 *   if len(section_areas) > 0:             # <<<<<<<<<<<<<<
 *     idx_sort = np.argsort(section_areas)
 *     sorted_areas = section_areas[idx_sort]
 */
  __pyx_t_12 = PyObject_Length(__pyx_v_section_areas); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 928, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_12 > 0) != 0);
  if (__pyx_t_7) {

    /* "vorostereology/voroplusplus.pyx":929
 * 
 *   if len(section_areas) > 0:
 *     idx_sort = np.argsort(section_areas)             # <<<<<<<<<<<<<<
 *     sorted_areas = section_areas[idx_sort]
 *     sorted_indices = idx_sort[idx_sort]
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_argsort); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_11, function);
      }
    }
    __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_11, __pyx_t_3, __pyx_v_section_areas) : __Pyx_PyObject_CallOneArg(__pyx_t_11, __pyx_v_section_areas);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_v_idx_sort = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "vorostereology/voroplusplus.pyx":930
 *   if len(section_areas) > 0:
 *     idx_sort = np.argsort(section_areas)
 *     sorted_areas = section_areas[idx_sort]             # <<<<<<<<<<<<<<
 *     sorted_indices = idx_sort[idx_sort]
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_section_areas, __pyx_v_idx_sort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_sorted_areas = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "vorostereology/voroplusplus.pyx":931
 *     idx_sort = np.argsort(section_areas)
 *     sorted_areas = section_areas[idx_sort]
 *     sorted_indices = idx_sort[idx_sort]             # <<<<<<<<<<<<<<
 * 
 *     vals, idx_start, count = np.unique(sorted_areas, return_counts=True, return_index=True)
 */
    __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_v_idx_sort, __pyx_v_idx_sort); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_sorted_indices = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "vorostereology/voroplusplus.pyx":933
 *     sorted_indices = idx_sort[idx_sort]
 * 
 *     vals, idx_start, count = np.unique(sorted_areas, return_counts=True, return_index=True)             # <<<<<<<<<<<<<<
 * 
 *     pairs = set()
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_unique); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_sorted_areas);
    __Pyx_GIVEREF(__pyx_v_sorted_areas);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_sorted_areas);
    __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return_counts, Py_True) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return_index, Py_True) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if ((likely(PyTuple_CheckExact(__pyx_t_10))) || (PyList_CheckExact(__pyx_t_10))) {
      PyObject* sequence = __pyx_t_10;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 3)) {
        if (size > 3) __Pyx_RaiseTooManyValuesError(3);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 933, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_11 = PyTuple_GET_ITEM(sequence, 2); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_11 = PyList_GET_ITEM(sequence, 2); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_11);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_2 = PyObject_GetIter(__pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 933, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_39 = Py_TYPE(__pyx_t_2)->tp_iternext;
      index = 0; __pyx_t_3 = __pyx_t_39(__pyx_t_2); if (unlikely(!__pyx_t_3)) goto __pyx_L22_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_4 = __pyx_t_39(__pyx_t_2); if (unlikely(!__pyx_t_4)) goto __pyx_L22_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 2; __pyx_t_11 = __pyx_t_39(__pyx_t_2); if (unlikely(!__pyx_t_11)) goto __pyx_L22_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_11);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_39(__pyx_t_2), 3) < 0) __PYX_ERR(0, 933, __pyx_L1_error)
      __pyx_t_39 = NULL;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L23_unpacking_done;
      __pyx_L22_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_39 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 933, __pyx_L1_error)
      __pyx_L23_unpacking_done:;
    }
    __pyx_v_vals = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_idx_start = __pyx_t_4;
    __pyx_t_4 = 0;
    __pyx_v_count = __pyx_t_11;
    __pyx_t_11 = 0;

    /* "vorostereology/voroplusplus.pyx":935
 *     vals, idx_start, count = np.unique(sorted_areas, return_counts=True, return_index=True)
 * 
 *     pairs = set()             # <<<<<<<<<<<<<<
 * 
 *     for i, first_occurrence in enumerate(idx_start):
 */
    __pyx_t_10 = PySet_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 935, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_v_pairs = ((PyObject*)__pyx_t_10);
    __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":937
 *     pairs = set()
 * 
 *     for i, first_occurrence in enumerate(idx_start):             # <<<<<<<<<<<<<<
 *       if count[i] > 1:
 *         for p in range(first_occurrence, first_occurrence + count[i]):
 */
    __pyx_t_12 = 0;
    if (likely(PyList_CheckExact(__pyx_v_idx_start)) || PyTuple_CheckExact(__pyx_v_idx_start)) {
      __pyx_t_10 = __pyx_v_idx_start; __Pyx_INCREF(__pyx_t_10); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_v_idx_start); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 937, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_6 = Py_TYPE(__pyx_t_10)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 937, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_10))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_1); __Pyx_INCREF(__pyx_t_11); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 937, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_1); __Pyx_INCREF(__pyx_t_11); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 937, __pyx_L1_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_10, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 937, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_6(__pyx_t_10);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 937, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      __Pyx_XDECREF_SET(__pyx_v_first_occurrence, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_v_i = __pyx_t_12;
      __pyx_t_12 = (__pyx_t_12 + 1);

      /* "vorostereology/voroplusplus.pyx":938
 * 
 *     for i, first_occurrence in enumerate(idx_start):
 *       if count[i] > 1:             # <<<<<<<<<<<<<<
 *         for p in range(first_occurrence, first_occurrence + count[i]):
 *           for q in range(p+1, first_occurrence + count[i]):
 */
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_count, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 938, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_11, __pyx_int_1, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 938, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 938, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_7) {

        /* "vorostereology/voroplusplus.pyx":939
 *     for i, first_occurrence in enumerate(idx_start):
 *       if count[i] > 1:
 *         for p in range(first_occurrence, first_occurrence + count[i]):             # <<<<<<<<<<<<<<
 *           for q in range(p+1, first_occurrence + count[i]):
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_count, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = PyNumber_Add(__pyx_v_first_occurrence, __pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_v_first_occurrence);
        __Pyx_GIVEREF(__pyx_v_first_occurrence);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_first_occurrence);
        __Pyx_GIVEREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_11);
        __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_4, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 939, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
          __pyx_t_4 = __pyx_t_11; __Pyx_INCREF(__pyx_t_4); __pyx_t_25 = 0;
          __pyx_t_40 = NULL;
        } else {
          __pyx_t_25 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_40 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_40)) __PYX_ERR(0, 939, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        for (;;) {
          if (likely(!__pyx_t_40)) {
            if (likely(PyList_CheckExact(__pyx_t_4))) {
              if (__pyx_t_25 >= PyList_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_25); __Pyx_INCREF(__pyx_t_11); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 939, __pyx_L1_error)
              #else
              __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 939, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            } else {
              if (__pyx_t_25 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_25); __Pyx_INCREF(__pyx_t_11); __pyx_t_25++; if (unlikely(0 < 0)) __PYX_ERR(0, 939, __pyx_L1_error)
              #else
              __pyx_t_11 = PySequence_ITEM(__pyx_t_4, __pyx_t_25); __pyx_t_25++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 939, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            }
          } else {
            __pyx_t_11 = __pyx_t_40(__pyx_t_4);
            if (unlikely(!__pyx_t_11)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 939, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_11);
          __pyx_t_11 = 0;

          /* "vorostereology/voroplusplus.pyx":940
 *       if count[i] > 1:
 *         for p in range(first_occurrence, first_occurrence + count[i]):
 *           for q in range(p+1, first_occurrence + count[i]):             # <<<<<<<<<<<<<<
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 */
          __pyx_t_11 = __Pyx_PyInt_AddObjC(__pyx_v_p, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 940, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_count, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 940, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = PyNumber_Add(__pyx_v_first_occurrence, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 940, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_11);
          PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_2);
          PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
          __pyx_t_11 = 0;
          __pyx_t_2 = 0;
          __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
            __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_32 = 0;
            __pyx_t_41 = NULL;
          } else {
            __pyx_t_32 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 940, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_41 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_41)) __PYX_ERR(0, 940, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          for (;;) {
            if (likely(!__pyx_t_41)) {
              if (likely(PyList_CheckExact(__pyx_t_3))) {
                if (__pyx_t_32 >= PyList_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_32); __Pyx_INCREF(__pyx_t_2); __pyx_t_32++; if (unlikely(0 < 0)) __PYX_ERR(0, 940, __pyx_L1_error)
                #else
                __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_32); __pyx_t_32++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
              } else {
                if (__pyx_t_32 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_32); __Pyx_INCREF(__pyx_t_2); __pyx_t_32++; if (unlikely(0 < 0)) __PYX_ERR(0, 940, __pyx_L1_error)
                #else
                __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_32); __pyx_t_32++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 940, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                #endif
              }
            } else {
              __pyx_t_2 = __pyx_t_41(__pyx_t_3);
              if (unlikely(!__pyx_t_2)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 940, __pyx_L1_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_2);
            }
            __Pyx_XDECREF_SET(__pyx_v_q, __pyx_t_2);
            __pyx_t_2 = 0;

            /* "vorostereology/voroplusplus.pyx":941
 *         for p in range(first_occurrence, first_occurrence + count[i]):
 *           for q in range(p+1, first_occurrence + count[i]):
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):             # <<<<<<<<<<<<<<
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *                 if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 */
            __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_INCREF(__pyx_v_q);
            __Pyx_GIVEREF(__pyx_v_q);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_q);
            __Pyx_INCREF(__pyx_v_p);
            __Pyx_GIVEREF(__pyx_v_p);
            PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_p);
            __pyx_t_42 = (__Pyx_PySet_ContainsTF(__pyx_t_2, __pyx_v_pairs, Py_NE)); if (unlikely(__pyx_t_42 < 0)) __PYX_ERR(0, 941, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_43 = (__pyx_t_42 != 0);
            if (__pyx_t_43) {
            } else {
              __pyx_t_7 = __pyx_t_43;
              goto __pyx_L32_bool_binop_done;
            }
            __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 941, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_INCREF(__pyx_v_p);
            __Pyx_GIVEREF(__pyx_v_p);
            PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_p);
            __Pyx_INCREF(__pyx_v_q);
            __Pyx_GIVEREF(__pyx_v_q);
            PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_q);
            __pyx_t_43 = (__Pyx_PySet_ContainsTF(__pyx_t_2, __pyx_v_pairs, Py_NE)); if (unlikely(__pyx_t_43 < 0)) __PYX_ERR(0, 941, __pyx_L1_error)
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __pyx_t_42 = (__pyx_t_43 != 0);
            __pyx_t_7 = __pyx_t_42;
            __pyx_L32_bool_binop_done:;
            if (__pyx_t_7) {

              /* "vorostereology/voroplusplus.pyx":942
 *           for q in range(p+1, first_occurrence + count[i]):
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:             # <<<<<<<<<<<<<<
 *                 if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 *                   duplicates.add(sorted_indices[q])
 */
              __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_vertices_3d, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 942, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_shape); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 942, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_2);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_q); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 942, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_vertices_3d, __pyx_t_11); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 942, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_shape); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 942, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_11);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = PyObject_RichCompare(__pyx_t_2, __pyx_t_11, Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 942, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
              __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 942, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (__pyx_t_7) {

                /* "vorostereology/voroplusplus.pyx":943
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *                 if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):             # <<<<<<<<<<<<<<
 *                   duplicates.add(sorted_indices[q])
 *               pairs.add((p, q))
 */
                __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_same_rows); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 943, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_11);
                __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_p); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 943, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_v_vertices_3d, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 943, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_q); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 943, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_2);
                __pyx_t_44 = __Pyx_PyObject_GetItem(__pyx_v_vertices_3d, __pyx_t_2); if (unlikely(!__pyx_t_44)) __PYX_ERR(0, 943, __pyx_L1_error)
                __Pyx_GOTREF(__pyx_t_44);
                __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
                __pyx_t_2 = NULL;
                __pyx_t_24 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
                  __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
                  if (likely(__pyx_t_2)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
                    __Pyx_INCREF(__pyx_t_2);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_11, function);
                    __pyx_t_24 = 1;
                  }
                }
                #if CYTHON_FAST_PYCALL
                if (PyFunction_Check(__pyx_t_11)) {
                  PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_5, __pyx_t_44};
                  __pyx_t_8 = __Pyx_PyFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 943, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_44); __pyx_t_44 = 0;
                } else
                #endif
                #if CYTHON_FAST_PYCCALL
                if (__Pyx_PyFastCFunction_Check(__pyx_t_11)) {
                  PyObject *__pyx_temp[3] = {__pyx_t_2, __pyx_t_5, __pyx_t_44};
                  __pyx_t_8 = __Pyx_PyCFunction_FastCall(__pyx_t_11, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 943, __pyx_L1_error)
                  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                  __Pyx_DECREF(__pyx_t_44); __pyx_t_44 = 0;
                } else
                #endif
                {
                  __pyx_t_45 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 943, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_45);
                  if (__pyx_t_2) {
                    __Pyx_GIVEREF(__pyx_t_2); PyTuple_SET_ITEM(__pyx_t_45, 0, __pyx_t_2); __pyx_t_2 = NULL;
                  }
                  __Pyx_GIVEREF(__pyx_t_5);
                  PyTuple_SET_ITEM(__pyx_t_45, 0+__pyx_t_24, __pyx_t_5);
                  __Pyx_GIVEREF(__pyx_t_44);
                  PyTuple_SET_ITEM(__pyx_t_45, 1+__pyx_t_24, __pyx_t_44);
                  __pyx_t_5 = 0;
                  __pyx_t_44 = 0;
                  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_t_45, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 943, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
                }
                __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
                __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 943, __pyx_L1_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                if (__pyx_t_7) {

                  /* "vorostereology/voroplusplus.pyx":944
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *                 if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 *                   duplicates.add(sorted_indices[q])             # <<<<<<<<<<<<<<
 *               pairs.add((p, q))
 * 
 */
                  __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_v_sorted_indices, __pyx_v_q); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 944, __pyx_L1_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __pyx_t_35 = PySet_Add(__pyx_v_duplicates, __pyx_t_8); if (unlikely(__pyx_t_35 == ((int)-1))) __PYX_ERR(0, 944, __pyx_L1_error)
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

                  /* "vorostereology/voroplusplus.pyx":943
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *                 if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):             # <<<<<<<<<<<<<<
 *                   duplicates.add(sorted_indices[q])
 *               pairs.add((p, q))
 */
                }

                /* "vorostereology/voroplusplus.pyx":942
 *           for q in range(p+1, first_occurrence + count[i]):
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:             # <<<<<<<<<<<<<<
 *                 if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 *                   duplicates.add(sorted_indices[q])
 */
              }

              /* "vorostereology/voroplusplus.pyx":945
 *                 if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 *                   duplicates.add(sorted_indices[q])
 *               pairs.add((p, q))             # <<<<<<<<<<<<<<
 * 
 *   vertices_3d = [vertices_3d[j] for j in range(len(vertices_3d)) if j not in duplicates]
 */
              __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 945, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_INCREF(__pyx_v_p);
              __Pyx_GIVEREF(__pyx_v_p);
              PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_v_p);
              __Pyx_INCREF(__pyx_v_q);
              __Pyx_GIVEREF(__pyx_v_q);
              PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_q);
              __pyx_t_35 = PySet_Add(__pyx_v_pairs, __pyx_t_8); if (unlikely(__pyx_t_35 == ((int)-1))) __PYX_ERR(0, 945, __pyx_L1_error)
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

              /* "vorostereology/voroplusplus.pyx":941
 *         for p in range(first_occurrence, first_occurrence + count[i]):
 *           for q in range(p+1, first_occurrence + count[i]):
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):             # <<<<<<<<<<<<<<
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 *                 if same_rows(vertices_3d[sorted_indices[p]], vertices_3d[sorted_indices[q]]):
 */
            }

            /* "vorostereology/voroplusplus.pyx":940
 *       if count[i] > 1:
 *         for p in range(first_occurrence, first_occurrence + count[i]):
 *           for q in range(p+1, first_occurrence + count[i]):             # <<<<<<<<<<<<<<
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):
 *               if vertices_3d[sorted_indices[p]].shape == vertices_3d[sorted_indices[q]].shape:
 */
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "vorostereology/voroplusplus.pyx":939
 *     for i, first_occurrence in enumerate(idx_start):
 *       if count[i] > 1:
 *         for p in range(first_occurrence, first_occurrence + count[i]):             # <<<<<<<<<<<<<<
 *           for q in range(p+1, first_occurrence + count[i]):
 *             if ((q, p) not in pairs) and ((p, q) not in pairs):
 */
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "vorostereology/voroplusplus.pyx":938
 * 
 *     for i, first_occurrence in enumerate(idx_start):
 *       if count[i] > 1:             # <<<<<<<<<<<<<<
 *         for p in range(first_occurrence, first_occurrence + count[i]):
 *           for q in range(p+1, first_occurrence + count[i]):
 */
      }

      /* "vorostereology/voroplusplus.pyx":937
 *     pairs = set()
 * 
 *     for i, first_occurrence in enumerate(idx_start):             # <<<<<<<<<<<<<<
 *       if count[i] > 1:
 *         for p in range(first_occurrence, first_occurrence + count[i]):
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":928
 *   duplicates = set()
 * 
 *   if len(section_areas) > 0:             # <<<<<<<<<<<<<<
 *     idx_sort = np.argsort(section_areas)
 *     sorted_areas = section_areas[idx_sort]
 */
  }

  /* "vorostereology/voroplusplus.pyx":947
 *               pairs.add((p, q))
 * 
 *   vertices_3d = [vertices_3d[j] for j in range(len(vertices_3d)) if j not in duplicates]             # <<<<<<<<<<<<<<
 *   section_indices_ = np.delete(section_indices, list(duplicates))
 *   section_areas_ = np.delete(section_areas, list(duplicates))
 */
  { /* enter inner scope */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyList_GET_SIZE(__pyx_v_vertices_3d); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 947, __pyx_L1_error)
    __pyx_t_1 = __pyx_t_12;
    for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
      __pyx_8genexpr9__pyx_v_j = __pyx_t_25;
      __pyx_t_4 = PyInt_FromSsize_t(__pyx_8genexpr9__pyx_v_j); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (__Pyx_PySet_ContainsTF(__pyx_t_4, __pyx_v_duplicates, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 947, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_42 = (__pyx_t_7 != 0);
      if (__pyx_t_42) {
        __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_vertices_3d, __pyx_8genexpr9__pyx_v_j, Py_ssize_t, 1, PyInt_FromSsize_t, 1, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 947, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
    }
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_vertices_3d, ((PyObject*)__pyx_t_10));
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":948
 * 
 *   vertices_3d = [vertices_3d[j] for j in range(len(vertices_3d)) if j not in duplicates]
 *   section_indices_ = np.delete(section_indices, list(duplicates))             # <<<<<<<<<<<<<<
 *   section_areas_ = np.delete(section_areas, list(duplicates))
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_np); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_delete); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __pyx_convert_vector_to_py_int(__pyx_v_section_indices); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PySequence_List(__pyx_v_duplicates); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_11 = NULL;
  __pyx_t_24 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_24 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_4, __pyx_t_8};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_3)) {
    PyObject *__pyx_temp[3] = {__pyx_t_11, __pyx_t_4, __pyx_t_8};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_3, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  } else
  #endif
  {
    __pyx_t_45 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_45);
    if (__pyx_t_11) {
      __Pyx_GIVEREF(__pyx_t_11); PyTuple_SET_ITEM(__pyx_t_45, 0, __pyx_t_11); __pyx_t_11 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_45, 0+__pyx_t_24, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_45, 1+__pyx_t_24, __pyx_t_8);
    __pyx_t_4 = 0;
    __pyx_t_8 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_45, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_section_indices_ = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":949
 *   vertices_3d = [vertices_3d[j] for j in range(len(vertices_3d)) if j not in duplicates]
 *   section_indices_ = np.delete(section_indices, list(duplicates))
 *   section_areas_ = np.delete(section_areas, list(duplicates))             # <<<<<<<<<<<<<<
 * 
 *   if coeffs[0] == 0 and coeffs[1] == 0:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_45 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_delete); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PySequence_List(__pyx_v_duplicates); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 949, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = NULL;
  __pyx_t_24 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_45))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_45);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_45);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_45, function);
      __pyx_t_24 = 1;
    }
  }
  #if CYTHON_FAST_PYCALL
  if (PyFunction_Check(__pyx_t_45)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_section_areas, __pyx_t_3};
    __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_45, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  #if CYTHON_FAST_PYCCALL
  if (__Pyx_PyFastCFunction_Check(__pyx_t_45)) {
    PyObject *__pyx_temp[3] = {__pyx_t_8, __pyx_v_section_areas, __pyx_t_3};
    __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_45, __pyx_temp+1-__pyx_t_24, 2+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else
  #endif
  {
    __pyx_t_4 = PyTuple_New(2+__pyx_t_24); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_section_areas);
    __Pyx_GIVEREF(__pyx_v_section_areas);
    PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_24, __pyx_v_section_areas);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_24, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_45, __pyx_t_4, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
  __pyx_v_section_areas_ = __pyx_t_10;
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":951
 *   section_areas_ = np.delete(section_areas, list(duplicates))
 * 
 *   if coeffs[0] == 0 and coeffs[1] == 0:             # <<<<<<<<<<<<<<
 *     cross_section_2d = [np.array(cell)[:, 0:2] for cell in vertices_3d]
 *   else:
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_coeffs, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_45 = __Pyx_PyInt_EqObjC(__pyx_t_10, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_45); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
  if (__pyx_t_7) {
  } else {
    __pyx_t_42 = __pyx_t_7;
    goto __pyx_L40_bool_binop_done;
  }
  __pyx_t_45 = __Pyx_GetItemInt(__pyx_v_coeffs, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_45);
  __pyx_t_10 = __Pyx_PyInt_EqObjC(__pyx_t_45, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 951, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_42 = __pyx_t_7;
  __pyx_L40_bool_binop_done:;
  if (__pyx_t_42) {

    /* "vorostereology/voroplusplus.pyx":952
 * 
 *   if coeffs[0] == 0 and coeffs[1] == 0:
 *     cross_section_2d = [np.array(cell)[:, 0:2] for cell in vertices_3d]             # <<<<<<<<<<<<<<
 *   else:
 *     cross_section_2d = transform_2d(vertices_3d, coeffs, offset)
 */
    { /* enter inner scope */
      __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 952, __pyx_L44_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_45 = __pyx_v_vertices_3d; __Pyx_INCREF(__pyx_t_45); __pyx_t_12 = 0;
      for (;;) {
        if (__pyx_t_12 >= PyList_GET_SIZE(__pyx_t_45)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_45, __pyx_t_12); __Pyx_INCREF(__pyx_t_4); __pyx_t_12++; if (unlikely(0 < 0)) __PYX_ERR(0, 952, __pyx_L44_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_45, __pyx_t_12); __pyx_t_12++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 952, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
        __Pyx_XDECREF_SET(__pyx_9genexpr10__pyx_v_cell, __pyx_t_4);
        __pyx_t_4 = 0;
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_np); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 952, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_array); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 952, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_9genexpr10__pyx_v_cell) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_9genexpr10__pyx_v_cell);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 952, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_4, __pyx_tuple__14); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 952, __pyx_L44_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 952, __pyx_L44_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
      __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_cell); __pyx_9genexpr10__pyx_v_cell = 0;
      goto __pyx_L47_exit_scope;
      __pyx_L44_error:;
      __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_cell); __pyx_9genexpr10__pyx_v_cell = 0;
      goto __pyx_L1_error;
      __pyx_L47_exit_scope:;
    } /* exit inner scope */
    __pyx_v_cross_section_2d = __pyx_t_10;
    __pyx_t_10 = 0;

    /* "vorostereology/voroplusplus.pyx":951
 *   section_areas_ = np.delete(section_areas, list(duplicates))
 * 
 *   if coeffs[0] == 0 and coeffs[1] == 0:             # <<<<<<<<<<<<<<
 *     cross_section_2d = [np.array(cell)[:, 0:2] for cell in vertices_3d]
 *   else:
 */
    goto __pyx_L39;
  }

  /* "vorostereology/voroplusplus.pyx":954
 *     cross_section_2d = [np.array(cell)[:, 0:2] for cell in vertices_3d]
 *   else:
 *     cross_section_2d = transform_2d(vertices_3d, coeffs, offset)             # <<<<<<<<<<<<<<
 * 
 *   # finally, tidy up.
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_45, __pyx_n_s_transform_2d); if (unlikely(!__pyx_t_45)) __PYX_ERR(0, 954, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_45);
    __pyx_t_8 = NULL;
    __pyx_t_24 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_45))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_45);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_45);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_45, function);
        __pyx_t_24 = 1;
      }
    }
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(__pyx_t_45)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_vertices_3d, __pyx_v_coeffs, __pyx_v_offset};
      __pyx_t_10 = __Pyx_PyFunction_FastCall(__pyx_t_45, __pyx_temp+1-__pyx_t_24, 3+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(__pyx_t_45)) {
      PyObject *__pyx_temp[4] = {__pyx_t_8, __pyx_v_vertices_3d, __pyx_v_coeffs, __pyx_v_offset};
      __pyx_t_10 = __Pyx_PyCFunction_FastCall(__pyx_t_45, __pyx_temp+1-__pyx_t_24, 3+__pyx_t_24); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_10);
    } else
    #endif
    {
      __pyx_t_4 = PyTuple_New(3+__pyx_t_24); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (__pyx_t_8) {
        __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8); __pyx_t_8 = NULL;
      }
      __Pyx_INCREF(__pyx_v_vertices_3d);
      __Pyx_GIVEREF(__pyx_v_vertices_3d);
      PyTuple_SET_ITEM(__pyx_t_4, 0+__pyx_t_24, __pyx_v_vertices_3d);
      __Pyx_INCREF(__pyx_v_coeffs);
      __Pyx_GIVEREF(__pyx_v_coeffs);
      PyTuple_SET_ITEM(__pyx_t_4, 1+__pyx_t_24, __pyx_v_coeffs);
      __Pyx_INCREF(__pyx_v_offset);
      __Pyx_GIVEREF(__pyx_v_offset);
      PyTuple_SET_ITEM(__pyx_t_4, 2+__pyx_t_24, __pyx_v_offset);
      __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_45, __pyx_t_4, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_45); __pyx_t_45 = 0;
    __pyx_v_cross_section_2d = __pyx_t_10;
    __pyx_t_10 = 0;
  }
  __pyx_L39:;

  /* "vorostereology/voroplusplus.pyx":957
 * 
 *   # finally, tidy up.
 *   dispose_all(container, voronoi_cells, n)             # <<<<<<<<<<<<<<
 *   free(xs)
 *   free(ys)
 */
  dispose_all(__pyx_v_container, __pyx_v_voronoi_cells, __pyx_v_n);

  /* "vorostereology/voroplusplus.pyx":958
 *   # finally, tidy up.
 *   dispose_all(container, voronoi_cells, n)
 *   free(xs)             # <<<<<<<<<<<<<<
 *   free(ys)
 *   free(zs)
 */
  free(__pyx_v_xs);

  /* "vorostereology/voroplusplus.pyx":959
 *   dispose_all(container, voronoi_cells, n)
 *   free(xs)
 *   free(ys)             # <<<<<<<<<<<<<<
 *   free(zs)
 *   free(rs)
 */
  free(__pyx_v_ys);

  /* "vorostereology/voroplusplus.pyx":960
 *   free(xs)
 *   free(ys)
 *   free(zs)             # <<<<<<<<<<<<<<
 *   free(rs)
 *   return {"3d": vertices_3d, "original_indices": section_indices_, "areas": section_areas_, "2d": cross_section_2d}
 */
  free(__pyx_v_zs);

  /* "vorostereology/voroplusplus.pyx":961
 *   free(ys)
 *   free(zs)
 *   free(rs)             # <<<<<<<<<<<<<<
 *   return {"3d": vertices_3d, "original_indices": section_indices_, "areas": section_areas_, "2d": cross_section_2d}
 * 
 */
  free(__pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":962
 *   free(zs)
 *   free(rs)
 *   return {"3d": vertices_3d, "original_indices": section_indices_, "areas": section_areas_, "2d": cross_section_2d}             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_10, __pyx_kp_u_3d, __pyx_v_vertices_3d) < 0) __PYX_ERR(0, 962, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_original_indices, __pyx_v_section_indices_) < 0) __PYX_ERR(0, 962, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_u_areas, __pyx_v_section_areas_) < 0) __PYX_ERR(0, 962, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_10, __pyx_kp_u_2d, __pyx_v_cross_section_2d) < 0) __PYX_ERR(0, 962, __pyx_L1_error)
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":828
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_section_bounded(coeffs, offset, points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_44);
  __Pyx_XDECREF(__pyx_t_45);
  __Pyx_AddTraceback("vorostereology.voroplusplus.compute_voronoi_section_bounded", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vector_class);
  __Pyx_XDECREF(__pyx_v_blocks);
  __Pyx_XDECREF(__pyx_v_vertices_3d);
  __Pyx_XDECREF(__pyx_v_section_areas);
  __Pyx_XDECREF(__pyx_v_cell_vertices);
  __Pyx_XDECREF(__pyx_v_face_vertices);
  __Pyx_XDECREF(__pyx_v_duplicates);
  __Pyx_XDECREF(__pyx_v_idx_sort);
  __Pyx_XDECREF(__pyx_v_sorted_areas);
  __Pyx_XDECREF(__pyx_v_sorted_indices);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_idx_start);
  __Pyx_XDECREF(__pyx_v_count);
  __Pyx_XDECREF(__pyx_v_pairs);
  __Pyx_XDECREF(__pyx_v_first_occurrence);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_section_indices_);
  __Pyx_XDECREF(__pyx_v_section_areas_);
  __Pyx_XDECREF(__pyx_v_cross_section_2d);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_p);
  __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_cell);
  __Pyx_XDECREF(__pyx_v_radii);
  __Pyx_XDECREF(__pyx_v_periodic);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vorostereology/voroplusplus.pyx":966
 * 
 * @cython.wraparound(False)
 * def voronoi_num_fragments(points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 *   """
 * Input arg formats:
 */

/* Python wrapper */
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_23voronoi_num_fragments(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_14vorostereology_12voroplusplus_22voronoi_num_fragments[] = "\nInput arg formats:\n  points = list of 3-vectors (lists or compatible class instances) of doubles,\n    being the coordinates of the points to voronoi-tesselate.\n  limits = 3-list of 2-lists, specifying the start and end sizes of the box the\n    points are in.\n  dispersion = max distance between two points that might be adjacent (sets\n    voro++ block sizes.)\n  radii (optional) = list of python floats as the sphere radii of the points,\n    for radical (weighted) tessellation.\n  periodic (optional) = 3-list of bools indicating x, y and z periodicity of \n    the system box.\n  \nOutput:\nList of length n, each element is a list of length 6\n  ";
static PyMethodDef __pyx_mdef_14vorostereology_12voroplusplus_23voronoi_num_fragments = {"voronoi_num_fragments", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_14vorostereology_12voroplusplus_23voronoi_num_fragments, METH_VARARGS|METH_KEYWORDS, __pyx_doc_14vorostereology_12voroplusplus_22voronoi_num_fragments};
static PyObject *__pyx_pw_14vorostereology_12voroplusplus_23voronoi_num_fragments(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_points = 0;
  PyObject *__pyx_v_limits = 0;
  PyObject *__pyx_v_dispersion = 0;
  PyObject *__pyx_v_radii = 0;
  PyObject *__pyx_v_periodic = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("voronoi_num_fragments (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_points,&__pyx_n_s_limits,&__pyx_n_s_dispersion,&__pyx_n_s_radii,&__pyx_n_s_periodic,0};
    PyObject* values[5] = {0,0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_points)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_limits)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("voronoi_num_fragments", 1, 5, 5, 1); __PYX_ERR(0, 966, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_dispersion)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("voronoi_num_fragments", 1, 5, 5, 2); __PYX_ERR(0, 966, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_radii)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("voronoi_num_fragments", 1, 5, 5, 3); __PYX_ERR(0, 966, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_PyDict_GetItemStr(__pyx_kwds, __pyx_n_s_periodic)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("voronoi_num_fragments", 1, 5, 5, 4); __PYX_ERR(0, 966, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "voronoi_num_fragments") < 0)) __PYX_ERR(0, 966, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 5) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
      values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
      values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
    }
    __pyx_v_points = values[0];
    __pyx_v_limits = values[1];
    __pyx_v_dispersion = values[2];
    __pyx_v_radii = values[3];
    __pyx_v_periodic = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("voronoi_num_fragments", 1, 5, 5, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(0, 966, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("vorostereology.voroplusplus.voronoi_num_fragments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_14vorostereology_12voroplusplus_22voronoi_num_fragments(__pyx_self, __pyx_v_points, __pyx_v_limits, __pyx_v_dispersion, __pyx_v_radii, __pyx_v_periodic);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_14vorostereology_12voroplusplus_22voronoi_num_fragments(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_points, PyObject *__pyx_v_limits, PyObject *__pyx_v_dispersion, PyObject *__pyx_v_radii, PyObject *__pyx_v_periodic) {
  Py_ssize_t __pyx_v_n;
  Py_ssize_t __pyx_v_i;
  double *__pyx_v_xs;
  double *__pyx_v_ys;
  double *__pyx_v_zs;
  double *__pyx_v_rs;
  std::vector<std::vector<bool> >  __pyx_v_result;
  CYTHON_UNUSED PyObject *__pyx_v_vector_class = NULL;
  PyObject *__pyx_v_blocks = NULL;
  void *__pyx_v_container;
  PyObject *__pyx_9genexpr11__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  long __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  double __pyx_t_16;
  double __pyx_t_17;
  double __pyx_t_18;
  int __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  Py_ssize_t __pyx_t_25;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("voronoi_num_fragments", 0);
  __Pyx_INCREF(__pyx_v_radii);
  __Pyx_INCREF(__pyx_v_periodic);

  /* "vorostereology/voroplusplus.pyx":984
 *   """
 * 
 *   cdef Py_ssize_t n = len(points), i, j             # <<<<<<<<<<<<<<
 *   cdef double *xs
 *   cdef double *ys
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 984, __pyx_L1_error)
  __pyx_v_n = __pyx_t_1;

  /* "vorostereology/voroplusplus.pyx":991
 *   cdef vector[vector[bool]] result
 * 
 *   vector_class = get_constructor(points[0])             # <<<<<<<<<<<<<<
 * 
 *   periodic = [1 if p else 0 for p in periodic]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_get_constructor); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_points, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  __pyx_t_2 = (__pyx_t_5) ? __Pyx_PyObject_Call2Args(__pyx_t_3, __pyx_t_5, __pyx_t_4) : __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 991, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_vector_class = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":993
 *   vector_class = get_constructor(points[0])
 * 
 *   periodic = [1 if p else 0 for p in periodic]             # <<<<<<<<<<<<<<
 * 
 *   # we must make sure we have at least one block, or voro++ will segfault when
 */
  { /* enter inner scope */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 993, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_v_periodic)) || PyTuple_CheckExact(__pyx_v_periodic)) {
      __pyx_t_3 = __pyx_v_periodic; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_v_periodic); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 993, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_6 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 993, __pyx_L5_error)
    }
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 993, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_4); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(0, 993, __pyx_L5_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 993, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_6(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 993, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr11__pyx_v_p, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_9genexpr11__pyx_v_p); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 993, __pyx_L5_error)
      if (__pyx_t_7) {
        __Pyx_INCREF(__pyx_int_1);
        __pyx_t_4 = __pyx_int_1;
      } else {
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_4 = __pyx_int_0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 993, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_p); __pyx_9genexpr11__pyx_v_p = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_p); __pyx_9genexpr11__pyx_v_p = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __Pyx_DECREF_SET(__pyx_v_periodic, __pyx_t_2);
  __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":999
 * 
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  __pyx_t_2 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_4, __pyx_t_3, __pyx_t_8) : __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = 1;
  __pyx_t_8 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_8, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 999, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_2 = __pyx_t_4;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "vorostereology/voroplusplus.pyx":1000
 *   blocks = [
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])
 *   ]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
    }
  }
  __pyx_t_4 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_8, __pyx_t_3, __pyx_t_10) : __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_10);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Int(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_9 = 1;
  __pyx_t_10 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_t_10, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_8);
    __pyx_t_4 = __pyx_t_8;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1001
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[2][1] - limits[2][0]) / dispersion))])             # <<<<<<<<<<<<<<
 *   ]
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_math); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_floor); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_3, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_11 = __Pyx_GetItemInt(__pyx_t_3, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_dispersion); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
    }
  }
  __pyx_t_8 = (__pyx_t_3) ? __Pyx_PyObject_Call2Args(__pyx_t_10, __pyx_t_3, __pyx_t_11) : __Pyx_PyObject_CallOneArg(__pyx_t_10, __pyx_t_11);
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyNumber_Int(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_9 = 1;
  __pyx_t_11 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_10, __pyx_t_11, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_10);
    __pyx_t_8 = __pyx_t_10;
  } else {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":998
 *   # we look for cells.
 * 
 *   blocks = [             # <<<<<<<<<<<<<<
 *     max([1, int(math.floor((limits[0][1] - limits[0][0]) / dispersion))]),
 *     max([1, int(math.floor((limits[1][1] - limits[1][0]) / dispersion))]),
 */
  __pyx_t_10 = PyList_New(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 998, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_INCREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
  __Pyx_INCREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_blocks = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":1005
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_radii); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1005, __pyx_L1_error)
  __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1005, __pyx_L1_error)
  __pyx_t_7 = ((__pyx_t_1 != __pyx_t_12) != 0);
  if (__pyx_t_7) {

    /* "vorostereology/voroplusplus.pyx":1006
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):
 *     radii = [dispersion / 10.] * len(points)             # <<<<<<<<<<<<<<
 * 
 *   # build the container object
 */
    __pyx_t_10 = __Pyx_PyFloat_TrueDivideObjC(__pyx_v_dispersion, __pyx_float_10_, 10., 0, 0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = PyObject_Length(__pyx_v_points); if (unlikely(__pyx_t_12 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1006, __pyx_L1_error)
    __pyx_t_8 = PyList_New(1 * ((__pyx_t_12<0) ? 0:__pyx_t_12)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1006, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    { Py_ssize_t __pyx_temp;
      for (__pyx_temp=0; __pyx_temp < __pyx_t_12; __pyx_temp++) {
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_8, __pyx_temp, __pyx_t_10);
      }
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF_SET(__pyx_v_radii, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "vorostereology/voroplusplus.pyx":1005
 * 
 *   # if no radii provided, we still run the radical routine, but with all the same small radius.
 *   if len(radii) != len(points):             # <<<<<<<<<<<<<<
 *     radii = [dispersion / 10.] * len(points)
 * 
 */
  }

  /* "vorostereology/voroplusplus.pyx":1010
 *   # build the container object
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],             # <<<<<<<<<<<<<<
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":1011
 *   cdef void* container = container_poly_create(
 *     <double>limits[0][0],
 *     <double>limits[0][1],             # <<<<<<<<<<<<<<
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1011, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1012
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 *     <double>limits[1][0],             # <<<<<<<<<<<<<<
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1012, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":1013
 *     <double>limits[0][1],
 *     <double>limits[1][0],
 *     <double>limits[1][1],             # <<<<<<<<<<<<<<
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_16 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_16 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1014
 *     <double>limits[1][0],
 *     <double>limits[1][1],
 *     <double>limits[2][0],             # <<<<<<<<<<<<<<
 *     <double>limits[2][1],
 *     <int>blocks[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "vorostereology/voroplusplus.pyx":1015
 *     <double>limits[1][1],
 *     <double>limits[2][0],
 *     <double>limits[2][1],             # <<<<<<<<<<<<<<
 *     <int>blocks[0],
 *     <int>blocks[1],
 */
  __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_limits, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1016
 *     <double>limits[2][0],
 *     <double>limits[2][1],
 *     <int>blocks[0],             # <<<<<<<<<<<<<<
 *     <int>blocks[1],
 *     <int>blocks[2],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_19 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_19 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1017
 *     <double>limits[2][1],
 *     <int>blocks[0],
 *     <int>blocks[1],             # <<<<<<<<<<<<<<
 *     <int>blocks[2],
 *     <int>periodic[0],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 1, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_20 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_20 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1018
 *     <int>blocks[0],
 *     <int>blocks[1],
 *     <int>blocks[2],             # <<<<<<<<<<<<<<
 *     <int>periodic[0],
 *     <int>periodic[1],
 */
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_blocks, 2, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_21 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_21 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1019
 *     <int>blocks[1],
 *     <int>blocks[2],
 *     <int>periodic[0],             # <<<<<<<<<<<<<<
 *     <int>periodic[1],
 *     <int>periodic[2]
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_22 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_22 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1020
 *     <int>blocks[2],
 *     <int>periodic[0],
 *     <int>periodic[1],             # <<<<<<<<<<<<<<
 *     <int>periodic[2]
 *   )
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_23 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_23 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1020, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1021
 *     <int>periodic[0],
 *     <int>periodic[1],
 *     <int>periodic[2]             # <<<<<<<<<<<<<<
 *   )
 * 
 */
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_periodic, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_24 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_24 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "vorostereology/voroplusplus.pyx":1009
 * 
 *   # build the container object
 *   cdef void* container = container_poly_create(             # <<<<<<<<<<<<<<
 *     <double>limits[0][0],
 *     <double>limits[0][1],
 */
  __pyx_v_container = container_poly_create(((double)__pyx_t_13), ((double)__pyx_t_14), ((double)__pyx_t_15), ((double)__pyx_t_16), ((double)__pyx_t_17), ((double)__pyx_t_18), ((int)__pyx_t_19), ((int)__pyx_t_20), ((int)__pyx_t_21), ((int)__pyx_t_22), ((int)__pyx_t_23), ((int)__pyx_t_24));

  /* "vorostereology/voroplusplus.pyx":1024
 *   )
 * 
 *   xs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_xs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":1025
 * 
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)
 */
  __pyx_v_ys = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":1026
 *   xs = <double*>malloc(sizeof(double) * n)
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 *   rs = <double*>malloc(sizeof(double) * n)
 * 
 */
  __pyx_v_zs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":1027
 *   ys = <double*>malloc(sizeof(double) * n)
 *   zs = <double*>malloc(sizeof(double) * n)
 *   rs = <double*>malloc(sizeof(double) * n)             # <<<<<<<<<<<<<<
 * 
 *   # initialise particle positions:
 */
  __pyx_v_rs = ((double *)malloc(((sizeof(double)) * __pyx_v_n)));

  /* "vorostereology/voroplusplus.pyx":1030
 * 
 *   # initialise particle positions:
 *   for i in range(n):             # <<<<<<<<<<<<<<
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 */
  __pyx_t_12 = __pyx_v_n;
  __pyx_t_1 = __pyx_t_12;
  for (__pyx_t_25 = 0; __pyx_t_25 < __pyx_t_1; __pyx_t_25+=1) {
    __pyx_v_i = __pyx_t_25;

    /* "vorostereology/voroplusplus.pyx":1031
 *   # initialise particle positions:
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]             # <<<<<<<<<<<<<<
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_xs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":1032
 *   for i in range(n):
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]             # <<<<<<<<<<<<<<
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_10, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1032, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    (__pyx_v_ys[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":1033
 *     xs[i] = <double>points[i][0]
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]             # <<<<<<<<<<<<<<
 *     rs[i] = <double>radii[i]
 * 
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_points, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1033, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_8, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1033, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1033, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_zs[__pyx_v_i]) = ((double)__pyx_t_18);

    /* "vorostereology/voroplusplus.pyx":1034
 *     ys[i] = <double>points[i][1]
 *     zs[i] = <double>points[i][2]
 *     rs[i] = <double>radii[i]             # <<<<<<<<<<<<<<
 * 
 *   # and add them to the container:
 */
    __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_radii, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 0, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1034, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1034, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    (__pyx_v_rs[__pyx_v_i]) = ((double)__pyx_t_18);
  }

  /* "vorostereology/voroplusplus.pyx":1037
 * 
 *   # and add them to the container:
 *   put_particles(container, n, xs, ys, zs, rs)             # <<<<<<<<<<<<<<
 * 
 *   # now compute the tessellation:
 */
  put_particles(__pyx_v_container, __pyx_v_n, __pyx_v_xs, __pyx_v_ys, __pyx_v_zs, __pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":1040
 * 
 *   # now compute the tessellation:
 *   result = compute_num_fragments(container, n)             # <<<<<<<<<<<<<<
 * 
 *   dispose_container(container)
 */
  __pyx_v_result = compute_num_fragments(__pyx_v_container, __pyx_v_n);

  /* "vorostereology/voroplusplus.pyx":1042
 *   result = compute_num_fragments(container, n)
 * 
 *   dispose_container(container)             # <<<<<<<<<<<<<<
 *   free(xs)
 *   free(ys)
 */
  dispose_container(__pyx_v_container);

  /* "vorostereology/voroplusplus.pyx":1043
 * 
 *   dispose_container(container)
 *   free(xs)             # <<<<<<<<<<<<<<
 *   free(ys)
 *   free(zs)
 */
  free(__pyx_v_xs);

  /* "vorostereology/voroplusplus.pyx":1044
 *   dispose_container(container)
 *   free(xs)
 *   free(ys)             # <<<<<<<<<<<<<<
 *   free(zs)
 *   free(rs)
 */
  free(__pyx_v_ys);

  /* "vorostereology/voroplusplus.pyx":1045
 *   free(xs)
 *   free(ys)
 *   free(zs)             # <<<<<<<<<<<<<<
 *   free(rs)
 *   return result
 */
  free(__pyx_v_zs);

  /* "vorostereology/voroplusplus.pyx":1046
 *   free(ys)
 *   free(zs)
 *   free(rs)             # <<<<<<<<<<<<<<
 *   return result
 */
  free(__pyx_v_rs);

  /* "vorostereology/voroplusplus.pyx":1047
 *   free(zs)
 *   free(rs)
 *   return result             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___(__pyx_v_result); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1047, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_r = __pyx_t_10;
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "vorostereology/voroplusplus.pyx":966
 * 
 * @cython.wraparound(False)
 * def voronoi_num_fragments(points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 *   """
 * Input arg formats:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("vorostereology.voroplusplus.voronoi_num_fragments", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vector_class);
  __Pyx_XDECREF(__pyx_v_blocks);
  __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_radii);
  __Pyx_XDECREF(__pyx_v_periodic);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely((__pyx_t_5 == (double)-1) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((double)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_bool")
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<bool>  __pyx_convert_vector_from_py_bool(PyObject *__pyx_v_o) {
  std::vector<bool>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<bool>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  bool __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_bool", 0);

  /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 47, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(1, 47, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 47, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 47, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":48
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(<X>item)             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_item); if (unlikely((__pyx_t_5 == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(1, 48, __pyx_L1_error)
    __pyx_v_v.push_back(((bool)__pyx_t_5));

    /* "vector.from_py":47
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(<X>item)
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":49
 *     for item in o:
 *         v.push_back(<X>item)
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":45
 * 
 * @cname("__pyx_convert_vector_from_py_bool")
 * cdef vector[X] __pyx_convert_vector_from_py_bool(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_pretend_to_initialize(&__pyx_r);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_bool(const std::vector<bool>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_bool", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_bool")
 * cdef object __pyx_convert_vector_to_py_bool(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __Pyx_PyBool_FromLong((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_bool")
 * cdef object __pyx_convert_vector_to_py_bool(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_bool", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___(const std::vector<std::vector<bool> >  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  size_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___", 0);

  /* "vector.to_py":61
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___(vector[X]& v):
 *     return [v[i] for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;
    __pyx_t_5 = __pyx_convert_vector_to_py_bool((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 61, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_voroplusplus(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_voroplusplus},
  {0, NULL}
};
#endif

static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    "voroplusplus",
    0, /* m_doc */
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    0, /* m_size */
  #else
    -1, /* m_size */
  #endif
    __pyx_methods /* m_methods */,
  #if CYTHON_PEP489_MULTI_PHASE_INIT
    __pyx_moduledef_slots, /* m_slots */
  #else
    NULL, /* m_reload */
  #endif
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_u_2d, __pyx_k_2d, sizeof(__pyx_k_2d), 0, 1, 0, 0},
  {&__pyx_kp_u_3d, __pyx_k_3d, sizeof(__pyx_k_3d), 0, 1, 0, 0},
  {&__pyx_kp_u_Algorithm_did_not_converge_in_ma, __pyx_k_Algorithm_did_not_converge_in_ma, sizeof(__pyx_k_Algorithm_did_not_converge_in_ma), 0, 1, 0, 0},
  {&__pyx_kp_u_Algorithm_number_of_iterations, __pyx_k_Algorithm_number_of_iterations, sizeof(__pyx_k_Algorithm_number_of_iterations), 0, 1, 0, 0},
  {&__pyx_n_u_BB, __pyx_k_BB, sizeof(__pyx_k_BB), 0, 1, 0, 1},
  {&__pyx_n_s_BB_solver, __pyx_k_BB_solver, sizeof(__pyx_k_BB_solver), 0, 0, 1, 1},
  {&__pyx_n_u_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 1, 0, 1},
  {&__pyx_kp_u_Invalid_solver_provided_defaulti, __pyx_k_Invalid_solver_provided_defaulti, sizeof(__pyx_k_Invalid_solver_provided_defaulti), 0, 1, 0, 0},
  {&__pyx_n_s_L1, __pyx_k_L1, sizeof(__pyx_k_L1), 0, 0, 1, 1},
  {&__pyx_n_s_L2, __pyx_k_L2, sizeof(__pyx_k_L2), 0, 0, 1, 1},
  {&__pyx_n_s_L3, __pyx_k_L3, sizeof(__pyx_k_L3), 0, 0, 1, 1},
  {&__pyx_n_s_Lengths, __pyx_k_Lengths, sizeof(__pyx_k_Lengths), 0, 0, 1, 1},
  {&__pyx_n_u_MM, __pyx_k_MM, sizeof(__pyx_k_MM), 0, 1, 0, 1},
  {&__pyx_n_s_MM_solver, __pyx_k_MM_solver, sizeof(__pyx_k_MM_solver), 0, 0, 1, 1},
  {&__pyx_kp_u_Minimization_iteration, __pyx_k_Minimization_iteration, sizeof(__pyx_k_Minimization_iteration), 0, 1, 0, 0},
  {&__pyx_kp_u_Minimization_number_of_iteration, __pyx_k_Minimization_number_of_iteration, sizeof(__pyx_k_Minimization_number_of_iteration), 0, 1, 0, 0},
  {&__pyx_n_s_T, __pyx_k_T, sizeof(__pyx_k_T), 0, 0, 1, 1},
  {&__pyx_n_s_VoronoiPlusPlusError, __pyx_k_VoronoiPlusPlusError, sizeof(__pyx_k_VoronoiPlusPlusError), 0, 0, 1, 1},
  {&__pyx_n_s__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 0, 1, 1},
  {&__pyx_n_s_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 0, 1, 1},
  {&__pyx_n_s_abs, __pyx_k_abs, sizeof(__pyx_k_abs), 0, 0, 1, 1},
  {&__pyx_n_u_adjacent_cell, __pyx_k_adjacent_cell, sizeof(__pyx_k_adjacent_cell), 0, 1, 0, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_alpha, __pyx_k_alpha, sizeof(__pyx_k_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_any, __pyx_k_any, sizeof(__pyx_k_any), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_areas, __pyx_k_areas, sizeof(__pyx_k_areas), 0, 0, 1, 1},
  {&__pyx_n_u_areas, __pyx_k_areas, sizeof(__pyx_k_areas), 0, 1, 0, 1},
  {&__pyx_n_s_argsort, __pyx_k_argsort, sizeof(__pyx_k_argsort), 0, 0, 1, 1},
  {&__pyx_n_s_array, __pyx_k_array, sizeof(__pyx_k_array), 0, 0, 1, 1},
  {&__pyx_n_s_axis, __pyx_k_axis, sizeof(__pyx_k_axis), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_block_size, __pyx_k_block_size, sizeof(__pyx_k_block_size), 0, 0, 1, 1},
  {&__pyx_n_s_blocks, __pyx_k_blocks, sizeof(__pyx_k_blocks), 0, 0, 1, 1},
  {&__pyx_n_s_cbrt, __pyx_k_cbrt, sizeof(__pyx_k_cbrt), 0, 0, 1, 1},
  {&__pyx_n_s_cell, __pyx_k_cell, sizeof(__pyx_k_cell), 0, 0, 1, 1},
  {&__pyx_n_s_cell_vertices, __pyx_k_cell_vertices, sizeof(__pyx_k_cell_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_cells_to_compute, __pyx_k_cells_to_compute, sizeof(__pyx_k_cells_to_compute), 0, 0, 1, 1},
  {&__pyx_n_s_centroids, __pyx_k_centroids, sizeof(__pyx_k_centroids), 0, 0, 1, 1},
  {&__pyx_n_u_centroids, __pyx_k_centroids, sizeof(__pyx_k_centroids), 0, 1, 0, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_coeffs, __pyx_k_coeffs, sizeof(__pyx_k_coeffs), 0, 0, 1, 1},
  {&__pyx_n_s_compute_centroidal_laguerre, __pyx_k_compute_centroidal_laguerre, sizeof(__pyx_k_compute_centroidal_laguerre), 0, 0, 1, 1},
  {&__pyx_n_s_compute_centroidal_laguerre2d, __pyx_k_compute_centroidal_laguerre2d, sizeof(__pyx_k_compute_centroidal_laguerre2d), 0, 0, 1, 1},
  {&__pyx_n_s_compute_voronoi, __pyx_k_compute_voronoi, sizeof(__pyx_k_compute_voronoi), 0, 0, 1, 1},
  {&__pyx_n_s_compute_voronoi_bounded, __pyx_k_compute_voronoi_bounded, sizeof(__pyx_k_compute_voronoi_bounded), 0, 0, 1, 1},
  {&__pyx_n_s_compute_voronoi_section, __pyx_k_compute_voronoi_section, sizeof(__pyx_k_compute_voronoi_section), 0, 0, 1, 1},
  {&__pyx_n_s_compute_voronoi_section_bounded, __pyx_k_compute_voronoi_section_bounded, sizeof(__pyx_k_compute_voronoi_section_bounded), 0, 0, 1, 1},
  {&__pyx_n_s_computed_indices, __pyx_k_computed_indices, sizeof(__pyx_k_computed_indices), 0, 0, 1, 1},
  {&__pyx_n_s_container, __pyx_k_container, sizeof(__pyx_k_container), 0, 0, 1, 1},
  {&__pyx_n_u_convergence, __pyx_k_convergence, sizeof(__pyx_k_convergence), 0, 1, 0, 1},
  {&__pyx_n_s_cos_theta, __pyx_k_cos_theta, sizeof(__pyx_k_cos_theta), 0, 0, 1, 1},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_cross_cells, __pyx_k_cross_cells, sizeof(__pyx_k_cross_cells), 0, 0, 1, 1},
  {&__pyx_n_s_cross_section_2d, __pyx_k_cross_section_2d, sizeof(__pyx_k_cross_section_2d), 0, 0, 1, 1},
  {&__pyx_n_s_delete, __pyx_k_delete, sizeof(__pyx_k_delete), 0, 0, 1, 1},
  {&__pyx_n_s_denominator, __pyx_k_denominator, sizeof(__pyx_k_denominator), 0, 0, 1, 1},
  {&__pyx_n_s_diameter, __pyx_k_diameter, sizeof(__pyx_k_diameter), 0, 0, 1, 1},
  {&__pyx_n_s_disp, __pyx_k_disp, sizeof(__pyx_k_disp), 0, 0, 1, 1},
  {&__pyx_n_s_dispersion, __pyx_k_dispersion, sizeof(__pyx_k_dispersion), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_domain, __pyx_k_domain, sizeof(__pyx_k_domain), 0, 0, 1, 1},
  {&__pyx_n_s_domain_2, __pyx_k_domain_2, sizeof(__pyx_k_domain_2), 0, 0, 1, 1},
  {&__pyx_n_s_dot, __pyx_k_dot, sizeof(__pyx_k_dot), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_duplicates, __pyx_k_duplicates, sizeof(__pyx_k_duplicates), 0, 0, 1, 1},
  {&__pyx_n_s_empty_indices, __pyx_k_empty_indices, sizeof(__pyx_k_empty_indices), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_face_vertices, __pyx_k_face_vertices, sizeof(__pyx_k_face_vertices), 0, 0, 1, 1},
  {&__pyx_n_s_faces, __pyx_k_faces, sizeof(__pyx_k_faces), 0, 0, 1, 1},
  {&__pyx_n_u_faces, __pyx_k_faces, sizeof(__pyx_k_faces), 0, 1, 0, 1},
  {&__pyx_n_s_faces_areas, __pyx_k_faces_areas, sizeof(__pyx_k_faces_areas), 0, 0, 1, 1},
  {&__pyx_n_s_first_occurrence, __pyx_k_first_occurrence, sizeof(__pyx_k_first_occurrence), 0, 0, 1, 1},
  {&__pyx_n_s_fix_num_iterations, __pyx_k_fix_num_iterations, sizeof(__pyx_k_fix_num_iterations), 0, 0, 1, 1},
  {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {&__pyx_n_s_function_definitions, __pyx_k_function_definitions, sizeof(__pyx_k_function_definitions), 0, 0, 1, 1},
  {&__pyx_n_s_get_constructor, __pyx_k_get_constructor, sizeof(__pyx_k_get_constructor), 0, 0, 1, 1},
  {&__pyx_n_s_gradient_convergence, __pyx_k_gradient_convergence, sizeof(__pyx_k_gradient_convergence), 0, 0, 1, 1},
  {&__pyx_n_s_gradient_max_iterations, __pyx_k_gradient_max_iterations, sizeof(__pyx_k_gradient_max_iterations), 0, 0, 1, 1},
  {&__pyx_n_s_gradient_tol, __pyx_k_gradient_tol, sizeof(__pyx_k_gradient_tol), 0, 0, 1, 1},
  {&__pyx_n_s_hstack, __pyx_k_hstack, sizeof(__pyx_k_hstack), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_idx_sort, __pyx_k_idx_sort, sizeof(__pyx_k_idx_sort), 0, 0, 1, 1},
  {&__pyx_n_s_idx_start, __pyx_k_idx_start, sizeof(__pyx_k_idx_start), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_intc, __pyx_k_intc, sizeof(__pyx_k_intc), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_limits, __pyx_k_limits, sizeof(__pyx_k_limits), 0, 0, 1, 1},
  {&__pyx_n_s_linalg, __pyx_k_linalg, sizeof(__pyx_k_linalg), 0, 0, 1, 1},
  {&__pyx_n_s_lists, __pyx_k_lists, sizeof(__pyx_k_lists), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_iter, __pyx_k_max_iter, sizeof(__pyx_k_max_iter), 0, 0, 1, 1},
  {&__pyx_n_s_max_iterations, __pyx_k_max_iterations, sizeof(__pyx_k_max_iterations), 0, 0, 1, 1},
  {&__pyx_n_s_max_side, __pyx_k_max_side, sizeof(__pyx_k_max_side), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min, __pyx_k_min, sizeof(__pyx_k_min), 0, 0, 1, 1},
  {&__pyx_n_s_min_weight, __pyx_k_min_weight, sizeof(__pyx_k_min_weight), 0, 0, 1, 1},
  {&__pyx_n_s_minimization_num_iterations, __pyx_k_minimization_num_iterations, sizeof(__pyx_k_minimization_num_iterations), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_u_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 1, 0, 1},
  {&__pyx_n_s_modules, __pyx_k_modules, sizeof(__pyx_k_modules), 0, 0, 1, 1},
  {&__pyx_n_s_n, __pyx_k_n, sizeof(__pyx_k_n), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_new_alpha, __pyx_k_new_alpha, sizeof(__pyx_k_new_alpha), 0, 0, 1, 1},
  {&__pyx_n_s_norm, __pyx_k_norm, sizeof(__pyx_k_norm), 0, 0, 1, 1},
  {&__pyx_n_s_norm_xy, __pyx_k_norm_xy, sizeof(__pyx_k_norm_xy), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num_cpus, __pyx_k_num_cpus, sizeof(__pyx_k_num_cpus), 0, 0, 1, 1},
  {&__pyx_n_s_num_iterations, __pyx_k_num_iterations, sizeof(__pyx_k_num_iterations), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_u_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 1, 0, 1},
  {&__pyx_n_s_obj, __pyx_k_obj, sizeof(__pyx_k_obj), 0, 0, 1, 1},
  {&__pyx_n_s_offset, __pyx_k_offset, sizeof(__pyx_k_offset), 0, 0, 1, 1},
  {&__pyx_n_s_ones, __pyx_k_ones, sizeof(__pyx_k_ones), 0, 0, 1, 1},
  {&__pyx_n_s_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 0, 1, 1},
  {&__pyx_n_u_original, __pyx_k_original, sizeof(__pyx_k_original), 0, 1, 0, 1},
  {&__pyx_n_u_original_indices, __pyx_k_original_indices, sizeof(__pyx_k_original_indices), 0, 1, 0, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pairs, __pyx_k_pairs, sizeof(__pyx_k_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_periodic, __pyx_k_periodic, sizeof(__pyx_k_periodic), 0, 0, 1, 1},
  {&__pyx_n_s_periodicity, __pyx_k_periodicity, sizeof(__pyx_k_periodicity), 0, 0, 1, 1},
  {&__pyx_n_s_periodicity_2, __pyx_k_periodicity_2, sizeof(__pyx_k_periodicity_2), 0, 0, 1, 1},
  {&__pyx_n_s_permute, __pyx_k_permute, sizeof(__pyx_k_permute), 0, 0, 1, 1},
  {&__pyx_n_s_permute_targets, __pyx_k_permute_targets, sizeof(__pyx_k_permute_targets), 0, 0, 1, 1},
  {&__pyx_n_s_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 0, 1, 1},
  {&__pyx_n_u_points, __pyx_k_points, sizeof(__pyx_k_points), 0, 1, 0, 1},
  {&__pyx_n_s_points_init, __pyx_k_points_init, sizeof(__pyx_k_points_init), 0, 0, 1, 1},
  {&__pyx_n_u_polygons_indices, __pyx_k_polygons_indices, sizeof(__pyx_k_polygons_indices), 0, 1, 0, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_previous_points, __pyx_k_previous_points, sizeof(__pyx_k_previous_points), 0, 0, 1, 1},
  {&__pyx_n_s_previous_volumes, __pyx_k_previous_volumes, sizeof(__pyx_k_previous_volumes), 0, 0, 1, 1},
  {&__pyx_n_s_previous_weights, __pyx_k_previous_weights, sizeof(__pyx_k_previous_weights), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_py_cells, __pyx_k_py_cells, sizeof(__pyx_k_py_cells), 0, 0, 1, 1},
  {&__pyx_n_s_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_radii, __pyx_k_radii, sizeof(__pyx_k_radii), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_remainder, __pyx_k_remainder, sizeof(__pyx_k_remainder), 0, 0, 1, 1},
  {&__pyx_n_s_reshape, __pyx_k_reshape, sizeof(__pyx_k_reshape), 0, 0, 1, 1},
  {&__pyx_n_s_residual, __pyx_k_residual, sizeof(__pyx_k_residual), 0, 0, 1, 1},
  {&__pyx_n_s_respect_bounds, __pyx_k_respect_bounds, sizeof(__pyx_k_respect_bounds), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_return_counts, __pyx_k_return_counts, sizeof(__pyx_k_return_counts), 0, 0, 1, 1},
  {&__pyx_n_s_return_index, __pyx_k_return_index, sizeof(__pyx_k_return_index), 0, 0, 1, 1},
  {&__pyx_n_s_rot_matrix, __pyx_k_rot_matrix, sizeof(__pyx_k_rot_matrix), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_rows_close, __pyx_k_rows_close, sizeof(__pyx_k_rows_close), 0, 0, 1, 1},
  {&__pyx_n_s_rs, __pyx_k_rs, sizeof(__pyx_k_rs), 0, 0, 1, 1},
  {&__pyx_n_s_same_rows, __pyx_k_same_rows, sizeof(__pyx_k_same_rows), 0, 0, 1, 1},
  {&__pyx_n_s_section_areas, __pyx_k_section_areas, sizeof(__pyx_k_section_areas), 0, 0, 1, 1},
  {&__pyx_n_s_section_areas_2, __pyx_k_section_areas_2, sizeof(__pyx_k_section_areas_2), 0, 0, 1, 1},
  {&__pyx_n_s_section_indices, __pyx_k_section_indices, sizeof(__pyx_k_section_indices), 0, 0, 1, 1},
  {&__pyx_n_s_section_indices_2, __pyx_k_section_indices_2, sizeof(__pyx_k_section_indices_2), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_sin_theta, __pyx_k_sin_theta, sizeof(__pyx_k_sin_theta), 0, 0, 1, 1},
  {&__pyx_n_s_solver, __pyx_k_solver, sizeof(__pyx_k_solver), 0, 0, 1, 1},
  {&__pyx_n_s_sorted_areas, __pyx_k_sorted_areas, sizeof(__pyx_k_sorted_areas), 0, 0, 1, 1},
  {&__pyx_n_s_sorted_indices, __pyx_k_sorted_indices, sizeof(__pyx_k_sorted_indices), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_square, __pyx_k_square, sizeof(__pyx_k_square), 0, 0, 1, 1},
  {&__pyx_n_s_stopping_criterion, __pyx_k_stopping_criterion, sizeof(__pyx_k_stopping_criterion), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_target_areas, __pyx_k_target_areas, sizeof(__pyx_k_target_areas), 0, 0, 1, 1},
  {&__pyx_n_u_target_areas, __pyx_k_target_areas, sizeof(__pyx_k_target_areas), 0, 1, 0, 1},
  {&__pyx_n_s_target_areas_2, __pyx_k_target_areas_2, sizeof(__pyx_k_target_areas_2), 0, 0, 1, 1},
  {&__pyx_n_s_target_volumes, __pyx_k_target_volumes, sizeof(__pyx_k_target_volumes), 0, 0, 1, 1},
  {&__pyx_n_u_target_volumes, __pyx_k_target_volumes, sizeof(__pyx_k_target_volumes), 0, 1, 0, 1},
  {&__pyx_n_s_target_volumes_2, __pyx_k_target_volumes_2, sizeof(__pyx_k_target_volumes_2), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_theta, __pyx_k_theta, sizeof(__pyx_k_theta), 0, 0, 1, 1},
  {&__pyx_n_s_tol, __pyx_k_tol, sizeof(__pyx_k_tol), 0, 0, 1, 1},
  {&__pyx_n_s_transform_2d, __pyx_k_transform_2d, sizeof(__pyx_k_transform_2d), 0, 0, 1, 1},
  {&__pyx_n_s_typ, __pyx_k_typ, sizeof(__pyx_k_typ), 0, 0, 1, 1},
  {&__pyx_n_s_u1, __pyx_k_u1, sizeof(__pyx_k_u1), 0, 0, 1, 1},
  {&__pyx_n_s_u2, __pyx_k_u2, sizeof(__pyx_k_u2), 0, 0, 1, 1},
  {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
  {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
  {&__pyx_n_s_vector_class, __pyx_k_vector_class, sizeof(__pyx_k_vector_class), 0, 0, 1, 1},
  {&__pyx_n_s_vertex_positions, __pyx_k_vertex_positions, sizeof(__pyx_k_vertex_positions), 0, 0, 1, 1},
  {&__pyx_n_u_vertices, __pyx_k_vertices, sizeof(__pyx_k_vertices), 0, 1, 0, 1},
  {&__pyx_n_s_vertices_3d, __pyx_k_vertices_3d, sizeof(__pyx_k_vertices_3d), 0, 0, 1, 1},
  {&__pyx_n_s_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 0, 1, 1},
  {&__pyx_n_u_volume, __pyx_k_volume, sizeof(__pyx_k_volume), 0, 1, 0, 1},
  {&__pyx_n_s_volumes, __pyx_k_volumes, sizeof(__pyx_k_volumes), 0, 0, 1, 1},
  {&__pyx_n_u_volumes, __pyx_k_volumes, sizeof(__pyx_k_volumes), 0, 1, 0, 1},
  {&__pyx_n_s_volumes_centroids, __pyx_k_volumes_centroids, sizeof(__pyx_k_volumes_centroids), 0, 0, 1, 1},
  {&__pyx_n_s_voronoi_cells, __pyx_k_voronoi_cells, sizeof(__pyx_k_voronoi_cells), 0, 0, 1, 1},
  {&__pyx_n_s_voronoi_num_fragments, __pyx_k_voronoi_num_fragments, sizeof(__pyx_k_voronoi_num_fragments), 0, 0, 1, 1},
  {&__pyx_kp_s_voroplusplus_pyx, __pyx_k_voroplusplus_pyx, sizeof(__pyx_k_voroplusplus_pyx), 0, 0, 1, 0},
  {&__pyx_n_s_vorostereology_voroplusplus, __pyx_k_vorostereology_voroplusplus, sizeof(__pyx_k_vorostereology_voroplusplus), 0, 0, 1, 1},
  {&__pyx_n_s_vptr, __pyx_k_vptr, sizeof(__pyx_k_vptr), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 0, 1, 1},
  {&__pyx_n_u_weights, __pyx_k_weights, sizeof(__pyx_k_weights), 0, 1, 0, 1},
  {&__pyx_n_s_weights_init, __pyx_k_weights_init, sizeof(__pyx_k_weights_init), 0, 0, 1, 1},
  {&__pyx_n_s_x_outside, __pyx_k_x_outside, sizeof(__pyx_k_x_outside), 0, 0, 1, 1},
  {&__pyx_n_s_xs, __pyx_k_xs, sizeof(__pyx_k_xs), 0, 0, 1, 1},
  {&__pyx_n_s_y_outside, __pyx_k_y_outside, sizeof(__pyx_k_y_outside), 0, 0, 1, 1},
  {&__pyx_n_s_ys, __pyx_k_ys, sizeof(__pyx_k_ys), 0, 0, 1, 1},
  {&__pyx_n_s_z_outside, __pyx_k_z_outside, sizeof(__pyx_k_z_outside), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {&__pyx_n_s_zs, __pyx_k_zs, sizeof(__pyx_k_zs), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_n_s_print); if (!__pyx_builtin_print) __PYX_ERR(0, 194, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 527, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 801, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "vorostereology/voroplusplus.pyx":91
 * 
 * def same_rows(a, b, tol=8):
 *     rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)             # <<<<<<<<<<<<<<
 *     return np.all(np.any(rows_close, axis=-1), axis=-1) and np.all(np.any(rows_close, axis=0), axis=0)
 * 
 */
  __pyx_slice_ = PySlice_New(Py_None, Py_None, Py_None); if (unlikely(!__pyx_slice_)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice_);
  __Pyx_GIVEREF(__pyx_slice_);
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_slice_, Py_None); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "vorostereology/voroplusplus.pyx":97
 * def transform_2d(cross_cells, coeffs, offset):
 *     norm = np.linalg.norm(coeffs)
 *     norm_xy = np.linalg.norm(coeffs[0:2])             # <<<<<<<<<<<<<<
 * 
 *     cos_theta = coeffs[2] / norm
 */
  __pyx_slice__3 = PySlice_New(__pyx_int_0, __pyx_int_2, Py_None); if (unlikely(!__pyx_slice__3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__3);
  __Pyx_GIVEREF(__pyx_slice__3);

  /* "vorostereology/voroplusplus.pyx":104
 *     u2 = -1 * coeffs[0] / norm_xy
 * 
 *     rot_matrix = np.zeros((3, 3))             # <<<<<<<<<<<<<<
 *     rot_matrix[0, 0] = cos_theta + u1 * u1 * (1 - cos_theta)
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)
 */
  __pyx_tuple__4 = PyTuple_Pack(2, __pyx_int_3, __pyx_int_3); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "vorostereology/voroplusplus.pyx":105
 * 
 *     rot_matrix = np.zeros((3, 3))
 *     rot_matrix[0, 0] = cos_theta + u1 * u1 * (1 - cos_theta)             # <<<<<<<<<<<<<<
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[0, 2] = u2 * sin_theta
 */
  __pyx_tuple__5 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_0); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "vorostereology/voroplusplus.pyx":106
 *     rot_matrix = np.zeros((3, 3))
 *     rot_matrix[0, 0] = cos_theta + u1 * u1 * (1 - cos_theta)
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)             # <<<<<<<<<<<<<<
 *     rot_matrix[0, 2] = u2 * sin_theta
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_1); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "vorostereology/voroplusplus.pyx":107
 *     rot_matrix[0, 0] = cos_theta + u1 * u1 * (1 - cos_theta)
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[0, 2] = u2 * sin_theta             # <<<<<<<<<<<<<<
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)
 */
  __pyx_tuple__7 = PyTuple_Pack(2, __pyx_int_0, __pyx_int_2); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "vorostereology/voroplusplus.pyx":108
 *     rot_matrix[0, 1] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[0, 2] = u2 * sin_theta
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)             # <<<<<<<<<<<<<<
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta
 */
  __pyx_tuple__8 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_0); if (unlikely(!__pyx_tuple__8)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__8);
  __Pyx_GIVEREF(__pyx_tuple__8);

  /* "vorostereology/voroplusplus.pyx":109
 *     rot_matrix[0, 2] = u2 * sin_theta
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)             # <<<<<<<<<<<<<<
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta
 */
  __pyx_tuple__9 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_1); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "vorostereology/voroplusplus.pyx":110
 *     rot_matrix[1, 0] = u1 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta             # <<<<<<<<<<<<<<
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta
 *     rot_matrix[2, 1] = u1 * sin_theta
 */
  __pyx_tuple__10 = PyTuple_Pack(2, __pyx_int_1, __pyx_int_2); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "vorostereology/voroplusplus.pyx":111
 *     rot_matrix[1, 1] = cos_theta + u2 * u2 * (1 - cos_theta)
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta             # <<<<<<<<<<<<<<
 *     rot_matrix[2, 1] = u1 * sin_theta
 *     rot_matrix[2, 2] = cos_theta
 */
  __pyx_tuple__11 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_0); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "vorostereology/voroplusplus.pyx":112
 *     rot_matrix[1, 2] = -1 * u1 * sin_theta
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta
 *     rot_matrix[2, 1] = u1 * sin_theta             # <<<<<<<<<<<<<<
 *     rot_matrix[2, 2] = cos_theta
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_1); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "vorostereology/voroplusplus.pyx":113
 *     rot_matrix[2, 0] = -1 * u2 * sin_theta
 *     rot_matrix[2, 1] = u1 * sin_theta
 *     rot_matrix[2, 2] = cos_theta             # <<<<<<<<<<<<<<
 * 
 *     return [np.dot(rot_matrix, (np.array(cell) - offset).T).T[:, 0:2] for cell in cross_cells]
 */
  __pyx_tuple__13 = PyTuple_Pack(2, __pyx_int_2, __pyx_int_2); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(0, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "vorostereology/voroplusplus.pyx":115
 *     rot_matrix[2, 2] = cos_theta
 * 
 *     return [np.dot(rot_matrix, (np.array(cell) - offset).T).T[:, 0:2] for cell in cross_cells]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(2, __pyx_slice_, __pyx_slice__3); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "vorostereology/voroplusplus.pyx":149
 *     volumes = np.array(compute_volumes(weights,
 *             <double>domain[0][0], <double>domain[0][1], <double>domain[1][0], <double>domain[1][1], <double>domain[2][0], <double>domain[2][1],
 *             <int>periodicity[0], <int>periodicity[1], <int>periodicity[2], n, points[:, 0], points[:, 1], points[:, 2], <int>num_cpus))             # <<<<<<<<<<<<<<
 *     previous_volumes = volumes
 * 
 */
  __pyx_tuple__15 = PyTuple_Pack(2, __pyx_slice_, __pyx_int_0); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);
  __pyx_tuple__16 = PyTuple_Pack(2, __pyx_slice_, __pyx_int_1); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);
  __pyx_tuple__17 = PyTuple_Pack(2, __pyx_slice_, __pyx_int_2); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "vorostereology/voroplusplus.pyx":330
 *                 permute=permute, max_iter=gradient_max_iterations, tol=gradient_tol, disp=disp, num_cpus=num_cpus)
 *         else:
 *             print("Invalid solver provided, defaulting to MM.")             # <<<<<<<<<<<<<<
 *             compute_centroidal_laguerre(weights_init, points_init, target_volumes, domain, periodicity, permute,
 *                 max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, "MM", respect_bounds, num_cpus)
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Invalid_solver_provided_defaulti); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "vorostereology/voroplusplus.pyx":75
 * 
 * 
 * def get_constructor(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Input arg format:
 */
  __pyx_tuple__20 = PyTuple_Pack(3, __pyx_n_s_obj, __pyx_n_s_typ, __pyx_n_s_numpy); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);
  __pyx_codeobj__21 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__20, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_get_constructor, 75, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__21)) __PYX_ERR(0, 75, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":90
 *     return typ
 * 
 * def same_rows(a, b, tol=8):             # <<<<<<<<<<<<<<
 *     rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)
 *     return np.all(np.any(rows_close, axis=-1), axis=-1) and np.all(np.any(rows_close, axis=0), axis=0)
 */
  __pyx_tuple__22 = PyTuple_Pack(4, __pyx_n_s_a, __pyx_n_s_b, __pyx_n_s_tol, __pyx_n_s_rows_close); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);
  __pyx_codeobj__23 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__22, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_same_rows, 90, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__23)) __PYX_ERR(0, 90, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":95
 * 
 * 
 * def transform_2d(cross_cells, coeffs, offset):             # <<<<<<<<<<<<<<
 *     norm = np.linalg.norm(coeffs)
 *     norm_xy = np.linalg.norm(coeffs[0:2])
 */
  __pyx_tuple__24 = PyTuple_Pack(11, __pyx_n_s_cross_cells, __pyx_n_s_coeffs, __pyx_n_s_offset, __pyx_n_s_norm, __pyx_n_s_norm_xy, __pyx_n_s_cos_theta, __pyx_n_s_sin_theta, __pyx_n_s_u1, __pyx_n_s_u2, __pyx_n_s_rot_matrix, __pyx_n_s_cell); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(3, 0, 11, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__24, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_transform_2d, 95, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 95, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":118
 * 
 * 
 * def BB_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */
  __pyx_tuple__26 = PyTuple_Pack(27, __pyx_n_s_weights_init, __pyx_n_s_points, __pyx_n_s_target_volumes, __pyx_n_s_domain, __pyx_n_s_block_size, __pyx_n_s_periodicity, __pyx_n_s_permute, __pyx_n_s_max_iter, __pyx_n_s_tol, __pyx_n_s_disp, __pyx_n_s_num_cpus, __pyx_n_s_L1, __pyx_n_s_L2, __pyx_n_s_L3, __pyx_n_s_weights, __pyx_n_s_n, __pyx_n_s_diameter, __pyx_n_s_min_weight, __pyx_n_s_volumes, __pyx_n_s_previous_volumes, __pyx_n_s_target_volumes_2, __pyx_n_s_residual, __pyx_n_s_stopping_criterion, __pyx_n_s_previous_weights, __pyx_n_s_minimization_num_iterations, __pyx_n_s_alpha, __pyx_n_s_denominator); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);
  __pyx_codeobj__27 = (PyObject*)__Pyx_PyCode_New(11, 0, 27, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__26, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_BB_solver, 118, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__27)) __PYX_ERR(0, 118, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":205
 * 
 * 
 * def MM_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */
  __pyx_tuple__28 = PyTuple_Pack(28, __pyx_n_s_weights_init, __pyx_n_s_points, __pyx_n_s_target_volumes, __pyx_n_s_domain, __pyx_n_s_block_size, __pyx_n_s_periodicity, __pyx_n_s_permute, __pyx_n_s_max_iter, __pyx_n_s_tol, __pyx_n_s_disp, __pyx_n_s_num_cpus, __pyx_n_s_L1, __pyx_n_s_L2, __pyx_n_s_L3, __pyx_n_s_weights, __pyx_n_s_n, __pyx_n_s_diameter, __pyx_n_s_min_weight, __pyx_n_s_volumes, __pyx_n_s_previous_volumes, __pyx_n_s_target_volumes_2, __pyx_n_s_residual, __pyx_n_s_stopping_criterion, __pyx_n_s_previous_weights, __pyx_n_s_minimization_num_iterations, __pyx_n_s_theta, __pyx_n_s_alpha, __pyx_n_s_new_alpha); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);
  __pyx_codeobj__29 = (PyObject*)__Pyx_PyCode_New(11, 0, 28, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__28, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_MM_solver, 205, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__29)) __PYX_ERR(0, 205, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":299
 * 
 * 
 * def compute_centroidal_laguerre(weights_init, points_init, target_volumes, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds, num_cpus):
 * 
 */
  __pyx_tuple__30 = PyTuple_Pack(34, __pyx_n_s_weights_init, __pyx_n_s_points_init, __pyx_n_s_target_volumes, __pyx_n_s_domain, __pyx_n_s_periodicity, __pyx_n_s_permute, __pyx_n_s_max_iterations, __pyx_n_s_gradient_max_iterations, __pyx_n_s_tol, __pyx_n_s_gradient_tol, __pyx_n_s_disp, __pyx_n_s_fix_num_iterations, __pyx_n_s_solver, __pyx_n_s_respect_bounds, __pyx_n_s_num_cpus, __pyx_n_s_n, __pyx_n_s_volumes_centroids, __pyx_n_s_weights, __pyx_n_s_points, __pyx_n_s_previous_points, __pyx_n_s_L1, __pyx_n_s_L2, __pyx_n_s_L3, __pyx_n_s_Lengths, __pyx_n_s_volume, __pyx_n_s_block_size, __pyx_n_s_max_side, __pyx_n_s_volumes, __pyx_n_s_num_iterations, __pyx_n_s_stopping_criterion, __pyx_n_s_residual, __pyx_n_s_gradient_convergence, __pyx_n_s_centroids, __pyx_n_s_target_volumes_2); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);
  __pyx_codeobj__31 = (PyObject*)__Pyx_PyCode_New(15, 0, 34, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__30, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_compute_centroidal_laguerre, 299, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__31)) __PYX_ERR(0, 299, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":373
 * 
 * 
 * def compute_centroidal_laguerre2d(weights_init, points_init, target_areas, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds,
 *     num_cpus):
 */
  __pyx_tuple__32 = PyTuple_Pack(36, __pyx_n_s_weights_init, __pyx_n_s_points_init, __pyx_n_s_target_areas, __pyx_n_s_domain, __pyx_n_s_periodicity, __pyx_n_s_permute, __pyx_n_s_max_iterations, __pyx_n_s_gradient_max_iterations, __pyx_n_s_tol, __pyx_n_s_gradient_tol, __pyx_n_s_disp, __pyx_n_s_fix_num_iterations, __pyx_n_s_solver, __pyx_n_s_respect_bounds, __pyx_n_s_num_cpus, __pyx_n_s_n, __pyx_n_s_volumes_centroids, __pyx_n_s_weights, __pyx_n_s_points, __pyx_n_s_previous_points, __pyx_n_s_L1, __pyx_n_s_L2, __pyx_n_s_L3, __pyx_n_s_domain_2, __pyx_n_s_Lengths, __pyx_n_s_volume, __pyx_n_s_block_size, __pyx_n_s_max_side, __pyx_n_s_periodicity_2, __pyx_n_s_areas, __pyx_n_s_num_iterations, __pyx_n_s_stopping_criterion, __pyx_n_s_residual, __pyx_n_s_gradient_convergence, __pyx_n_s_centroids, __pyx_n_s_target_areas_2); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);
  __pyx_codeobj__33 = (PyObject*)__Pyx_PyCode_New(15, 0, 36, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__32, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_compute_centroidal_laguerre2d, 373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__33)) __PYX_ERR(0, 373, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":448
 * 
 * @cython.wraparound(False)
 * def compute_voronoi(points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 *   """
 * Input arg formats:
 */
  __pyx_tuple__34 = PyTuple_Pack(29, __pyx_n_s_points, __pyx_n_s_limits, __pyx_n_s_dispersion, __pyx_n_s_radii, __pyx_n_s_periodic, __pyx_n_s_n, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_xs, __pyx_n_s_ys, __pyx_n_s_zs, __pyx_n_s_rs, __pyx_n_s_voronoi_cells, __pyx_n_s_vector_class, __pyx_n_s_blocks, __pyx_n_s_container, __pyx_n_s_result, __pyx_n_s_empty_indices, __pyx_n_s_py_cells, __pyx_n_s_vertex_positions, __pyx_n_s_lists, __pyx_n_s_vptr, __pyx_n_s_cell_vertices, __pyx_n_s_faces, __pyx_n_s_face_vertices, __pyx_n_s_k, __pyx_n_s_idx, __pyx_n_s_p, __pyx_n_s_p); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);
  __pyx_codeobj__35 = (PyObject*)__Pyx_PyCode_New(5, 0, 29, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__34, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_compute_voronoi, 448, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__35)) __PYX_ERR(0, 448, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":588
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_bounded(points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */
  __pyx_tuple__36 = PyTuple_Pack(32, __pyx_n_s_points, __pyx_n_s_limits, __pyx_n_s_dispersion, __pyx_n_s_cells_to_compute, __pyx_n_s_x_outside, __pyx_n_s_y_outside, __pyx_n_s_z_outside, __pyx_n_s_radii, __pyx_n_s_periodic, __pyx_n_s_n, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_xs, __pyx_n_s_ys, __pyx_n_s_zs, __pyx_n_s_rs, __pyx_n_s_voronoi_cells, __pyx_n_s_vector_class, __pyx_n_s_blocks, __pyx_n_s_container, __pyx_n_s_result, __pyx_n_s_computed_indices, __pyx_n_s_py_cells, __pyx_n_s_vertex_positions, __pyx_n_s_lists, __pyx_n_s_vptr, __pyx_n_s_cell_vertices, __pyx_n_s_faces, __pyx_n_s_face_vertices, __pyx_n_s_k, __pyx_n_s_p, __pyx_n_s_p); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(9, 0, 32, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_compute_voronoi_bounded, 588, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 588, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":697
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_section(coeffs, offset, points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */
  __pyx_tuple__38 = PyTuple_Pack(45, __pyx_n_s_coeffs, __pyx_n_s_offset, __pyx_n_s_points, __pyx_n_s_limits, __pyx_n_s_dispersion, __pyx_n_s_radii, __pyx_n_s_periodic, __pyx_n_s_n, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_xs, __pyx_n_s_ys, __pyx_n_s_zs, __pyx_n_s_rs, __pyx_n_s_voronoi_cells, __pyx_n_s_vector_class, __pyx_n_s_blocks, __pyx_n_s_container, __pyx_n_s_result, __pyx_n_s_section_indices, __pyx_n_s_vertex_positions, __pyx_n_s_lists, __pyx_n_s_vptr, __pyx_n_s_vertices_3d, __pyx_n_s_section_areas, __pyx_n_s_cell_vertices, __pyx_n_s_faces_areas, __pyx_n_s_face_vertices, __pyx_n_s_k, __pyx_n_s_duplicates, __pyx_n_s_idx_sort, __pyx_n_s_sorted_areas, __pyx_n_s_sorted_indices, __pyx_n_s_vals, __pyx_n_s_idx_start, __pyx_n_s_count, __pyx_n_s_first_occurrence, __pyx_n_s_p, __pyx_n_s_q, __pyx_n_s_section_indices_2, __pyx_n_s_section_areas_2, __pyx_n_s_cross_section_2d, __pyx_n_s_p, __pyx_n_s_j, __pyx_n_s_cell); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(7, 0, 45, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_compute_voronoi_section, 697, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 697, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":828
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_section_bounded(coeffs, offset, points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */
  __pyx_tuple__40 = PyTuple_Pack(50, __pyx_n_s_coeffs, __pyx_n_s_offset, __pyx_n_s_points, __pyx_n_s_limits, __pyx_n_s_dispersion, __pyx_n_s_cells_to_compute, __pyx_n_s_x_outside, __pyx_n_s_y_outside, __pyx_n_s_z_outside, __pyx_n_s_radii, __pyx_n_s_periodic, __pyx_n_s_n, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_xs, __pyx_n_s_ys, __pyx_n_s_zs, __pyx_n_s_rs, __pyx_n_s_voronoi_cells, __pyx_n_s_vector_class, __pyx_n_s_blocks, __pyx_n_s_container, __pyx_n_s_result, __pyx_n_s_section_indices, __pyx_n_s_vertex_positions, __pyx_n_s_lists, __pyx_n_s_vptr, __pyx_n_s_vertices_3d, __pyx_n_s_section_areas, __pyx_n_s_cell_vertices, __pyx_n_s_faces_areas, __pyx_n_s_face_vertices, __pyx_n_s_k, __pyx_n_s_duplicates, __pyx_n_s_idx_sort, __pyx_n_s_sorted_areas, __pyx_n_s_sorted_indices, __pyx_n_s_vals, __pyx_n_s_idx_start, __pyx_n_s_count, __pyx_n_s_pairs, __pyx_n_s_first_occurrence, __pyx_n_s_p, __pyx_n_s_q, __pyx_n_s_section_indices_2, __pyx_n_s_section_areas_2, __pyx_n_s_cross_section_2d, __pyx_n_s_p, __pyx_n_s_j, __pyx_n_s_cell); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(11, 0, 50, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_compute_voronoi_section_bounded, 828, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 828, __pyx_L1_error)

  /* "vorostereology/voroplusplus.pyx":966
 * 
 * @cython.wraparound(False)
 * def voronoi_num_fragments(points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 *   """
 * Input arg formats:
 */
  __pyx_tuple__42 = PyTuple_Pack(17, __pyx_n_s_points, __pyx_n_s_limits, __pyx_n_s_dispersion, __pyx_n_s_radii, __pyx_n_s_periodic, __pyx_n_s_n, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_xs, __pyx_n_s_ys, __pyx_n_s_zs, __pyx_n_s_rs, __pyx_n_s_result, __pyx_n_s_vector_class, __pyx_n_s_blocks, __pyx_n_s_container, __pyx_n_s_p); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(5, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_voroplusplus_pyx, __pyx_n_s_voronoi_num_fragments, 966, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_float_0_1 = PyFloat_FromDouble(0.1); if (unlikely(!__pyx_float_0_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_2 = PyFloat_FromDouble(0.2); if (unlikely(!__pyx_float_0_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10_ = PyFloat_FromDouble(10.); if (unlikely(!__pyx_float_10_)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_01 = PyFloat_FromDouble(0.01); if (unlikely(!__pyx_float_0_01)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1eneg_15 = PyFloat_FromDouble(1e-15); if (unlikely(!__pyx_float_1eneg_15)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10 = PyInt_FromLong(10); if (unlikely(!__pyx_int_10)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_10000 = PyInt_FromLong(10000L); if (unlikely(!__pyx_int_10000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initvoroplusplus(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initvoroplusplus(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_voroplusplus(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_voroplusplus(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none) {
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, CYTHON_UNUSED PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_voroplusplus(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'voroplusplus' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_voroplusplus(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("voroplusplus", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_vorostereology__voroplusplus) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "vorostereology.voroplusplus")) {
      if (unlikely(PyDict_SetItemString(modules, "vorostereology.voroplusplus", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  (void)__Pyx_modinit_type_init_code();
  (void)__Pyx_modinit_type_import_code();
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "vorostereology/voroplusplus.pyx":24
 * from cython.operator cimport dereference as deref
 * from libcpp.pair cimport pair
 * from math import sqrt             # <<<<<<<<<<<<<<
 * import numpy as np
 * import warnings
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_sqrt);
  __Pyx_GIVEREF(__pyx_n_s_sqrt);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_sqrt);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sqrt, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":25
 * from libcpp.pair cimport pair
 * from math import sqrt
 * import numpy as np             # <<<<<<<<<<<<<<
 * import warnings
 * from . import function_definitions
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":26
 * from math import sqrt
 * import numpy as np
 * import warnings             # <<<<<<<<<<<<<<
 * from . import function_definitions
 * cimport cython
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_warnings, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vorostereology/voroplusplus.pyx":27
 * import numpy as np
 * import warnings
 * from . import function_definitions             # <<<<<<<<<<<<<<
 * cimport cython
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_function_definitions);
  __Pyx_GIVEREF(__pyx_n_s_function_definitions);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_function_definitions);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s__19, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_function_definitions); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_function_definitions, __pyx_t_2) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":68
 *     void* malloc(size_t size)
 * 
 * import sys             # <<<<<<<<<<<<<<
 * import math
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":69
 * 
 * import sys
 * import math             # <<<<<<<<<<<<<<
 * 
 * class VoronoiPlusPlusError(Exception):
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_math, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_math, __pyx_t_1) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":71
 * import math
 * 
 * class VoronoiPlusPlusError(Exception):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __Pyx_GIVEREF(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_VoronoiPlusPlusError, __pyx_n_s_VoronoiPlusPlusError, (PyObject *) NULL, __pyx_n_s_vorostereology_voroplusplus, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_VoronoiPlusPlusError, __pyx_t_1, __pyx_t_3, NULL, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_VoronoiPlusPlusError, __pyx_t_4) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":75
 * 
 * 
 * def get_constructor(obj):             # <<<<<<<<<<<<<<
 *     """
 *     Input arg format:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_1get_constructor, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_constructor, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":90
 *     return typ
 * 
 * def same_rows(a, b, tol=8):             # <<<<<<<<<<<<<<
 *     rows_close = np.all(np.round(a - b[:, None], tol) == 0, axis=-1)
 *     return np.all(np.any(rows_close, axis=-1), axis=-1) and np.all(np.any(rows_close, axis=0), axis=0)
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_3same_rows, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_same_rows, __pyx_t_1) < 0) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":95
 * 
 * 
 * def transform_2d(cross_cells, coeffs, offset):             # <<<<<<<<<<<<<<
 *     norm = np.linalg.norm(coeffs)
 *     norm_xy = np.linalg.norm(coeffs[0:2])
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_5transform_2d, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_transform_2d, __pyx_t_1) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":118
 * 
 * 
 * def BB_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_7BB_solver, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BB_solver, __pyx_t_1) < 0) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":205
 * 
 * 
 * def MM_solver(weights_init, points, target_volumes, domain, block_size, periodicity, permute=False,             # <<<<<<<<<<<<<<
 *               max_iter=10000, tol=0.01, disp=False, num_cpus=None):
 *     """
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_9MM_solver, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MM_solver, __pyx_t_1) < 0) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":299
 * 
 * 
 * def compute_centroidal_laguerre(weights_init, points_init, target_volumes, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds, num_cpus):
 * 
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_11compute_centroidal_laguerre, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_centroidal_laguerre, __pyx_t_1) < 0) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":373
 * 
 * 
 * def compute_centroidal_laguerre2d(weights_init, points_init, target_areas, domain, periodicity, permute,             # <<<<<<<<<<<<<<
 *     max_iterations, gradient_max_iterations, tol, gradient_tol, disp, fix_num_iterations, solver, respect_bounds,
 *     num_cpus):
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_13compute_centroidal_laguerre2d, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_centroidal_laguerre2d, __pyx_t_1) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":448
 * 
 * @cython.wraparound(False)
 * def compute_voronoi(points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 *   """
 * Input arg formats:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_15compute_voronoi, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_voronoi, __pyx_t_1) < 0) __PYX_ERR(0, 448, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":588
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_bounded(points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_17compute_voronoi_bounded, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_voronoi_bounded, __pyx_t_1) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":697
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_section(coeffs, offset, points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_19compute_voronoi_section, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_voronoi_section, __pyx_t_1) < 0) __PYX_ERR(0, 697, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":828
 * 
 * @cython.wraparound(False)
 * def compute_voronoi_section_bounded(coeffs, offset, points, limits, dispersion, cells_to_compute, x_outside, y_outside, z_outside, radii, periodic):             # <<<<<<<<<<<<<<
 * 
 *   cdef Py_ssize_t n = len(points), i, j
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_21compute_voronoi_section_bounded, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_compute_voronoi_section_bounded, __pyx_t_1) < 0) __PYX_ERR(0, 828, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":966
 * 
 * @cython.wraparound(False)
 * def voronoi_num_fragments(points, limits, dispersion, radii, periodic):             # <<<<<<<<<<<<<<
 *   """
 * Input arg formats:
 */
  __pyx_t_1 = PyCFunction_NewEx(&__pyx_mdef_14vorostereology_12voroplusplus_23voronoi_num_fragments, NULL, __pyx_n_s_vorostereology_voroplusplus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_voronoi_num_fragments, __pyx_t_1) < 0) __PYX_ERR(0, 966, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vorostereology/voroplusplus.pyx":1
 * # cython: language_level=3             # <<<<<<<<<<<<<<
 * # distutils: language = c++
 * #
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":60
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_bool_3e___(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [v[i] for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init vorostereology.voroplusplus", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_CLEAR(__pyx_m);
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init vorostereology.voroplusplus");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (unlikely(!r)) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED long inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject* index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    PySequenceMethods *m = Py_TYPE(obj)->tp_as_sequence;
    if (unlikely(!(m && m->sq_item))) {
        PyErr_Format(PyExc_TypeError, "'%.200s' object is not subscriptable", Py_TYPE(obj)->tp_name);
        return NULL;
    }
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError, "cannot fit '%.200s' into an index-sized integer", Py_TYPE(index)->tp_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject* key) {
    PyMappingMethods *m = Py_TYPE(obj)->tp_as_mapping;
    if (likely(m && m->mp_subscript)) {
        return m->mp_subscript(obj, key);
    }
    return __Pyx_PyObject_GetIndex(obj, key);
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
#if 1 || PY_VERSION_HEX < 0x030600B1
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (Py_EnterRecursiveCall((char*)" while calling a Python object")) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif
#endif

/* PyCFunctionFastCall */
#if CYTHON_FAST_PYCCALL
static CYTHON_INLINE PyObject * __Pyx_PyCFunction_FastCall(PyObject *func_obj, PyObject **args, Py_ssize_t nargs) {
    PyCFunctionObject *func = (PyCFunctionObject*)func_obj;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    int flags = PyCFunction_GET_FLAGS(func);
    assert(PyCFunction_Check(func));
    assert(METH_FASTCALL == (flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_KEYWORDS | METH_STACKLESS)));
    assert(nargs >= 0);
    assert(nargs == 0 || args != NULL);
    /* _PyCFunction_FastCallDict() must not be called with an exception set,
       because it may clear it (directly or indirectly) and so the
       caller loses its exception */
    assert(!PyErr_Occurred());
    if ((PY_VERSION_HEX < 0x030700A0) || unlikely(flags & METH_KEYWORDS)) {
        return (*((__Pyx_PyCFunctionFastWithKeywords)(void*)meth)) (self, args, nargs, NULL);
    } else {
        return (*((__Pyx_PyCFunctionFast)(void*)meth)) (self, args, nargs);
    }
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCall2Args */
static CYTHON_UNUSED PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args, *result = NULL;
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyFunction_FastCall(function, args, 2);
    }
    #endif
    #if CYTHON_FAST_PYCCALL
    if (__Pyx_PyFastCFunction_Check(function)) {
        PyObject *args[2] = {arg1, arg2};
        return __Pyx_PyCFunction_FastCall(function, args, 2);
    }
    #endif
    args = PyTuple_New(2);
    if (unlikely(!args)) goto done;
    Py_INCREF(arg1);
    PyTuple_SET_ITEM(args, 0, arg1);
    Py_INCREF(arg2);
    PyTuple_SET_ITEM(args, 1, arg2);
    Py_INCREF(function);
    result = __Pyx_PyObject_Call(function, args, NULL);
    Py_DECREF(args);
    Py_DECREF(function);
done:
    return result;
}

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCall(func, &arg, 1);
    }
#endif
    if (likely(PyCFunction_Check(func))) {
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
#if CYTHON_FAST_PYCCALL
        } else if (__Pyx_PyFastCFunction_Check(func)) {
            return __Pyx_PyCFunction_FastCall(func, &arg, 1);
#endif
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* SliceObject */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(operand) if (unlikely(zerodivision_check && ((operand) == 0))) {\
    PyErr_SetString(PyExc_ZeroDivisionError, "float division by zero");\
    return NULL;\
}
static PyObject* __Pyx_PyFloat_TrueDivideCObj(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double a = floatval;
    double b, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op2))) {
        b = PyFloat_AS_DOUBLE(op2);
        __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(b)
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        b = (double) PyInt_AS_LONG(op2);
        __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(b)
    } else
    #endif
    if (likely(PyLong_CheckExact(op2))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        switch (size) {
            case  0: __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(0) break;
            case -1: b = -(double) digits[0]; break;
            case  1: b = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    b = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    b = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (b < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            b = -b;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            b = PyLong_AsDouble(op2);
            if (unlikely(b == -1.0 && PyErr_Occurred())) return NULL;
            __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(b)
        }
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        __Pyx_PyFloat_TrueDivideCObj_ZeroDivisionError(b)
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
#if PY_MAJOR_VERSION < 3 || CYTHON_USE_PYLONG_INTERNALS
#define __Pyx_PyInt_RemainderObjC_ZeroDivisionError(operand)\
    if (unlikely(zerodivision_check && ((operand) == 0))) {\
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");\
        return NULL;\
    }
#endif
static PyObject* __Pyx_PyInt_RemainderObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            __Pyx_PyInt_RemainderObjC_ZeroDivisionError(b)
            x = a % b;
            x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyInt_FromLong(x);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_remainder(op1, op2);
            }
        }
                __Pyx_PyInt_RemainderObjC_ZeroDivisionError(b)
                x = a % b;
                x += ((x != 0) & ((x ^ b) < 0)) * b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla % llb;
                llx += ((llx != 0) & ((llx ^ llb) < 0)) * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    return (inplace ? PyNumber_InPlaceRemainder : PyNumber_Remainder)(op1, op2);
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, int inplace, int zerodivision_check) {
    (void)inplace;
    (void)zerodivision_check;
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
#ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
#endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
        double b = PyFloat_AS_DOUBLE(op2);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* RaiseTooManyValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
  static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
  static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
  static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyFloatBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace;
    (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
        a = PyFloat_AS_DOUBLE(op1);
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0; break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
            
        }
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* SetItemInt */
    static int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o)))
#else
    if (is_list || PySequence_Check(o))
#endif
    {
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* pyfrozenset_new */
    static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
    static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectGetMethod */
    static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || (Py_TYPE(descr) == &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (descr != NULL) {
        *method = descr;
        return 0;
    }
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'%.50s' object has no attribute '%U'",
                 tp->tp_name, name);
#else
                 "'%.50s' object has no attribute '%.400s'",
                 tp->tp_name, PyString_AS_STRING(name));
#endif
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod1 */
    static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* append */
    static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* CalculateMetaclass */
    static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
    static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* PyErrFetchRestore */
    #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
    #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    int res = exc_type1 ? __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type1) : 0;
    if (!res) {
        res = __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
    return res;
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type %.200s).  "
                "The ability to return an instance of a strict subclass of int "
                "is deprecated, and may be removed in a future version of Python.",
                Py_TYPE(result)->tp_name)) {
            Py_DECREF(result);
            return NULL;
        }
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type %.200s)",
                 type_name, type_name, Py_TYPE(result)->tp_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
